{
  "openapi": "3.0.2",
  "info": {
    "title": "Core",
    "version": "2023-08-01",
    "contact": {
      "email": "core@stedi.com"
    },
    "license": {
      "name": "Proprietary",
      "url": "https://stedi.com"
    }
  },
  "paths": {
    "/change/medicalnetwork/eligibility/v3": {
      "post": {
        "operationId": "EligibilityCheck",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EligibilityCheckRequestContent"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "Stedi-Response-Type",
            "in": "header",
            "description": "Temporary parameter used to control the returned response shape.",
            "schema": {
              "$ref": "#/components/schemas/ResponseType"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "EligibilityCheck 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EligibilityCheckResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/change/medicalnetwork/eligibility/v3/raw-x12": {
      "post": {
        "operationId": "EligibilityRawX12Check",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EligibilityRawX12CheckRequestContent"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "Stedi-Response-Type",
            "in": "header",
            "description": "Temporary parameter used to control the returned response shape.",
            "schema": {
              "$ref": "#/components/schemas/ResponseType"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "EligibilityRawX12Check 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EligibilityRawX12CheckResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/change/medicalnetwork/professionalclaims/v3/raw-x12-submission": {
      "post": {
        "operationId": "ClaimsRawX12Submission",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimsRawX12SubmissionRequestContent"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "Stedi-Partnership-Id",
            "in": "header",
            "description": "The partnership ID.",
            "schema": {
              "type": "string",
              "description": "The partnership ID."
            },
            "required": true
          },
          {
            "name": "Stedi-Response-Type",
            "in": "header",
            "description": "Temporary parameter used to control the returned response shape.",
            "schema": {
              "$ref": "#/components/schemas/ResponseType"
            },
            "required": true
          },
          {
            "name": "Stedi-Transaction-Setting-Id",
            "in": "header",
            "description": "The outbound transaction setting ID.",
            "schema": {
              "type": "string",
              "description": "The outbound transaction setting ID."
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ClaimsRawX12Submission 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimsRawX12SubmissionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/change/medicalnetwork/professionalclaims/v3/submission": {
      "post": {
        "operationId": "ClaimsSubmission",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimsSubmissionRequestContent"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "Stedi-Partnership-Id",
            "in": "header",
            "description": "The partnership ID.",
            "schema": {
              "type": "string",
              "description": "The partnership ID."
            },
            "required": true
          },
          {
            "name": "Stedi-Response-Type",
            "in": "header",
            "description": "Temporary parameter used to control the returned response shape.",
            "schema": {
              "$ref": "#/components/schemas/ResponseType"
            },
            "required": true
          },
          {
            "name": "Stedi-Transaction-Setting-Id",
            "in": "header",
            "description": "The outbound transaction setting ID.",
            "schema": {
              "type": "string",
              "description": "The outbound transaction setting ID."
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ClaimsSubmission 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimsSubmissionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/destinations/attempts": {
      "get": {
        "description": "Fetch destination attempts for a specific event id.",
        "operationId": "GetDestinationAttempts",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event you want to get destination logs for",
            "schema": {
              "type": "string",
              "description": "The ID of the event you want to get destination logs for"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetDestinationAttempts 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDestinationAttemptsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/destinations/attempts/{attemptId}": {
      "get": {
        "description": "Fetch destination attempt details for a specific event id and attempt id.",
        "operationId": "GetDestinationAttemptDetails",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event you want to get logs for",
            "schema": {
              "type": "string",
              "description": "The ID of the event you want to get logs for"
            },
            "required": true
          },
          {
            "name": "attemptId",
            "in": "path",
            "description": "The ID of the attempt you want to get detailed logs for",
            "schema": {
              "type": "string",
              "description": "The ID of the attempt you want to get detailed logs for"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetDestinationAttemptDetails 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDestinationAttemptDetailsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/retry": {
      "post": {
        "description": "This endpoint retriggers the specified processing event.",
        "operationId": "RetryEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event you want Stedi to re-emit.",
            "schema": {
              "type": "string",
              "description": "The ID of the event you want Stedi to re-emit."
            },
            "required": true,
            "examples": {
              "RetryEvent_example1": {
                "summary": "Retry event",
                "description": "",
                "value": "f75168e4-e682-4410-bfec-b5b1541c7f21"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RetryEvent 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetryEventResponseContent"
                },
                "examples": {
                  "RetryEvent_example1": {
                    "summary": "Retry event",
                    "description": "",
                    "value": {
                      "eventId": "f75168e4-e682-4410-bfec-b5b1541c7f22"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/executions": {
      "get": {
        "description": "Fetch a list of executions, sorted by the date they were created from newest to oldest.",
        "operationId": "ListExecutions",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of elements to return in a page. If not specified, the default is 100.",
            "schema": {
              "type": "number",
              "minimum": 1,
              "description": "The maximum number of elements to return in a page. If not specified, the default is 100."
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "`pageToken` is an opaque token returned by a previous call to this operation in the `nextPageToken`",
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1,
              "description": "`pageToken` is an opaque token returned by a previous call to this operation in the `nextPageToken`"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ListExecutions 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListExecutionsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/executions/{executionId}": {
      "get": {
        "description": "Retrieve the file execution details for a given executionId.",
        "operationId": "GetExecution",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetExecution 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetExecutionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/executions/{executionId}/input": {
      "get": {
        "description": "This endpoint is used to retrieve an execution's input document before it passes through any translation and mappings, generally this will be EDI.\n\nThis endpoint returns a 302 Temporary redirect to the document download URL. Many HTTP clients will automatically follow this redirect, or have a simple follow redirects configuration to set. For instance in `curl` using the `-L` or `--location` flag will automatically follow the redirect.\n\nIn the event you cannot, or chose not to automatically follow the redirect, the body of the response contains a JSON object with a single key `documentDownloadUrl` which contains a temporary URL to download the document. This URL is good for 60 minutes.\n\nThere are no size restrictions on documents when fetching from this endpoint.\n",
        "operationId": "GetExecutionInputDocument",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "GetExecutionInputDocument 302 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetExecutionInputDocumentResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/executions/{executionId}/input-url": {
      "get": {
        "description": "This endpoint is used to retrieve an execution's input document before it passes through any translation and mappings. Generally, this will be EDI. This endpoint returns the document download URL, it must be then fetched for the actual document content. There are no size restrictions on documents when fetching from this endpoint.",
        "operationId": "GetExecutionInputDocumentUrl",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetExecutionInputDocumentUrl 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetExecutionInputDocumentUrlResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/executions/{executionId}/metadata": {
      "get": {
        "description": "This endpoint is used to retrieve an execution's metadata document.\n\nThis endpoint returns a 302 Temporary redirect to the document download URL. Many HTTP clients will automatically follow this redirect, or have a simple follow redirects configuration to set. For instance in `curl` using the `-L` or `--location` flag will automatically follow the redirect.\n\nIn the event you cannot, or chose not to automatically follow the redirect, the body of the response contains a JSON object with a single key `documentDownloadUrl` which contains a temporary URL to download the document. This URL is good for 60 minutes.\n\nThere are no size restrictions on documents when fetching from this endpoint.\n",
        "operationId": "GetExecutionMetadataDocument",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "GetExecutionMetadataDocument 302 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetExecutionMetadataDocumentResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/executions/{executionId}/metadata-url": {
      "get": {
        "description": "This endpoint is used to retrieve a file execution's metadata document, limited to inbound/outbound x12 files. This endpoint returns the metadata document download URL, it must be then fetched for the actual document content. There are no size restrictions on documents when fetching from this endpoint.",
        "operationId": "GetExecutionMetadataDocumentUrl",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetExecutionMetadataDocumentUrl 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetExecutionMetadataDocumentUrlResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/executions/{executionId}/output": {
      "get": {
        "description": "This endpoint is used to retrieve an execution's output document.\n\nThis endpoint returns a 302 Temporary redirect to the document download URL. Many HTTP clients will automatically follow this redirect, or have a simple follow redirects configuration to set. For instance in `curl` using the `-L` or `--location` flag will automatically follow the redirect.\n\nIn the event you cannot, or chose not to automatically follow the redirect, the body of the response contains a JSON object with a single key `documentDownloadUrl` which contains a temporary URL to download the document. This URL is good for 60 minutes.\n\nThere are no size restrictions on documents when fetching from this endpoint.\n",
        "operationId": "GetExecutionOutputDocument",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "GetExecutionOutputDocument 302 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetExecutionOutputDocumentResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/executions/{executionId}/output-url": {
      "get": {
        "description": "This endpoint is used to retrieve an execution's output document. This endpoint returns the document download URL, it must be then fetched for the actual document content. There are no size restrictions on documents when fetching from this endpoint.",
        "operationId": "GetExecutionOutputDocumentUrl",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetExecutionOutputDocumentUrl 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetExecutionOutputDocumentUrlResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/executions/{executionId}/transactions": {
      "get": {
        "description": "Fetch a list of transactions for a given file execution, sorted by the date they were created from newest to oldest. Includes the full transaction details.",
        "operationId": "ListExecutionTransactions",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of elements to return in a page. If not specified, the default is 100.",
            "schema": {
              "type": "number",
              "maximum": 500,
              "minimum": 1,
              "description": "The maximum number of elements to return in a page. If not specified, the default is 100."
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "`pageToken` is an opaque token returned by a previous call to this operation in the `nextPageToken`",
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1,
              "description": "`pageToken` is an opaque token returned by a previous call to this operation in the `nextPageToken`"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ListExecutionTransactions 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListExecutionTransactionsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/fragments/{fragmentGroupId}": {
      "post": {
        "description": "This endpoint stages a fragment for outbound delivery.",
        "operationId": "CreateOutboundFragment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOutboundFragmentRequestContent"
              },
              "examples": {
                "CreateOutboundFragment_example1": {
                  "summary": "Stage fragment",
                  "description": "",
                  "value": {
                    "guideId": "01HQ1XPE9C3SCEB2ND7VC53A8M",
                    "fragment": {
                      "baseline_item_data_PO1_loop": [
                        {
                          "baseline_item_data_PO1": {
                            "assigned_identification_01": "123",
                            "quantity_02": 3,
                            "unit_or_basis_for_measurement_code_03": "XX",
                            "unit_price_04": 3
                          }
                        },
                        {
                          "baseline_item_data_PO1": {
                            "assigned_identification_01": "456",
                            "quantity_02": 4,
                            "unit_or_basis_for_measurement_code_03": "XX",
                            "unit_price_04": 4
                          }
                        },
                        {
                          "baseline_item_data_PO1": {
                            "assigned_identification_01": "789",
                            "quantity_02": 5,
                            "unit_or_basis_for_measurement_code_03": "XX",
                            "unit_price_04": 5
                          }
                        },
                        {
                          "baseline_item_data_PO1": {
                            "assigned_identification_01": "756",
                            "quantity_02": 3,
                            "unit_or_basis_for_measurement_code_03": "XX",
                            "unit_price_04": 3
                          }
                        },
                        {
                          "baseline_item_data_PO1": {
                            "assigned_identification_01": "432",
                            "quantity_02": 4,
                            "unit_or_basis_for_measurement_code_03": "XX",
                            "unit_price_04": 4
                          }
                        },
                        {
                          "baseline_item_data_PO1": {
                            "assigned_identification_01": "543",
                            "quantity_02": 5,
                            "unit_or_basis_for_measurement_code_03": "XX",
                            "unit_price_04": 5
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "fragmentGroupId",
            "in": "path",
            "description": "A unique ID for a group of fragments on Stedi. Stedi creates a new fragment group if one does not exist with the specified ID.",
            "schema": {
              "type": "string",
              "description": "A unique ID for a group of fragments on Stedi. Stedi creates a new fragment group if one does not exist with the specified ID."
            },
            "required": true,
            "examples": {
              "CreateOutboundFragment_example1": {
                "summary": "Stage fragment",
                "description": "",
                "value": "fragmentGroup-02-21-2024"
              }
            }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "A unique string to identify this request to the server. The key can be up to 255 characters. You can safely retry requests with the same idempotency key within 24 hours of making the first request. This prevents sending duplicate data to your trading partners in case of network errors or other intermittent failures. [Learn more](https://www.stedi.com/docs/api-reference/index#idempotency-keys).",
            "schema": {
              "type": "string",
              "description": "A unique string to identify this request to the server. The key can be up to 255 characters. You can safely retry requests with the same idempotency key within 24 hours of making the first request. This prevents sending duplicate data to your trading partners in case of network errors or other intermittent failures. [Learn more](https://www.stedi.com/docs/api-reference/index#idempotency-keys)."
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CreateOutboundFragment 201 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOutboundFragmentResponseContent"
                },
                "examples": {
                  "CreateOutboundFragment_example1": {
                    "summary": "Stage fragment",
                    "description": "",
                    "value": {
                      "fragmentGroupId": "some-transaction-id",
                      "createdAt": "2024-02-21T00:00:00Z",
                      "fragmentId": "d3b3e3e3-3e3e-3e3e-3e3e-3e3e3e3e3e3e"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "409": {
            "description": "ResourceConflictException 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/partnerships/{partnershipId}/transactions/{transactionSettingId}": {
      "post": {
        "description": "This endpoint generates and delivers fully-formed EDI files containing a single transaction. It is the simplest way to generate EDI with Stedi.",
        "operationId": "CreatePartnershipOutboundTransaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePartnershipOutboundTransactionRequestContent"
              },
              "examples": {
                "CreatePartnershipOutboundTransaction_example1": {
                  "summary": "Generate Transaction with Guide JSON",
                  "description": "",
                  "value": {
                    "filename": "my-output-file.edi",
                    "transaction": {
                      "hello": "world",
                      "heading": {
                        "transaction_set_header_ST": {
                          "transaction_set_identifier_code_01": "850",
                          "transaction_set_control_number_02": 1
                        },
                        "beginning_segment_for_purchase_order_BEG": {
                          "transaction_set_purpose_code_01": "XX",
                          "purchase_order_type_code_02": "XX",
                          "purchase_order_number_03": "XXXXX",
                          "date_05": "2023-08-11"
                        }
                      },
                      "detail": {
                        "baseline_item_data_PO1_loop": [
                          {
                            "baseline_item_data_PO1": {}
                          }
                        ]
                      },
                      "summary": {
                        "transaction_set_trailer_SE": {
                          "number_of_included_segments_01": 4,
                          "transaction_set_control_number_02": 1
                        }
                      }
                    }
                  }
                },
                "CreatePartnershipOutboundTransaction_example2": {
                  "summary": "Generate Transaction with Fragments",
                  "description": "",
                  "value": {
                    "filename": "my-output-file-fragments.edi",
                    "fragmentGroupIds": [
                      "some-fragment-group-id"
                    ],
                    "transaction": {
                      "heading": {
                        "transaction_set_header_ST": {
                          "transaction_set_identifier_code_01": "850",
                          "transaction_set_control_number_02": 1
                        },
                        "beginning_segment_for_purchase_order_BEG": {
                          "transaction_set_purpose_code_01": "XX",
                          "purchase_order_type_code_02": "XX",
                          "purchase_order_number_03": "XXXX",
                          "date_05": "2023-12-12"
                        }
                      },
                      "detail": {
                        "baseline_item_data_PO1_loop": []
                      },
                      "summary": {}
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "partnershipId",
            "in": "path",
            "description": "A unique ID for this partnership within Stedi. You can find this ID on the [Trading partners](https://www.stedi.com/app/core/partnerships) page under **Partnership identifier**.",
            "schema": {
              "type": "string",
              "maxLength": 81,
              "minLength": 1,
              "pattern": "^([a-zA-Z0-9_-]+)$",
              "description": "A unique ID for this partnership within Stedi. You can find this ID on the [Trading partners](https://www.stedi.com/app/core/partnerships) page under **Partnership identifier**."
            },
            "required": true,
            "examples": {
              "CreatePartnershipOutboundTransaction_example1": {
                "summary": "Generate Transaction with Guide JSON",
                "description": "",
                "value": "ACME_AMAZON"
              },
              "CreatePartnershipOutboundTransaction_example2": {
                "summary": "Generate Transaction with Fragments",
                "description": "",
                "value": "ACME_AMAZON"
              }
            }
          },
          {
            "name": "transactionSettingId",
            "in": "path",
            "description": "A unique ID for the outbound transaction setting Stedi should use to determine the correct guide for validation and generation. It must be attached to the partnership associated with the `partnershipId`. To find the `transactionSettingsId`, go to the partnership and use the **Transaction Setting ID** field for the outbound transaction setting. If you are generating a transaction with fragments, the associated guide must be configured to use fragments.",
            "schema": {
              "type": "string",
              "description": "A unique ID for the outbound transaction setting Stedi should use to determine the correct guide for validation and generation. It must be attached to the partnership associated with the `partnershipId`. To find the `transactionSettingsId`, go to the partnership and use the **Transaction Setting ID** field for the outbound transaction setting. If you are generating a transaction with fragments, the associated guide must be configured to use fragments."
            },
            "required": true,
            "examples": {
              "CreatePartnershipOutboundTransaction_example1": {
                "summary": "Generate Transaction with Guide JSON",
                "description": "",
                "value": "some-setting-id"
              },
              "CreatePartnershipOutboundTransaction_example2": {
                "summary": "Generate Transaction with Fragments",
                "description": "",
                "value": "some-setting-id"
              }
            }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "A unique string to identify this request to the server. The key can be up to 255 characters. You can safely retry requests with the same idempotency key within 24 hours of making the first request. This prevents sending duplicate data to your trading partners in case of network errors or other intermittent failures. [Learn more](https://www.stedi.com/docs/api-reference/index#idempotency-keys).",
            "schema": {
              "type": "string",
              "description": "A unique string to identify this request to the server. The key can be up to 255 characters. You can safely retry requests with the same idempotency key within 24 hours of making the first request. This prevents sending duplicate data to your trading partners in case of network errors or other intermittent failures. [Learn more](https://www.stedi.com/docs/api-reference/index#idempotency-keys)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CreatePartnershipOutboundTransaction 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePartnershipOutboundTransactionResponseContent"
                },
                "examples": {
                  "CreatePartnershipOutboundTransaction_example1": {
                    "summary": "Generate Transaction with Guide JSON",
                    "description": "",
                    "value": {
                      "fileExecutionId": "d3b3e3e3-3e3e-3e3e-3e3e-3e3e3e3e3e3e"
                    }
                  },
                  "CreatePartnershipOutboundTransaction_example2": {
                    "summary": "Generate Transaction with Fragments",
                    "description": "",
                    "value": {
                      "fileExecutionId": "d3b3e3e3-3e3e-3e3e-3e3e-3e3e3e3e3e3e"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/polling/executions": {
      "get": {
        "description": "This endpoint is used to regularly poll for new executions that have been processed by Stedi.\n\nYou must define one of `startDateTime` or `pageToken` when making a request.\n\nYou may optionally define a `pageSize`. The minimum `pageSize` is 1, and the maximum `pageSize` is 1000. The default is 100.\n\n`startDateTime` takes a string in ISO 8601 format. (ex: `2023-08-10T18:00:00Z`). \n`startDateTime` must be set to at least 1 minute in the past.\n\nThe results will contain executions that occurred after this `startDateTime`. Starting from the oldest to newest executions ordered by the `processedAt` field. Note, this is _exclusive_ of the `startDateTime`, a execution occuring at exactly `2023-08-10T18:00:00Z` for instance, would not be included. In addition, there is a 15 second window where newly created executions will not be included to account for any network latency or clock drifts within the systems to ensure you do not miss any executions.\n\nEach request will _always_ return a `nextPageToken`, regardless of whether there are new executions or not.\n\nWe DO NOT recommend trying to roll your own polling strategy leveraging `startDateTime` only. There are edge cases around two executions occuring at the _exact_ same time and being on the edge of a pagination which could cause you to miss one due to the exclusive nature of `startDateTime`. We recommend using `pageToken`'s instead.\n\nWhen making subsequent polling requests (not initiating with `startDateTime`), the `pageToken` can be used to continue iterating through pages of executions. Usage of the `pageToken` guaruntees you will not miss any executions on the stream. If at any point there are no more new executions in the `item` array, you will still receive a `nextPageToken`. Continue to use this token to poll for new executions. Once there are new executions, they will be returned in the `item` array.\n\n`pageToken`'s you have retrieved can serve as checkpoints. They do not expire, and you can always start from that point in the execution stream again if you need to catch a system up or recover from a failure. Storing `pageToken`'s as part of your polling process is encouraged.\n\n`pageToken`'s are unique per request, opaque, and should not be parsed or modified in any way. They are not guaranteed to be in any particular format, and may change in the future.\n",
        "operationId": "ListPollingExecutions",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of elements to return in a page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "description": "The maximum number of elements to return in a page"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "The token used for pagination",
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1,
              "description": "The token used for pagination"
            }
          },
          {
            "name": "startDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ListPollingExecutions 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPollingExecutionsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/polling/transactions": {
      "get": {
        "description": "This endpoint is used to regularly poll for new transactions that have been processed in Core.\n\nYou must define one of `startDateTime` or `pageToken` when making a request.\n\nYou may optionally define a `pageSize`. The minimum `pageSize` is 1, and the maximum `pageSize` is 1000. The default is 100.\n\n`startDateTime` takes a string in ISO 8601 format. (ex: `2023-08-10T18:00:00Z`). \n`startDateTime` must be set to at least 1 minute in the past.\n\nThe results will contain transactions that occurred after this `startDateTime`. Starting from the oldest to newest transactions ordered by the `processedAt` field. Note, this is _exclusive_ of the `startDateTime`, a transaction occuring at exactly `2023-08-10T18:00:00Z` for instance, would not be included. In addition, there is a 15 second window where newly created transactions will not be included to account for any network latency or clock drifts within the systems to ensure you do not miss any transactions.\n\nEach request will _always_ return a `nextPageToken`, regardless of whether there are new transactions or not.\n\nWe DO NOT recommend trying to roll your own polling strategy leveraging `startDateTime` only. There are edge cases around two transactions occuring at the _exact_ same time and being on the edge of a pagination which could cause you to miss one due to the exclusive nature of `startDateTime`. We recommend using `pageToken`'s instead.\n\nWhen making subsequent polling requests (not initiating with `startDateTime`), the `pageToken` can be used to continue iterating through pages of transactions. Usage of the `pageToken` guaruntees you will not miss any transactions on the stream. If at any point there are no more new transactions in the `item` array, you will still receive a `nextPageToken`. Continue to use this token to poll for new transactions. Once there are new transactions, they will be returned in the `item` array.\n\n`pageToken`'s you have retrieved can serve as checkpoints. They do not expire, and you can always start from that point in the transaction stream again if you need to catch a system up or recover from a failure. Storing `pageToken`'s as part of your polling process is encouraged.\n\n`pageToken`'s are unique per request, opaque, and should not be parsed or modified in any way. They are not guaranteed to be in any particular format, and may change in the future.\n",
        "operationId": "ListPollingTransactions",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of elements to return in a page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "description": "The maximum number of elements to return in a page"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "The token used for pagination",
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1,
              "description": "The token used for pagination"
            }
          },
          {
            "name": "startDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ListPollingTransactions 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPollingTransactionsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "description": "Fetch a list of transactions, sorted by the date they were created from newest to oldest.\nGenerally this endpoint is used to display a list of transactions in a UI.\nIf you are looking to regularly fetch and check for new transactions for programmatic usage, you should use the `ListPollingTransactions` operation instead.",
        "operationId": "ListTransactions",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of elements to return in a page. If not specified, the default is 100.",
            "schema": {
              "type": "number",
              "maximum": 500,
              "minimum": 1,
              "description": "The maximum number of elements to return in a page. If not specified, the default is 100."
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "`pageToken` is an opaque token returned by a previous call to this operation in the `nextPageToken`. If not specified, the first page of results is returned.",
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1,
              "description": "`pageToken` is an opaque token returned by a previous call to this operation in the `nextPageToken`. If not specified, the first page of results is returned."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ListTransactions 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTransactionsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transactionId}": {
      "get": {
        "description": "Fetch a single transaction by its ID.",
        "operationId": "GetTransaction",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app.",
            "schema": {
              "type": "string",
              "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app."
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetTransaction 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transactionId}/fragments/{fragmentIndex}": {
      "get": {
        "description": "Fetch a fragment by its index for a given transaction.",
        "operationId": "GetTransactionFragment",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app.",
            "schema": {
              "type": "string",
              "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app."
            },
            "required": true
          },
          {
            "name": "fragmentIndex",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetTransactionFragment 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionFragmentResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transactionId}/fragments/{fragmentIndex}/output": {
      "get": {
        "description": "This endpoint is used to retrieve a transaction fragment's output document after it has been translated via Core. Generally this will be JSON.\n\nThis endpoint returns a 302 Temporary redirect to the document download URL. Many HTTP clients will automatically follow this redirect, or have a simple follow redirects configuration to set. For instance in `curl` using the `-L` or `--location` flag will automatically follow the redirect.\n\nIn the event you cannot, or chose not to automatically follow the redirect, the body of the response contains a JSON object with a single key `documentDownloadUrl` which contains a temporary URL to download the document. This URL is good for 60 minutes.\n\nThere are no size restrictions on documents when fetching from this endpoint, however they are generally smaller and consumable by nature of being a fragment.\n",
        "operationId": "GetTransactionFragmentOutputDocument",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app.",
            "schema": {
              "type": "string",
              "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app."
            },
            "required": true
          },
          {
            "name": "fragmentIndex",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "GetTransactionFragmentOutputDocument 302 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionFragmentOutputDocumentResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transactionId}/fragments/{fragmentIndex}/output-url": {
      "get": {
        "description": "This endpoint is used to retrieve a transaction fragment's output document URL after it has been translated via Core.\n\nThis endpoint returns the document download URL, it must be then fetched for the actual document content.\nThere are no size restrictions on documents when fetching from this endpoint, however they are generally smaller and consumable by nature of being a fragment.\n",
        "operationId": "GetTransactionFragmentOutputDocumentUrl",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app.",
            "schema": {
              "type": "string",
              "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app."
            },
            "required": true
          },
          {
            "name": "fragmentIndex",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetTransactionFragmentOutputDocumentUrl 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionFragmentOutputDocumentUrlResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transactionId}/input": {
      "get": {
        "description": "This endpoint is used to retrieve a transaction's input document before it passes through any translation and mappings, generally this will be EDI.\n\nThis endpoint returns a 302 Temporary redirect to the document download URL. Many HTTP clients will automatically follow this redirect, or have a simple follow redirects configuration to set. For instance in `curl` using the `-L` or `--location` flag will automatically follow the redirect.\n\nIn the event you cannot, or chose not to automatically follow the redirect, the body of the response contains a JSON object with a single key `documentDownloadUrl` which contains a temporary URL to download the document. This URL is good for 60 minutes.\n\nThere are no size restrictions on documents when fetching from this endpoint.\n",
        "operationId": "GetTransactionInputDocument",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app.",
            "schema": {
              "type": "string",
              "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app."
            },
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "GetTransactionInputDocument 302 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionInputDocumentResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transactionId}/input-url": {
      "get": {
        "description": "This endpoint is used to retrieve a transaction's input document url before it passes through any translation and mappings, generally this will be EDI.\n\nThis endpoint returns the document download URL, it must be then fetched for the actual document content. There are no size restrictions on documents when fetching from this endpoint.\n",
        "operationId": "GetTransactionInputDocumentUrl",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app.",
            "schema": {
              "type": "string",
              "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app."
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetTransactionInputDocumentUrl 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionInputDocumentUrlResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transactionId}/output": {
      "get": {
        "description": "This endpoint is used to retrieve a transaction's output document after it has been translated via Core. Generally this will be JSON.\n\nThis endpoint returns a 302 Temporary redirect to the document download URL. Many HTTP clients will automatically follow this redirect, or have a simple follow redirects configuration to set. For instance in `curl` using the `-L` or `--location` flag will automatically follow the redirect.\n\nIn the event you cannot, or chose not to automatically follow the redirect, the body of the response contains a JSON object with a single key `documentDownloadUrl` which contains a temporary URL to download the document. This URL is good for 60 minutes.\n\nThere are no size restrictions on documents when fetching from this endpoint.\n",
        "operationId": "GetTransactionOutputDocument",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app.",
            "schema": {
              "type": "string",
              "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app."
            },
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "GetTransactionOutputDocument 302 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionOutputDocumentResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transactionId}/output-url": {
      "get": {
        "description": "This endpoint is used to retrieve a transaction's output document url after it has been translated via Core.\n\nThis endpoint returns the document download URL, it must be then fetched for the actual document content. There are no size restrictions on documents when fetching from this endpoint.\n",
        "operationId": "GetTransactionOutputDocumentUrl",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app.",
            "schema": {
              "type": "string",
              "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app."
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetTransactionOutputDocumentUrl 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionOutputDocumentUrlResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/x12/partnerships/{partnershipId}/generate-edi": {
      "post": {
        "description": "This endpoint generates and delivers fully-formed EDI files to your trading partners.",
        "operationId": "GenerateEdi",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateEdiRequestContent"
              },
              "examples": {
                "GenerateEdi_example1": {
                  "summary": "Generate EDI",
                  "description": "",
                  "value": {
                    "filename": "my-output-file.edi",
                    "overrides": {
                      "interchangeUsageIndicator": "T",
                      "acknowledgmentRequestedCode": "1"
                    },
                    "transactionGroups": [
                      {
                        "transactionSettingId": "some-setting-id",
                        "overrides": {
                          "localApplicationId": "customLocal",
                          "partnerApplicationId": "customPartner"
                        },
                        "transactions": [
                          {
                            "heading": {
                              "transaction_set_header_ST": {
                                "transaction_set_identifier_code_01": "850",
                                "transaction_set_control_number_02": 1
                              },
                              "beginning_segment_for_purchase_order_BEG": {
                                "transaction_set_purpose_code_01": "XX",
                                "purchase_order_type_code_02": "XX",
                                "purchase_order_number_03": "XXXXX",
                                "date_05": "2023-08-11"
                              }
                            },
                            "detail": {
                              "baseline_item_data_PO1_loop": [
                                {
                                  "baseline_item_data_PO1": {}
                                }
                              ]
                            },
                            "summary": {
                              "transaction_set_trailer_SE": {
                                "number_of_included_segments_01": 4,
                                "transaction_set_control_number_02": 1
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "partnershipId",
            "in": "path",
            "description": "A unique ID for this partnership within Stedi. You can find this ID on the [Trading partners](https://www.stedi.com/app/core/partnerships) page under **Partnership identifier**.",
            "schema": {
              "type": "string",
              "maxLength": 81,
              "minLength": 1,
              "pattern": "^([a-zA-Z0-9_-]+)$",
              "description": "A unique ID for this partnership within Stedi. You can find this ID on the [Trading partners](https://www.stedi.com/app/core/partnerships) page under **Partnership identifier**."
            },
            "required": true,
            "examples": {
              "GenerateEdi_example1": {
                "summary": "Generate EDI",
                "description": "",
                "value": "ACME_BSW"
              }
            }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "A unique string to identify this request to the server. The key can be up to 255 characters. You can safely retry requests with the same idempotency key within 24 hours of making the first request. This prevents sending duplicate data to your trading partners in case of network errors or other intermittent failures. [Learn more](https://www.stedi.com/docs/api-reference/index#idempotency-keys).",
            "schema": {
              "type": "string",
              "description": "A unique string to identify this request to the server. The key can be up to 255 characters. You can safely retry requests with the same idempotency key within 24 hours of making the first request. This prevents sending duplicate data to your trading partners in case of network errors or other intermittent failures. [Learn more](https://www.stedi.com/docs/api-reference/index#idempotency-keys)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GenerateEdi 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateEdiResponseContent"
                },
                "examples": {
                  "GenerateEdi_example1": {
                    "summary": "Generate EDI",
                    "description": "",
                    "value": {
                      "edi": "ISA*00*          *00*          *14*ANOTHERMERCH   *ZZ*THISISME       *230828*0900*^*00801*000000002*1*P*>~GS*PO*ANOTHERMERCH*THISISME*20230828*090020*000000002*X*008010~ST*850*0001~BEG*XX*XX*XXXXX**20230811~PO1~SE*4*0001~GE*1*000000002~IEA*1*000000002~",
                      "artifactId": "f75168e4-e682-4410-bfec-b5b1541c7f21.x12",
                      "fileExecutionId": "f75168e4-e682-4410-bfec-b5b1541c7f21"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ResourceUnderChangeException 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUnderChangeExceptionResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedException 401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedExceptionResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedExceptionResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "ResourceNotFoundException 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundExceptionResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThrottlingExceptionResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "ServiceException 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExceptionResponseContent"
                }
              }
            }
          },
          "503": {
            "description": "ServiceUnavailableException 503 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableExceptionResponseContent"
                }
              }
            }
          },
          "504": {
            "description": "GatewayTimeoutException 504 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayTimeoutExceptionResponseContent"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessDeniedExceptionResponseContent": {
        "type": "object",
        "description": "The server response for authorization failure.",
        "properties": {
          "message": {
            "type": "string",
            "description": "Human readable exception message."
          },
          "code": {
            "type": "string",
            "description": "Classification of the exception type."
          }
        },
        "required": [
          "message"
        ]
      },
      "AdditionalIdentification": {
        "type": "object",
        "description": "Loop: 2100C and 2100D, Segment: REF Notes: Additional Identification",
        "properties": {
          "planNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=18 Plan Number"
          },
          "policyNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=1L Group or Policy Number"
          },
          "memberIdentificationNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=1W Member Identification Number"
          },
          "contractNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=CT Contract Number"
          },
          "medicalRecordIdentificationNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=EA Medical Record Identification Number"
          },
          "patientAccountNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=EJ Patient Account Number"
          },
          "healthInsuranceClaimNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=F6 Health Insurance (HIC) Number"
          },
          "identificationCardSerialNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=GH Identification Card Serial Number"
          },
          "insurancePolicyNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=IG Insurance Policy Number"
          },
          "planNetworkIdentificationNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=N6 Plan Network Identification Number"
          },
          "agencyClaimNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=Y4 Agency Claim Number"
          }
        }
      },
      "AdditionalInformation": {
        "type": "object",
        "description": "AdditionalInformation",
        "properties": {
          "description": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: MSG, Element: MSG01, Notes: Message Text Description"
          }
        }
      },
      "Address": {
        "type": "object",
        "description": "Address: N3 and N4",
        "properties": {
          "address1": {
            "type": "string",
            "maxLength": 55,
            "minLength": 0,
            "description": "Segment: N3, Element: N301, Notes: Required, Address Information"
          },
          "address2": {
            "type": "string",
            "maxLength": 55,
            "minLength": 0,
            "description": "Segment: N3, Element: N302, Notes: Address Information"
          },
          "city": {
            "type": "string",
            "maxLength": 30,
            "minLength": 0,
            "description": "Segment: N4, Element: N401, Notes: Required, city"
          },
          "state": {
            "type": "string",
            "maxLength": 2,
            "minLength": 0,
            "description": "Segment: N4, Element: N402, Notes: state example: TN, WA"
          },
          "postalCode": {
            "type": "string",
            "maxLength": 15,
            "minLength": 0,
            "description": "Segment: N4, Element: N403"
          },
          "countryCode": {
            "type": "string",
            "description": "Segment: N4, Element: N404"
          },
          "locationIdentifier": {
            "type": "string",
            "description": "Segment: N4, Element: N406"
          },
          "countrySubDivisionCode": {
            "type": "string",
            "description": "Segment: N4, Element: N407, Notes: Country SubDivision Code"
          }
        }
      },
      "AdjustmentGroupCode": {
        "type": "string",
        "description": "Loop: 2430, Segment: CAS, Element: CAS01, Notes: Code identifying the general category of payment adjustment",
        "enum": [
          "CO",
          "CR",
          "OA",
          "PI",
          "PR"
        ]
      },
      "AmbulanceCertification": {
        "type": "object",
        "description": "CRC",
        "properties": {
          "certificationConditionIndicator": {
            "$ref": "#/components/schemas/AmbulanceCertificationCertificationConditionIndicator"
          },
          "conditionCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AmbulanceCertificationConditionCodesItem"
            },
            "maxItems": 5,
            "minItems": 1,
            "description": "Loop: 2300, Segment: CRC, Element: CRC03, CRC04, CRC05, CRC06, CRC07, Note: Allowed Values are: '01' Patient was admitted to a hospital, '04' Patient was moved by stretcher, '05' Patient was unconscious or in shock, '06' Patient was transported in an emergency situation, '07' Patient had to be physically restrained, '08' Patient had visible hemorrhaging, '09' Ambulance service was medically necessary, '12' Patient is confined to a bed or chair"
          }
        },
        "required": [
          "certificationConditionIndicator",
          "conditionCodes"
        ]
      },
      "AmbulanceCertificationCertificationConditionIndicator": {
        "type": "string",
        "description": "Loop: 2300, Segment: CRC, Element: CRC02 when CRC01 = 07, Note: Allowed Values are: 'N' No, 'Y' Yes",
        "enum": [
          "N",
          "Y"
        ]
      },
      "AmbulanceCertificationConditionCodesItem": {
        "type": "string",
        "description": "Loop: 2300, Segment: CRC, Element: CRC03, CRC04, CRC05, CRC06, CRC07, Note: Allowed Values are: '01' Patient was admitted to a hospital, '04' Patient was moved by stretcher, '05' Patient was unconscious or in shock, '06' Patient was transported in an emergency situation, '07' Patient had to be physically restrained, '08' Patient had visible hemorrhaging, '09' Ambulance service was medically necessary, '12' Patient is confined to a bed or chair",
        "enum": [
          "01",
          "04",
          "05",
          "06",
          "07",
          "08",
          "09",
          "12"
        ]
      },
      "AmbulanceTransportInformation": {
        "type": "object",
        "description": "CR1",
        "properties": {
          "patientWeightInPounds": {
            "type": "string",
            "description": "Segment: CR1, Element: CR102"
          },
          "ambulanceTransportReasonCode": {
            "$ref": "#/components/schemas/AmbulanceTransportReasonCode"
          },
          "transportDistanceInMiles": {
            "type": "string",
            "description": "Segment: CR1, Element: CR106"
          },
          "roundTripPurposeDescription": {
            "type": "string",
            "description": "Segment: CR1, Element: CR109"
          },
          "stretcherPurposeDescription": {
            "type": "string",
            "description": "Segment: CR1, Element: CR110"
          }
        },
        "required": [
          "ambulanceTransportReasonCode",
          "transportDistanceInMiles"
        ]
      },
      "AmbulanceTransportReasonCode": {
        "type": "string",
        "description": "CR104, Note: Allowed Values are: 'A' Patient was transported to nearest facility for care of symptoms, complaints, or both, 'B' Patient was transported for the benefit of a preferred physician, 'C' Patient was transported for the nearness of family members, 'D' Patient was transported for the care of a specialist or for availability of specialized equipment, 'E' Patient Transferred to Rehabilitation Facility",
        "enum": [
          "A",
          "B",
          "C",
          "D",
          "E"
        ]
      },
      "Artifact": {
        "type": "object",
        "properties": {
          "artifactType": {
            "$ref": "#/components/schemas/ArtifactType"
          },
          "usage": {
            "$ref": "#/components/schemas/ArtifactUsage"
          },
          "sizeBytes": {
            "type": "number"
          },
          "url": {
            "type": "string"
          },
          "model": {
            "$ref": "#/components/schemas/ArtifactModel"
          }
        },
        "required": [
          "artifactType",
          "model",
          "sizeBytes",
          "url",
          "usage"
        ]
      },
      "ArtifactModel": {
        "type": "string",
        "enum": [
          "execution",
          "fragment",
          "transaction"
        ]
      },
      "ArtifactType": {
        "type": "string",
        "enum": [
          "text/csv",
          "application/edifact",
          "application/filepart",
          "application/json",
          "text/psv",
          "text/tsv",
          "application/edi-x12",
          "application/xml",
          "application/zip"
        ]
      },
      "ArtifactUsage": {
        "type": "string",
        "enum": [
          "input",
          "metadata",
          "output"
        ]
      },
      "AttachmentReportTypeCode": {
        "type": "string",
        "description": "Loop: 2400, Segment: PWK, Element: PWK01, Notes: Allowed Values are: '03' Report Justifying Treatment Beyond Utilization Guidelines, '04' Drugs Administered, '05' Treatment Diagnosis, '06' Initial Assessment, '07' Functional Goals, '08' Plan of Treatment, '09' Progress Report, '10' Continued Treatment, '11' Chemical Analysis, '13' Certified Test Report, '15' Justification for Admission, '21' Recovery Plan, 'A3' Allergies/Sensitivities Document, 'A4' Autopsy Report, 'AM' Ambulance Certification, 'AS' Admission Summary, 'B2' Prescription, 'B3' Physician Order, 'B4' Referral Form, 'BR' Benchmark Testing Results, 'BS' Baseline, 'BT' Blanket Test Results, 'CB' Chiropractic Justification, 'CK' Consent Form(s), 'CT' Certification, 'D2' Drug Profile Document, 'DA' Dental Models, 'DB' Durable Medical Equipment Prescription, 'DG' Diagnostic Report, 'DJ' Discharge Monitoring Report, 'DS' Discharge Summary, 'EB' Explanation of Benefits (Coordination of Benefits or Medicare Secondary Payor), 'HC' Health Certificate, 'HR' Health Clinic Records, 'I5' Immunization Record,'IR' State School Immunization Records, 'LA' Laboratory Results, 'M1' Medical Record Attachment, 'MT' Models, 'NM Nursing Notes', 'OB' Operative Note, 'OC' Oxygen Content Averaging Report, 'OD' Orders and Treatments Document, 'OE' Objective Physical Examination (including vital signs) Document, 'OX' Oxygen Therapy Certification, 'OZ' Support Data for Claim, 'P4' Pathology Report, 'P5' Patient Medical History Document, 'PE' Parenteral or Enteral Certification, 'PN' Physical Therapy Notes, 'PO' Prosthetics or Orthotic Certification, 'PQ' Paramedical Results, 'PY' Physician's Report, 'PZ' Physical Therapy Certification, 'RB' Radiology Films, 'RR' Radiology Reports, 'RT' Report of Tests and Analysis Report, 'RX' Renewable Oxygen Content Averaging Report, 'SG' Symptoms Document, 'V5' Death Notification, 'XP' Photographs",
        "enum": [
          "03",
          "04",
          "05",
          "06",
          "07",
          "08",
          "09",
          "10",
          "11",
          "13",
          "15",
          "21",
          "A3",
          "A4",
          "AM",
          "AS",
          "B2",
          "B3",
          "B4",
          "BR",
          "BS",
          "BT",
          "CB",
          "CK",
          "CT",
          "D2",
          "DA",
          "DB",
          "DG",
          "DJ",
          "DS",
          "EB",
          "HC",
          "HR",
          "I5",
          "IR",
          "LA",
          "M1",
          "MT",
          "NM",
          "OB",
          "OC",
          "OD",
          "OE",
          "OX",
          "OZ",
          "P4",
          "P5",
          "PE",
          "PN",
          "PO",
          "PQ",
          "PY",
          "PZ",
          "RB",
          "RR",
          "RT",
          "RX",
          "SG",
          "V5",
          "XP"
        ]
      },
      "AutoAccidentStateCode": {
        "type": "string",
        "description": "Loop 2300, Segment: CLM, Element: CLM11-04, Note: When CLM11-1 or CLM11-2 has a value of 'AA' to identify the state, province or sub-country code in which the automobile accident occurred.",
        "enum": [
          "AA",
          "EM",
          "OA"
        ]
      },
      "BenefitsAdditionalInformation": {
        "type": "object",
        "description": "BenefitsAdditionalInformation",
        "properties": {
          "stateLicenseNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=0B stateLicenseNumber"
          },
          "medicareProviderNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=1D medicareProviderNumber"
          },
          "medicaidProviderNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=1C medicaidProviderNumber"
          },
          "facilityIdNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=1J facilityIdNumber"
          },
          "personalIdentificationNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=4A personalIdentificationNumber"
          },
          "planNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=18 planNumber"
          },
          "policyNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=1L policyNumber"
          },
          "memberId": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=1W memberId"
          },
          "caseNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=3H caseNumber"
          },
          "familyUnitNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=46 familyUnitNumber"
          },
          "groupNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=6P groupNumber"
          },
          "referralNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=9F referralNumber"
          },
          "alternativeListId": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=ALS alternativeListId"
          },
          "classOfContractCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=CEE classOfContractCode"
          },
          "coverageListId": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=CLI coverageListId"
          },
          "contractNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=CT contractNumber"
          },
          "medicalRecordIdentificationNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=EA medicalRecordIdentificationNumber"
          },
          "electronicDevicePin": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=EL electronicDevicePin"
          },
          "submitterIdentificationNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=EO submitterIdentificationNumber"
          },
          "patientAccountNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=EJ patientAccountNumber"
          },
          "hicNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=F6 hicNumber"
          },
          "drugFormularyNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=FO drugFormularyNumber"
          },
          "priorAuthorizationNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=G1 priorAuthorizationNumber"
          },
          "idCardSerialNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=GH idCardSerialNumber"
          },
          "idCardNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=HJ idCardNumber"
          },
          "centersForMedicareAndMedicaidServicesNPI": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=HPI centersForMedicareAndMedicaidServicesNPI"
          },
          "issueNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=IF issueNumber"
          },
          "insurancePolicyNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=IG insurancePolicyNumber"
          },
          "userIdentification": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=JD userIdentification"
          },
          "medicalAssistanceCategory": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=M7 medicalAssistanceCategory"
          },
          "eligibilityCategory": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=MRC medicalAssistanceCategory"
          },
          "planNetworkIdNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=N6 planNetworkIdNumber"
          },
          "facilityNetworkIdentificationNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=N7 facilityNetworkIdentificationNumber"
          },
          "medicaidRecepientIdNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=NQ medicaidRecipientIdNumber"
          },
          "priorIdNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=Q4 priorIdNumber"
          },
          "socialSecurityNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=SY socialSecurityNumber"
          },
          "federalTaxpayersIdentificationNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=TJ federalTaxpayersIdentificationNumber"
          },
          "agencyClaimNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: REF, Element: REF02, Notes: REF01=Y4 agencyClaimNumber"
          }
        }
      },
      "BenefitsDateInformation": {
        "type": "object",
        "description": "BenefitsDateInformation",
        "properties": {
          "discharge": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=096 Discharge"
          },
          "discharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DtpDate"
            },
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=096 Discharge"
          },
          "issue": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=102 issue"
          },
          "effectiveDateOfChange": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=152 effectiveDateOfChange"
          },
          "periodStart": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=193 periodStart"
          },
          "periodEnd": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=193 periodEnd"
          },
          "completion": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=198 completion"
          },
          "coordinationOfBenefits": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=290 coordinationOfBenefits"
          },
          "plan": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=291 plan"
          },
          "benefit": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=292 benefit"
          },
          "primaryCareProvider": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=295 primaryCareProvider"
          },
          "latestVisitOrConsultation": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=304 latestVisitOrConsultation"
          },
          "eligibility": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=307 eligibility"
          },
          "added": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=318 added"
          },
          "cobraBegin": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=340 cobraBegin"
          },
          "cobraEnd": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=341 cobraEnd"
          },
          "premiumPaidtoDateBegin": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=342 premiumPaidToDateBegin"
          },
          "premiumPaidToDateEnd": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=343 premiumPaidToDateEnd"
          },
          "planBegin": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=346 planBegin"
          },
          "planEnd": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=347 planEnd"
          },
          "benefitBegin": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=348 benefitBegin"
          },
          "benefitEnd": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=349 benefitEnd"
          },
          "eligibilityBegin": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=356 eligibilityBegin"
          },
          "eligibilityEnd": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=357 eligibilityEnd"
          },
          "enrollment": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=382 enrollment"
          },
          "admission": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=435 admission"
          },
          "admissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DtpDate"
            },
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=435 admission"
          },
          "dateOfDeath": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=442 dateOfDeath"
          },
          "certification": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=458 certification"
          },
          "service": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=472 service"
          },
          "policyEffective": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=539 policyEffective"
          },
          "policyExpiration": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=540 policyExpiration"
          },
          "dateOfLastUpdate": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=636 dateOfLastUpdate"
          },
          "status": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03 Notes: DTP01=771 status"
          }
        }
      },
      "BenefitsInformation": {
        "type": "object",
        "description": "BenefitsInformation",
        "properties": {
          "code": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB01, Notes: Eligibility or Benefit Information Code"
          },
          "name": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB01, Notes: Eligibility or Benefit Information Code"
          },
          "coverageLevelCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB02, Notes: Coverage Level Code"
          },
          "coverageLevel": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB02, Notes: Coverage Level"
          },
          "serviceTypeCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB03, Notes: Service Type Codes"
          },
          "serviceTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB03, Notes: Service Types"
          },
          "insuranceTypeCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB04, Notes: Insurance Type Code"
          },
          "insuranceType": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB04, Notes: Insurance Type"
          },
          "planCoverage": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB05, Notes: Plan Coverage Description"
          },
          "timeQualifierCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB06, Notes: Time Period Qualifier Code"
          },
          "timeQualifier": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB06, Notes: Time Period Qualifier"
          },
          "benefitAmount": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB07, Notes: Monetary Amount"
          },
          "benefitPercent": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB08, Notes: Percentage as Decimal"
          },
          "quantityQualifierCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB09, Notes: Quantity Qualifier Code"
          },
          "quantityQualifier": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB09, Notes: Quantity Qualifier"
          },
          "benefitQuantity": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB10, Notes: Quantity"
          },
          "authOrCertIndicator": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB11, Notes: Yes/No Condition or Response Code"
          },
          "inPlanNetworkIndicatorCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB12, Notes: Yes/No Condition or Response Code"
          },
          "inPlanNetworkIndicator": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB12, Notes: Yes/No Condition or Response"
          },
          "headerLoopIdentifierCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: LS, Element: LS01, Notes: Loop Identifier Code"
          },
          "trailerLoopIdentifierCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: LE, Element: LE01, Notes: Loop Identifier Code"
          },
          "compositeMedicalProcedureIdentifier": {
            "$ref": "#/components/schemas/CompositeMedicalProcedureIdentifier"
          },
          "benefitsAdditionalInformation": {
            "$ref": "#/components/schemas/BenefitsAdditionalInformation"
          },
          "benefitsDateInformation": {
            "$ref": "#/components/schemas/BenefitsDateInformation"
          },
          "benefitsRelatedEntity": {
            "$ref": "#/components/schemas/BenefitsRelatedEntity"
          },
          "benefitsRelatedEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BenefitsRelatedEntity"
            },
            "description": "Loop: 2120C and 2120D, Segments: NM1, N3, N4, PER, PRV, Notes: All occurrence of SUBSCRIBER/DEPENDENT BENEFIT RELATED ENTITY"
          },
          "benefitsServiceDelivery": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BenefitsServiceDelivery"
            }
          },
          "additionalInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalInformation"
            }
          },
          "eligibilityAdditionalInformation": {
            "$ref": "#/components/schemas/EligibilityAdditionalInformation"
          },
          "eligibilityAdditionalInformationList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EligibilityAdditionalInformation"
            },
            "description": "Loop: 2115C and 2115D, Segments: III Notes: all occurrences"
          }
        }
      },
      "BenefitsRelatedEntity": {
        "type": "object",
        "description": "BenefitsRelatedEntity",
        "properties": {
          "entityIdentifier": {
            "type": "string",
            "description": "Loop: 2120C and 2120D, Segments: NM1, Element: NM101, Notes: Entity Identifier Code"
          },
          "entityType": {
            "type": "string",
            "description": "Loop: 2120C and 2120D, Segments: NM1, Element: NM102, Notes: Entity Type Qualifier"
          },
          "entityName": {
            "type": "string",
            "description": "Loop: 2120C and 2120D, Segments: NM1, Element: NM103, Notes: Benefit Related Entity Last or Organization Name"
          },
          "entityFirstname": {
            "type": "string",
            "description": "Loop: 2120C and 2120D, Segments: NM1, Element: NM104, Notes: Name First"
          },
          "entityMiddlename": {
            "type": "string",
            "description": "Loop: 2120C and 2120D, Segments: NM1, Element: NM105, Notes: Name Middle"
          },
          "entitySuffix": {
            "type": "string",
            "description": "Loop: 2120C and 2120D, Segments: NM1, Element: NM107, Notes: Name Suffix"
          },
          "entityIdentification": {
            "type": "string",
            "description": "Loop: 2120C and 2120D, Segments: NM1, Element: NM108, Notes: Identification Code Qualifier"
          },
          "entityIdentificationValue": {
            "type": "string",
            "description": "Loop: 2120C and 2120D, Segments: NM1, Element: NM109, Notes: Benefit Related Entity Identifier"
          },
          "entityRelationship": {
            "type": "string",
            "description": "Loop: 2120C and 2120D, Segments: NM1, Element: NM110, Notes: Entity Relationship Code"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "contactInformation": {
            "$ref": "#/components/schemas/ContactInformation"
          },
          "providerInformation": {
            "$ref": "#/components/schemas/ProviderInformation"
          }
        }
      },
      "BenefitsServiceDelivery": {
        "type": "object",
        "description": "BenefitsServiceDelivery",
        "properties": {
          "quantityQualifierCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: HSD, Element: HSD01"
          },
          "quantityQualifier": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: HSD, Element: HSD01, Notes: Description of the quantityQualifier Code"
          },
          "quantity": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: HSD, Element: HSD02"
          },
          "unitForMeasurementCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: HSD, Element: HSD03, Notes: Description of the qualifier Code"
          },
          "sampleSelectionModulus": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: HSD, Element: HSD04"
          },
          "timePeriodQualifierCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: HSD, Element: HSD05"
          },
          "timePeriodQualifier": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: HSD, Element: HSD05, Notes: Description of the timePeriodQualifier Code"
          },
          "numOfPeriods": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: HSD, Element: HSD06"
          },
          "deliveryOrCalendarPatternCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: HSD, Element: HSD07, Notes: Description of the deliveryOrCalendarPatternQualifier Code"
          },
          "deliveryPatternTimeCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: HSD, Element: HSD08"
          },
          "unitForMeasurementQualifierCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: HSD, Element: HSD03"
          },
          "unitForMeasurementQualifier": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: HSD, Element: HSD03, Notes: Description of the unitForMeasurementQualifier Code"
          },
          "deliveryOrCalendarPatternQualifierCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: HSD, Element: HSD07"
          },
          "deliveryOrCalendarPatternQualifier": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: HSD, Element: HSD07, Notes: Description of the deliveryOrCalendarPatternQualifier Code"
          },
          "deliveryPatternTimeQualifierCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: HSD, Element: HSD08"
          },
          "deliveryPatternTimeQualifier": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: HSD, Element: HSD08, Notes: Description of the deliveryPatternTimeQualifier Code"
          }
        }
      },
      "Billing": {
        "type": "object",
        "description": "Loop: 2000A",
        "properties": {
          "providerType": {
            "type": "string"
          },
          "npi": {
            "type": "string",
            "description": "NM109, Notes: National Provider Identifier"
          },
          "ssn": {
            "type": "string",
            "description": "REF02 when REF01=SY, Notes: The Social Security Number must be a string of nine numbers with no separators"
          },
          "employerId": {
            "type": "string",
            "description": "REF02 when REF01=EI, Notes: The Employer Identification Number must be a string of exactly nine numbers with no separators"
          },
          "commercialNumber": {
            "type": "string",
            "description": "REF02 when REF01=G2"
          },
          "locationNumber": {
            "type": "string",
            "description": "REF02 when REF01=LU"
          },
          "payerIdentificationNumber": {
            "type": "string",
            "description": "LOOP: 2010AC, Segment: REF, Element: REF02 when REF01=2U"
          },
          "employerIdentificationNumber": {
            "type": "string",
            "description": "LOOP: 2010AC, Segment: REF, Element: REF02 when REF01=EI"
          },
          "claimOfficeNumber": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: REF, Element: REF02 when REF01=FY"
          },
          "naic": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: REF, Element: REF02 when REF01=NF, Notes: National Association of Insurance Commissioners (NAIC) Code"
          },
          "stateLicenseNumber": {
            "type": "string",
            "description": "REF02 when REF01=0B"
          },
          "providerUpinNumber": {
            "type": "string",
            "description": "REF02 when REF01=1G, Notes: UPINs must be formatted as either X99999 or XXX999"
          },
          "taxonomyCode": {
            "type": "string",
            "description": "PRV03"
          },
          "firstName": {
            "type": "string",
            "description": "NM104"
          },
          "lastName": {
            "type": "string",
            "description": "NM103"
          },
          "middleName": {
            "type": "string",
            "description": "NM105"
          },
          "suffix": {
            "type": "string",
            "description": "NM107"
          },
          "organizationName": {
            "type": "string",
            "description": "NM103"
          },
          "address": {
            "$ref": "#/components/schemas/ClaimsAddress"
          },
          "contactInformation": {
            "$ref": "#/components/schemas/ClaimsContactInformation"
          }
        },
        "required": [
          "providerType"
        ]
      },
      "CertificationConditionCodeAppliesIndicator": {
        "type": "string",
        "description": "Loop: 2300, Segment: CRC, Element: CRC02 When CRC01=ZZ, Note: 'N' No, 'Y' Yes",
        "enum": [
          "N",
          "Y"
        ]
      },
      "CertificationTypeCode": {
        "type": "string",
        "description": "Loop: 2400, Segment: CR3, Element: CR301, Note: Allowed Values are: 'I' Initial, 'R' Renewal, 'S' Revised",
        "enum": [
          "I",
          "R",
          "S"
        ]
      },
      "ClaimAdjustment": {
        "type": "object",
        "description": "CR1",
        "properties": {
          "adjustmentGroupCode": {
            "$ref": "#/components/schemas/AdjustmentGroupCode"
          },
          "adjustmentDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimAdjustmentDetails"
            },
            "maxItems": 6,
            "minItems": 1,
            "description": "Loop: 2430, Segment: CAS"
          }
        },
        "required": [
          "adjustmentDetails",
          "adjustmentGroupCode"
        ]
      },
      "ClaimAdjustmentDetails": {
        "type": "object",
        "description": "CAS",
        "properties": {
          "adjustmentReasonCode": {
            "type": "string",
            "description": "Loop: 2430, Segment: CAS, Element: CAS02, CAS05, CAS08, CAS11, CAS14, CAS17"
          },
          "adjustmentAmount": {
            "type": "string",
            "description": "Loop: 2430, Segment: CAS, Element: CAS03, CAS06, CAS09, CAS12, CAS15, CAS18"
          },
          "adjustmentQuantity": {
            "type": "string",
            "description": "Loop: 2430, Segment: CAS, Element: CAS04, CAS07, CAS10, CAS13, CAS16, CAS19"
          }
        },
        "required": [
          "adjustmentAmount",
          "adjustmentReasonCode"
        ]
      },
      "ClaimContractInformation": {
        "type": "object",
        "description": "Loop 2300, Segment: CN1",
        "properties": {
          "contractTypeCode": {
            "$ref": "#/components/schemas/ClaimContractInformationContractTypeCode"
          },
          "contractAmount": {
            "type": "string",
            "description": "Loop: 2300, Segment: CN1, Element: CN102"
          },
          "contractPercentage": {
            "type": "string",
            "description": "Loop: 2300, Segment: CN1, Element: CN103"
          },
          "contractCode": {
            "type": "string",
            "description": "Loop: 2300, Segment: CN1, Element: CN104"
          },
          "termsDiscountPercentage": {
            "type": "string",
            "description": "Loop: 2300, Segment: CN1, Element: CN105"
          },
          "contractVersionIdentifier": {
            "type": "string",
            "description": "Loop: 2300, Segment: CN1, Element: CN106"
          }
        },
        "required": [
          "contractTypeCode"
        ]
      },
      "ClaimContractInformationContractTypeCode": {
        "type": "string",
        "description": "Loop: 2300,Segment: CN1, Element: CN101, Note: Allowed Values are: '01' Diagnosis Related Group (DRG), '02' Per Diem, '03' Variable Per Diem, '04' Flat, '05' Capitated, '06' Percent, '09' Other",
        "enum": [
          "01",
          "02",
          "03",
          "04",
          "05",
          "06",
          "09"
        ]
      },
      "ClaimDateInformation": {
        "type": "object",
        "description": "DTP",
        "properties": {
          "symptomDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          },
          "initialTreatmentDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          },
          "lastSeenDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          },
          "acuteManifestationDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          },
          "accidentDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          },
          "lastMenstrualPeriodDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          },
          "lastXRayDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          },
          "hearingAndVisionPrescriptionDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          },
          "disabilityBeginDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          },
          "disabilityEndDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          },
          "lastWorkedDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          },
          "authorizedReturnToWorkDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          },
          "admissionDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          },
          "dischargeDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          },
          "assumedAndRelinquishedCareBeginDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          },
          "assumedAndRelinquishedCareEndDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          },
          "repricerReceivedDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          },
          "firstContactDate": {
            "type": "string",
            "description": "Loop: 2300, Segment: DTP, Element: DTP03"
          }
        }
      },
      "ClaimFilingCode": {
        "type": "string",
        "description": "Loop 2000B, Segment: SBR, Element: SBR09, Note: Allowed Values are: '11' Other Non-Federal Programs, '12' Preferred Provider Organization (PPO), '13' Point of Service (POS), '14' Exclusive Provider Organization (EPO), '15' Indemnity Insurance, '16' Health Maintenance Organization (HMO) Medicare Risk, '17' Dental Maintenance Organization, 'AM' Automobile Medical, 'BL' Blue Cross/Blue Shield, 'CH' Champus, 'CI' Commercial Insurance Co., 'DS' Disability, 'FI' Federal Employees Program, 'HM' Health Maintenance Organization, 'LM' Liability Medical, 'MA' Medicare Part A,  'MB' Medicare Part B,  'MC' Medicaid, 'OF' Other Federal Program, 'TV' Title V, 'VA' Veterans Affairs Plan, 'WC' Workers' Compensation Health Claim, 'ZZ' Mutually Defined",
        "enum": [
          "11",
          "12",
          "13",
          "14",
          "15",
          "16",
          "17",
          "AM",
          "BL",
          "CH",
          "CI",
          "DS",
          "FI",
          "HM",
          "LM",
          "MA",
          "MB",
          "MC",
          "OF",
          "TV",
          "VA",
          "WC",
          "ZZ"
        ]
      },
      "ClaimFilingIndicatorCode": {
        "type": "string",
        "description": "Loop: 2320, Segment: SBR, Element: SBR09, Notes: Allowed Values are: '11' Other Non-Federal Programs, '12' Preferred Provider Organization (PPO), '13' Point of Service (POS), '14' Exclusive Provider Organization (EPO), '15' Indemnity Insurance, '16' Health Maintenance Organization (HMO) Medicare Risk, '17' Dental Maintenance Organization, 'AM' Automobile Medical, 'BL' Blue Cross/Blue Shield, 'CH' Champus, 'CI' Commercial Insurance Co., 'DS' Disability, 'FI' Federal Employees Program, 'HM' Health Maintenance Organization, 'LM' Liability Medical, 'MA' Medicare Part A, 'MB' Medicare Part B,'MC' Medicare Part C, 'OF' Other Federal Program, 'TV' Title V, 'VA' Veterans Affairs Plan, 'WC' Worker's Compensation Health Claim, 'ZZ' Mutually Defined",
        "enum": [
          "11",
          "12",
          "13",
          "14",
          "15",
          "16",
          "17",
          "AM",
          "BL",
          "CH",
          "CI",
          "DS",
          "FI",
          "HM",
          "LM",
          "MA",
          "MB",
          "MC",
          "OF",
          "TV",
          "VA",
          "WC",
          "ZZ"
        ]
      },
      "ClaimInformation": {
        "type": "object",
        "description": "Loop2300",
        "properties": {
          "claimFilingCode": {
            "$ref": "#/components/schemas/ClaimFilingCode"
          },
          "propertyCasualtyClaimNumber": {
            "type": "string",
            "description": "Loop 2010BA, Segment: REF, Element: REF02"
          },
          "deathDate": {
            "type": "string",
            "description": "Loop 2000B and 2000C, Segment: PAT, Element: PAT06 and PAT05=D8"
          },
          "patientWeight": {
            "type": "string",
            "description": "Loop 2000B and 2000C, Segment: PAT, Element: PAT08 and PAT07=01"
          },
          "pregnancyIndicator": {
            "$ref": "#/components/schemas/PregnancyIndicator"
          },
          "patientControlNumber": {
            "type": "string",
            "description": "Loop 2300, Segment: CLM, Element: CLM01"
          },
          "claimChargeAmount": {
            "type": "string",
            "description": "Loop 2300, Segment: CLM, Element: CLM02"
          },
          "placeOfServiceCode": {
            "type": "string",
            "description": "Loop 2300, Segment: CLM, Element: CLM05-01"
          },
          "claimFrequencyCode": {
            "type": "string",
            "description": "Loop 2300, Segment: CLM, Element: CLM05-03"
          },
          "signatureIndicator": {
            "$ref": "#/components/schemas/SignatureIndicator"
          },
          "planParticipationCode": {
            "$ref": "#/components/schemas/PlanParticipationCode"
          },
          "benefitsAssignmentCertificationIndicator": {
            "$ref": "#/components/schemas/ClaimInformationBenefitsAssignmentCertificationIndicator"
          },
          "releaseInformationCode": {
            "$ref": "#/components/schemas/ReleaseInformationCode"
          },
          "patientSignatureSourceCode": {
            "type": "boolean",
            "description": "Loop 2300, Segment: CLM, Element: CLM10, Note: Allowed Values are: 'P' Signature generated by provider because the patient was not physically present for services"
          },
          "relatedCausesCode": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimInformationRelatedCausesCodeItem"
            },
            "maxItems": 2,
            "minItems": 0,
            "description": "Loop 2300, Segment: CLM, Element: CLM11-01, CLM11-02, Note: Allowed Values are: 'AA' Auto Accident, 'EM' Employment, 'OA' Other Accident"
          },
          "autoAccidentStateCode": {
            "$ref": "#/components/schemas/AutoAccidentStateCode"
          },
          "autoAccidentCountryCode": {
            "type": "string",
            "description": "Loop 2300, Segment: CLM, Element: CLM11-05, Note: When CLM11-1 or CLM11-2 = AA and the accident occurred in a country other than US or Canada."
          },
          "specialProgramCode": {
            "$ref": "#/components/schemas/SpecialProgramCode"
          },
          "delayReasonCode": {
            "$ref": "#/components/schemas/DelayReasonCode"
          },
          "patientAmountPaid": {
            "type": "string",
            "description": "Loop 2300, Segment: AMT, Element: AMT02"
          },
          "fileInformation": {
            "type": "string",
            "description": "Loop 2300, Segment: K3, Element: K301"
          },
          "fileInformationList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 10,
            "minItems": 0,
            "description": "Loop 2300, Segment: K3, Element: K301"
          },
          "claimDateInformation": {
            "$ref": "#/components/schemas/ClaimDateInformation"
          },
          "claimContractInformation": {
            "$ref": "#/components/schemas/ClaimContractInformation"
          },
          "claimSupplementalInformation": {
            "$ref": "#/components/schemas/ClaimSupplementalInformation"
          },
          "claimNote": {
            "$ref": "#/components/schemas/ClaimNote"
          },
          "ambulanceTransportInformation": {
            "$ref": "#/components/schemas/AmbulanceTransportInformation"
          },
          "spinalManipulationServiceInformation": {
            "$ref": "#/components/schemas/SpinalManipulationServiceInformation"
          },
          "ambulanceCertification": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AmbulanceCertification"
            },
            "maxItems": 3,
            "minItems": 0,
            "description": "Loop 2300, Segment: CRC"
          },
          "patientConditionInformationVision": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatientConditionInformationVision"
            },
            "maxItems": 3,
            "minItems": 0,
            "description": "Loop 2300, Segment: CRC"
          },
          "homeboundIndicator": {
            "type": "boolean",
            "description": "Loop 2300, Segment: CRC"
          },
          "epsdtReferral": {
            "$ref": "#/components/schemas/EpsdtReferral"
          },
          "healthCareCodeInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimsHealthCareInformation"
            },
            "maxItems": 12,
            "minItems": 1,
            "description": "Loop 2300, Segment: HI"
          },
          "anesthesiaRelatedSurgicalProcedure": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 2,
            "minItems": 1,
            "description": "Loop 2300, Segment: HI"
          },
          "conditionInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConditionInformation"
            },
            "maxItems": 2,
            "minItems": 0,
            "description": "Loop 2300, Segment: HI"
          },
          "claimPricingRepricingInformation": {
            "$ref": "#/components/schemas/ClaimPricingRepricingInformation"
          },
          "serviceFacilityLocation": {
            "$ref": "#/components/schemas/ServiceFacilityLocation"
          },
          "ambulancePickUpLocation": {
            "$ref": "#/components/schemas/ClaimsAddress"
          },
          "ambulanceDropOffLocation": {
            "$ref": "#/components/schemas/ClaimsAddress"
          },
          "otherSubscriberInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OtherSubscriberInformation"
            },
            "maxItems": 10,
            "minItems": 0,
            "description": "Loop 2320"
          },
          "serviceLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceLine"
            },
            "maxItems": 50,
            "minItems": 1,
            "description": "Loop 2400"
          }
        },
        "required": [
          "benefitsAssignmentCertificationIndicator",
          "claimChargeAmount",
          "claimFilingCode",
          "claimFrequencyCode",
          "healthCareCodeInformation",
          "patientControlNumber",
          "placeOfServiceCode",
          "planParticipationCode",
          "releaseInformationCode",
          "serviceLines",
          "signatureIndicator"
        ]
      },
      "ClaimInformationBenefitsAssignmentCertificationIndicator": {
        "type": "string",
        "description": "Loop 2300, Segment: CLM, Element: CLM08, Note: Allowed Values are: 'N' No, 'W' Not Applicable - Use code 'W' when the patient refuses to assign benefits, 'Y' Yes",
        "enum": [
          "N",
          "W",
          "Y"
        ]
      },
      "ClaimInformationRelatedCausesCodeItem": {
        "type": "string",
        "description": "Loop 2300, Segment: CLM, Element: CLM11-01, CLM11-02, Note: Allowed Values are: 'AA' Auto Accident, 'EM' Employment, 'OA' Other Accident",
        "enum": [
          "AA",
          "EM",
          "OA"
        ]
      },
      "ClaimNote": {
        "type": "object",
        "description": "NTE",
        "properties": {
          "additionalInformation": {
            "type": "string",
            "description": "Loop 2300, Segment: NTE, Element: NTE02, Note: NTE01=ADD"
          },
          "certificationNarrative": {
            "type": "string",
            "description": "Loop 2300, Segment: NTE, Element: NTE02, Note: NTE01=CER"
          },
          "goalRehabOrDischargePlans": {
            "type": "string",
            "description": "Loop 2300, Segment: NTE, Element: NTE02, Note: NTE01=DCP"
          },
          "diagnosisDescription": {
            "type": "string",
            "description": "Loop 2300, Segment: NTE, Element: NTE02, Note: NTE01=DGN"
          },
          "thirdPartOrgNotes": {
            "type": "string",
            "description": "Loop 2300, Segment: NTE, Element: NTE02, Note: NTE01=TPO"
          }
        }
      },
      "ClaimPricingRepricingInformation": {
        "type": "object",
        "description": "HCP",
        "properties": {
          "pricingMethodologyCode": {
            "$ref": "#/components/schemas/PricingMethodologyCode"
          },
          "repricedAllowedAmount": {
            "type": "string",
            "description": "Loop: 2300, Segment: HCP, Element: HCP02"
          },
          "repricedSavingAmount": {
            "type": "string",
            "description": "Loop: 2300, Segment: HCP, Element: HCP03"
          },
          "repricingOrganizationIdentifier": {
            "type": "string",
            "description": "Loop: 2300, Segment: HCP, Element: HCP04"
          },
          "repricingPerDiemOrFlatRateAmoung": {
            "type": "string",
            "description": "Loop: 2300, Segment: HCP, Element: HCP05"
          },
          "repricedApprovedAmbulatoryPatientGroupCode": {
            "type": "string",
            "description": "Loop: 2300, Segment: HCP, Element: HCP06"
          },
          "repricedApprovedAmbulatoryPatientGroupAmount": {
            "type": "string",
            "description": "Loop: 2300, Segment: HCP, Element: HCP07"
          },
          "rejectReasonCode": {
            "$ref": "#/components/schemas/RejectReasonCode"
          },
          "policyComplianceCode": {
            "$ref": "#/components/schemas/PolicyComplianceCode"
          },
          "exceptionCode": {
            "$ref": "#/components/schemas/ClaimsExceptionCode"
          }
        },
        "required": [
          "pricingMethodologyCode",
          "repricedAllowedAmount"
        ]
      },
      "ClaimReference": {
        "type": "object",
        "description": "Collection of info specific to a given claim",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Claim correlation ID"
          },
          "submitterId": {
            "type": "string",
            "description": "Submitter ID for transaction"
          },
          "customerClaimNumber": {
            "type": "string",
            "description": "Claim number"
          },
          "patientControlNumber": {
            "type": "string",
            "description": "Control number for claim"
          },
          "timeOfResponse": {
            "type": "string",
            "description": "Time of response for claim"
          },
          "claimType": {
            "type": "string",
            "description": "Claim Type"
          },
          "payerID": {
            "type": "string",
            "description": "Payer ID"
          },
          "formatVersion": {
            "type": "string",
            "description": "Format version"
          },
          "rhclaimNumber": {
            "type": "string"
          }
        }
      },
      "ClaimSupplementalInformation": {
        "type": "object",
        "description": "PWK and REF",
        "properties": {
          "reportInformation": {
            "$ref": "#/components/schemas/ReportInformation"
          },
          "priorAuthorizationNumber": {
            "type": "string",
            "description": "Loop: 2300, Segment: REF, Element: REF02 and REF01=G1"
          },
          "referralNumber": {
            "type": "string",
            "description": "Loop: 2300, Segment: REF, Element: REF02 and REF01=9F"
          },
          "claimControlNumber": {
            "type": "string",
            "description": "Loop: 2300, Segment: REF, Element: REF02 and REF01=F8"
          },
          "cliaNumber": {
            "type": "string",
            "description": "Loop: 2300, Segment: REF, Element: REF02 and REF01=X4"
          },
          "repricedClaimNumber": {
            "type": "string",
            "description": "Loop: 2300, Segment: REF, Element: REF02 and REF01=9A"
          },
          "adjustedRepricedClaimNumber": {
            "type": "string",
            "description": "Loop: 2300, Segment: REF, Element: REF02 and REF01=9C"
          },
          "investigationalDeviceExemptionNumber": {
            "type": "string",
            "description": "Loop: 2300, Segment: REF, Element: REF02 and REF01=LX"
          },
          "claimNumber": {
            "type": "string",
            "description": "Loop: 2300, Segment: REF, Element: REF02 and REF01=D9"
          },
          "mammographyCertificationNumber": {
            "type": "string",
            "description": "Loop: 2300, Segment: REF, Element: REF02 and REF01=EW"
          },
          "medicalRecordNumber": {
            "type": "string",
            "description": "Loop: 2300, Segment: REF, Element: REF02 and REF01=EA"
          },
          "demoProjectIdentifier": {
            "type": "string",
            "description": "Loop: 2300, Segment: REF, Element: REF02 and REF01=P4"
          },
          "carePlanOversightNumber": {
            "type": "string",
            "description": "Loop: 2300, Segment: REF, Element: REF02 and REF01=1J"
          },
          "medicareCrossoverReferenceId": {
            "type": "string",
            "description": "Loop: 2300, Segment: REF, Element: REF02 and REF01=F5"
          },
          "serviceAuthorizationExceptionCode": {
            "$ref": "#/components/schemas/ServiceAuthorizationExceptionCode"
          }
        }
      },
      "ClaimsAddress": {
        "type": "object",
        "description": "N3 and N4",
        "properties": {
          "address1": {
            "type": "string",
            "description": "Segment: N3, Element: N301"
          },
          "address2": {
            "type": "string",
            "description": "Segment: N3, Element: N302"
          },
          "city": {
            "type": "string",
            "description": "Segment: N4, Element: N401"
          },
          "state": {
            "type": "string",
            "description": "Segment: N4, Element: N402"
          },
          "postalCode": {
            "type": "string",
            "description": "Segment: N4, Element: N403"
          },
          "countryCode": {
            "type": "string",
            "description": "Segment: N4, Element: N404"
          },
          "countrySubDivisionCode": {
            "type": "string",
            "description": "Segment: N4, Element: N407"
          }
        },
        "required": [
          "address1",
          "city"
        ]
      },
      "ClaimsContactInformation": {
        "type": "object",
        "description": "PER",
        "properties": {
          "name": {
            "type": "string",
            "description": "Segment: PER, Element: PER02 and PER01=IC"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Segment: PER, Element: PER04 (Provider, Submitter, Subscriber, Dependent) or PER06 (Provider, Submitter) or PER08 (Provider, Submitter), Note: Used when PER03=TE (Provider, Submitter, Subscriber, Dependent) or PER05=TE (Provider, Submitter) or PER07=TE (Provider, Submitter)"
          },
          "faxNumber": {
            "type": "string",
            "description": "Segment: PER, Element: PER04 or PER06 or PER08, Note: This is used in (Provider, Submitter) when PER03=FX or PER05=FX or PER07=FX"
          },
          "email": {
            "type": "string",
            "description": "Segment: PER, Element: PER04 or PER06 or PER08, Note: This used in (Provider, Submitter) when PER03=EM or PER05=EM or PER07=EM"
          },
          "phoneExtension": {
            "type": "string",
            "description": "Segment: PER, Element: PER06 (Provider, Submitter, Subscriber, Dependent) or PER08 (Provider, Submitter),Note: Used when PER05=EX (Provider, Submitter, Subscriber, Dependent) or PER07=EX (Provider, Submitter)"
          }
        },
        "required": [
          "name"
        ]
      },
      "ClaimsDiagnosisTypeCode": {
        "type": "string",
        "description": "Loop: 2440, Segment: HI, Element: HI01-01 or HI02-01 or HI03-01 or HI04-01 or HI05-01 or HI06-01 or HI07-01 or HI08-01 or HI09-01 or HI10-01 or HI11-01 or HI12-01, Note: Allowed Values are: 'BK' International Classification of Diseases Clinical Modification (ICD-9-CM) Principal Diagnosis, 'ABK' International Classification of Diseases Clinical Modification (ICD-10-CM) Principal Diagnosis, 'BF' International Classification of Diseases Clinical Modification (ICD-9-CM) Diagnosis, 'ABF' International Classification of Diseases Clinical Modification (ICD-10-CM) Diagnosis",
        "enum": [
          "BK",
          "ABK",
          "BF",
          "ABF"
        ]
      },
      "ClaimsError": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "The field related to the error"
          },
          "value": {
            "type": "string",
            "description": "Value for bad data error"
          },
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "description": {
            "type": "string",
            "description": "Description of error message."
          },
          "followupAction": {
            "type": "string",
            "description": "Follow up action to correct"
          },
          "location": {
            "type": "string",
            "description": "Location of error"
          }
        }
      },
      "ClaimsExceptionCode": {
        "type": "string",
        "description": "Loop: 2300, Segment: HCP, Element: HCP15, Note: Allowed Values are: '1' Non-Network Professional Provider in Network Hospital, '2' Emergency Care, '3' Services or Specialist not in Network, '4' Out-of-Service Area, '5' State Mandates, '6' Other",
        "enum": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6"
        ]
      },
      "ClaimsHealthCareInformation": {
        "type": "object",
        "description": "HI",
        "properties": {
          "diagnosisTypeCode": {
            "$ref": "#/components/schemas/ClaimsDiagnosisTypeCode"
          },
          "diagnosisCode": {
            "type": "string",
            "description": "Loop: 2440, Segment: HI, Element: HI01-02 or HI02-02 or HI03-02 or HI04-02 or HI05-02 or HI06-02 or HI07-02 or HI08-02 or HI09-02 or HI10-02 or HI11-02 or HI12-02"
          }
        },
        "required": [
          "diagnosisCode",
          "diagnosisTypeCode"
        ]
      },
      "ClaimsIndividualRelationshipCode": {
        "type": "string",
        "description": "Loop: 2320, Segment: SBR, Element: SBR02, Notes: Required when patient is the subscriber, Notes: Allowed Values are: '01' Spouse, '18' Self, '19' Child, '20' Employee, '21' Unknown, '39' Organ Donor, '40' Cadaver Donor, '53' Life Partner, 'G8' Other Relationship",
        "enum": [
          "01",
          "18",
          "19",
          "20",
          "21",
          "39",
          "40",
          "53",
          "G8"
        ]
      },
      "ClaimsPayer": {
        "type": "object",
        "properties": {
          "payerName": {
            "type": "string"
          },
          "payerID": {
            "type": "string"
          }
        }
      },
      "ClaimsRawX12SubmissionRequestContent": {
        "type": "object",
        "properties": {
          "x12": {
            "type": "string"
          }
        },
        "required": [
          "x12"
        ]
      },
      "ClaimsRawX12SubmissionResponseContent": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of claim"
          },
          "controlNumber": {
            "type": "string",
            "description": "Transaction Set Control Number"
          },
          "tradingPartnerServiceId": {
            "type": "string",
            "description": "Payer ID"
          },
          "claimReference": {
            "$ref": "#/components/schemas/ClaimReference"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimsError"
            },
            "description": "List of errors"
          },
          "httpStatusCode": {
            "$ref": "#/components/schemas/HttpStatusCode"
          },
          "meta": {
            "$ref": "#/components/schemas/ResponseMeta"
          },
          "editStatus": {
            "type": "string"
          },
          "editResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EditResponse"
            }
          },
          "payer": {
            "$ref": "#/components/schemas/ClaimsPayer"
          },
          "failure": {
            "$ref": "#/components/schemas/Failure"
          }
        }
      },
      "ClaimsSubmissionRequestContent": {
        "type": "object",
        "properties": {
          "controlNumber": {
            "type": "string",
            "description": "Header, Segment: ST02 (no loop), Notes: Transaction Set Control Number"
          },
          "tradingPartnerServiceId": {
            "type": "string",
            "description": "Loop: 2010BB Segment: NM1, Element: NM109, Notes: we send this as MN108 as PI = Payer Identification"
          },
          "submitter": {
            "$ref": "#/components/schemas/Submitter"
          },
          "receiver": {
            "$ref": "#/components/schemas/Receiver"
          },
          "subscriber": {
            "$ref": "#/components/schemas/Subscriber"
          },
          "dependent": {
            "$ref": "#/components/schemas/Dependent"
          },
          "providers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Supervising"
            },
            "maxItems": 2147483647,
            "minItems": 1,
            "description": "setting providers deprecated, please set all providers individually by it's type."
          },
          "claimInformation": {
            "$ref": "#/components/schemas/ClaimInformation"
          },
          "payToAddress": {
            "$ref": "#/components/schemas/ClaimsAddress"
          },
          "payToPlan": {
            "$ref": "#/components/schemas/PayToPlan"
          },
          "payerAddress": {
            "$ref": "#/components/schemas/ClaimsAddress"
          },
          "usageIndicator": {
            "type": "string",
            "description": "Interchange Usage Indicator ISA15; T-Test Data, P-Production Data"
          },
          "billing": {
            "$ref": "#/components/schemas/Billing"
          },
          "referring": {
            "$ref": "#/components/schemas/Referring"
          },
          "rendering": {
            "$ref": "#/components/schemas/Rendering"
          },
          "ordering": {
            "$ref": "#/components/schemas/Ordering"
          },
          "supervising": {
            "$ref": "#/components/schemas/Supervising"
          },
          "tradingPartnerName": {
            "type": "string",
            "description": "Loop 2010BB NM103"
          }
        },
        "required": [
          "billing",
          "claimInformation",
          "controlNumber",
          "receiver",
          "submitter",
          "subscriber"
        ]
      },
      "ClaimsSubmissionResponseContent": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of claim"
          },
          "controlNumber": {
            "type": "string",
            "description": "Transaction Set Control Number"
          },
          "tradingPartnerServiceId": {
            "type": "string",
            "description": "Payer ID"
          },
          "claimReference": {
            "$ref": "#/components/schemas/ClaimReference"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimsError"
            },
            "description": "List of errors"
          },
          "httpStatusCode": {
            "$ref": "#/components/schemas/HttpStatusCode"
          },
          "meta": {
            "$ref": "#/components/schemas/ResponseMeta"
          },
          "editStatus": {
            "type": "string"
          },
          "editResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EditResponse"
            }
          },
          "payer": {
            "$ref": "#/components/schemas/ClaimsPayer"
          },
          "failure": {
            "$ref": "#/components/schemas/Failure"
          }
        }
      },
      "CodeCategory": {
        "type": "string",
        "description": "Loop: 2300, Segment: CRC, Element: CRC01, Notes: Allowed Values are: 'E1' Spectacle Lenses, 'E2' Contact Lenses, 'E3' Spectacle Frames",
        "enum": [
          "E1",
          "E2",
          "E3"
        ]
      },
      "CompositeDiagnosisCodePointers": {
        "type": "object",
        "description": "SVC107",
        "properties": {
          "diagnosisCodePointers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 2147483647,
            "minItems": 1,
            "description": "Loop: 2400, Segment: SV1, Element: SV107-01, SV107-02, SV107-03, SV107-04"
          }
        },
        "required": [
          "diagnosisCodePointers"
        ]
      },
      "CompositeMedicalProcedureIdentifier": {
        "type": "object",
        "description": "CompositeMedicalProcedureIdentifier",
        "properties": {
          "productOrServiceIdQualifierCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB13-1, Notes: Product or Service ID Qualifier Code"
          },
          "productOrServiceIdQualifier": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB13-1, Notes: Product or Service ID Qualifier"
          },
          "procedureCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB13-2, Notes: Procedure Code"
          },
          "procedureModifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB13-3-6, Notes: ProcedureModifier"
          },
          "productOrServiceID": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB13-8, Notes: Product or Service ID"
          },
          "diagnosisCodePointer": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB14-1-4, Notes: DiagnosisCodePointer"
          }
        }
      },
      "ConditionIndicator": {
        "type": "string",
        "description": "Loop 2400, Segment: CRC, Element: CRC03, Note: Allowed Values are: '38' Certification signed by the physician is on file at the supplier's office, 'ZV' Replacement Item",
        "enum": [
          "38",
          "ZV"
        ]
      },
      "ConditionIndicatorCode": {
        "type": "string",
        "description": "Loop 2400, Segment: CRC, Element: CRC04, Note: Allowed Values are: '38' Certification signed by the physician is on file at the supplier's office, 'ZV' Replacement Item",
        "enum": [
          "38",
          "ZV"
        ]
      },
      "ConditionIndicatorDurableMedicalEquipment": {
        "type": "object",
        "description": "CRC",
        "properties": {
          "certificationConditionIndicator": {
            "$ref": "#/components/schemas/ConditionIndicatorDurableMedicalEquipmentCertificationConditionIndicator"
          },
          "conditionIndicator": {
            "$ref": "#/components/schemas/ConditionIndicator"
          },
          "conditionIndicatorCode": {
            "$ref": "#/components/schemas/ConditionIndicatorCode"
          }
        },
        "required": [
          "certificationConditionIndicator",
          "conditionIndicator"
        ]
      },
      "ConditionIndicatorDurableMedicalEquipmentCertificationConditionIndicator": {
        "type": "string",
        "description": "Loop 2400, Segment: CRC, Element: CRC02 and CRC01=09, Note: Allowed Values are: 'N' No, 'Y' Yes",
        "enum": [
          "Y",
          "N"
        ]
      },
      "ConditionInformation": {
        "type": "object",
        "description": "HI",
        "properties": {
          "conditionCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 12,
            "minItems": 1
          }
        },
        "required": [
          "conditionCodes"
        ]
      },
      "ConnectionType": {
        "type": "string",
        "enum": [
          "bucket",
          "remote-ftp",
          "stedi-ftp",
          "as2"
        ]
      },
      "ContactInformation": {
        "type": "object",
        "description": "ContactInformation",
        "properties": {
          "name": {
            "type": "string",
            "description": "Loop: 2100A, 2120C and 2120D, Segments: PER, Element: PER02, Notes: Name"
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contacts"
            },
            "description": "Loop: 2100A, 2120C and 2120D, Segments: PER, Element: PER03-8, Notes: Communication"
          }
        }
      },
      "ContactInformationOrderingProvider": {
        "type": "object",
        "description": "PER",
        "properties": {
          "name": {
            "type": "string",
            "description": "Segment: PER, Element: PER02 and PER01=IC"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Segment: PER, Element: PER04 (Provider, Submitter, Subscriber, Dependent) or PER06 (Provider, Submitter) or PER08 (Provider, Submitter), Note: Used when PER03=TE (Provider, Submitter, Subscriber, Dependent) or PER05=TE (Provider, Submitter) or PER07=TE (Provider, Submitter)"
          },
          "faxNumber": {
            "type": "string",
            "description": "Segment: PER, Element: PER04 or PER06 or PER08, Note: This is used in (Provider, Submitter) when PER03=FX or PER05=FX or PER07=FX"
          },
          "email": {
            "type": "string",
            "description": "Segment: PER, Element: PER04 or PER06 or PER08, Note: This used in (Provider, Submitter) when PER03=EM or PER05=EM or PER07=EM"
          },
          "phoneExtension": {
            "type": "string",
            "description": "Segment: PER, Element: PER06 or PER08, Note: PER05=EX or PER07=EX"
          }
        },
        "required": [
          "name"
        ]
      },
      "Contacts": {
        "type": "object",
        "description": "Contacts",
        "properties": {
          "communicationMode": {
            "type": "string",
            "description": "Loop: 2100A, Segments: PER, Element: PER03-8, Notes: Communication Number Qualifier"
          },
          "communicationNumber": {
            "type": "string",
            "description": "Loop: 2100A, Segments: PER, Element: PER03-8, Notes: Communication Number"
          }
        }
      },
      "ContractInformation": {
        "type": "object",
        "description": "CN1",
        "properties": {
          "contractTypeCode": {
            "$ref": "#/components/schemas/ContractInformationContractTypeCode"
          },
          "contractAmount": {
            "type": "string",
            "description": "Segment: CN1, Element: CN102"
          },
          "contractPercentage": {
            "type": "string",
            "description": "Segment: CN1, Element: CN103"
          },
          "contractCode": {
            "type": "string",
            "description": "Segment: CN1, Element: CN104"
          },
          "termsDiscountPercentage": {
            "type": "string",
            "description": "Segment: CN1, Element: CN105"
          },
          "contractVersionIdentifier": {
            "type": "string",
            "description": "Segment: CN1, Element: CN106"
          }
        },
        "required": [
          "contractTypeCode"
        ]
      },
      "ContractInformationContractTypeCode": {
        "type": "string",
        "description": "Segment: CN1, Element: CN101, Allowed Values are: '01' Diagnosis Related Group (DRG), '02' Per Diem, '03' Variable Per Diem, '04' Flat, '05' Capitated, '06' Percent, '09' Other",
        "enum": [
          "01",
          "02",
          "03",
          "04",
          "05",
          "06",
          "09"
        ]
      },
      "CopayStatusCode": {
        "type": "string",
        "description": "Loop 2400, Segment: SV1, Element: SV115",
        "enum": [
          "0"
        ]
      },
      "CoreX12UsageIndicator": {
        "type": "string",
        "description": "Set [ISA-15](https://www.stedi.com/edi/x12/segment/ISA#ISA-15) to a different value. If not set, the default value is `P (Production Data)`.",
        "enum": [
          "I",
          "T",
          "P"
        ]
      },
      "CreateOutboundFragmentRequestContent": {
        "type": "object",
        "properties": {
          "guideId": {
            "type": "string",
            "description": "The ID of the Stedi guide for the outbound transaction setting. The guide must be configured to use fragments. You can find this ID on the [Guides](https://www.stedi.com/app/guides) page in the Stedi app."
          },
          "fragment": {
            "description": "The fragment to stage for outbound delivery. Without a mapping, the fragment must be < 5MB and the shape must match the [Guide JSON](https://www.stedi.com/docs/operate/transform-json/guide-json) format for the specified guide. With a mapping, the fragment must be < 4MB and the shape must match the source schema of the specified mapping."
          },
          "mappingId": {
            "type": "string",
            "description": "Specify a mapping id to transform the fragment to Stedi's Guide JSON format."
          }
        },
        "required": [
          "fragment",
          "guideId"
        ]
      },
      "CreateOutboundFragmentResponseContent": {
        "type": "object",
        "properties": {
          "fragmentGroupId": {
            "type": "string",
            "description": "The fragment group ID where you created and added the fragment."
          },
          "createdAt": {
            "type": "string",
            "description": "The time Stedi created the fragment.",
            "format": "date-time"
          },
          "fragmentId": {
            "type": "string",
            "description": "A unique ID for the fragment Stedi created within the fragment group."
          }
        },
        "required": [
          "createdAt",
          "fragmentGroupId",
          "fragmentId"
        ]
      },
      "CreatePartnershipOutboundTransactionRequestContent": {
        "type": "object",
        "properties": {
          "transaction": {
            "description": "The data for an EDI transaction. If you are not using a mapping, this transaction data must be < 5MB and the shape should match the [Guide JSON](https://www.stedi.com/docs/operate/transform-json/guide-json) format for the specified outbound transaction setting. If you are using a mapping, this transaction data must be < 4MB and the shape must match the source schema for the specified mapping."
          },
          "filename": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "pattern": "^([a-zA-Z0-9.*'()!_-]+)$",
            "description": "Set a custom name for the generated EDI file. Stedi overwrites files with the same name, so we recommend making the filename unique by including a timestamp or other identifier. If you do not specify a filename, Stedi autogenerates a unique name using the same ID generated for the `fileExecutionId`."
          },
          "fragmentGroupIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 1,
            "minItems": 1,
            "description": "Specify the fragment groups to include when creating this transaction. You can only generate EDI with a fragment group once. After you include a fragment group in generation call, Stedi locks the fragment to prevent accidentally generating transactions with duplicate data."
          },
          "mappingId": {
            "type": "string",
            "description": "Specify a mapping ID to transform the transaction data to Guide JSON format. You can find the mapping ID on the [Mappings](https://www.stedi.com/app/mappings) page in the Stedi app."
          }
        },
        "required": [
          "transaction"
        ]
      },
      "CreatePartnershipOutboundTransactionResponseContent": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "This property is currently not supported. It is reserved for future use."
          },
          "fileExecutionId": {
            "type": "string",
            "description": "An ID for the process Stedi uses to generate the EDI file. This ID appears on the details page for the generated file in the Stedi app, and you can use it to trace the file's status and delivery. "
          }
        }
      },
      "DelayReasonCode": {
        "type": "string",
        "description": "Loop 2300, Segment: CLM, Element: CLM20, Note: Allowed Values are: '1' Proof of Eligibility Unknown or Unavailable, '2' Litigation, '3' Authorization Delays, '4' Delay in Certifying Provider, '5' Delay in Supplying Billing Forms, '6' Delay in Delivery of Custom-made Appliances, '7' Third Party Processing Delay, '8' Delay in Eligibility Determination,  '9' Original Claim Rejected or Denied Due to a Reason Unrelated to the Billing Limitation Rules, '10' Administration Delay in the Prior Approval Process, '11' Other, '15' Natural Disaster",
        "enum": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6",
          "7",
          "8",
          "9",
          "10",
          "11",
          "15"
        ]
      },
      "Dependent": {
        "type": "object",
        "description": "LOOP 2000C",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "Loop: 2010CA, Segment: NM1, Element: NM104"
          },
          "lastName": {
            "type": "string",
            "description": "Loop: 2010CA, Segment: NM1, Element: NM103"
          },
          "middleName": {
            "type": "string",
            "description": "Loop: 2010CA, Segment: NM1, Element: NM105"
          },
          "suffix": {
            "type": "string",
            "description": "Loop: 2010CA,  Segment: NM, Element: NM107"
          },
          "gender": {
            "$ref": "#/components/schemas/DependentGender"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Loop: 2010CA, Segment: DMG, Element: DMG02 when DMG01=D8"
          },
          "ssn": {
            "type": "string",
            "description": "Loop: 2010CA, Segment: REF, Element: REF02 when REF01=SY"
          },
          "memberId": {
            "type": "string",
            "description": "Loop: 2010CA, Segment: REF, Element: REF02 when REF01=1W"
          },
          "relationshipToSubscriberCode": {
            "$ref": "#/components/schemas/RelationshipToSubscriberCode"
          },
          "contactInformation": {
            "$ref": "#/components/schemas/ClaimsContactInformation"
          },
          "address": {
            "$ref": "#/components/schemas/ClaimsAddress"
          }
        },
        "required": [
          "dateOfBirth",
          "firstName",
          "gender",
          "lastName",
          "relationshipToSubscriberCode"
        ]
      },
      "DependentGender": {
        "type": "string",
        "description": "Loop: 2010CA, Segment: DMG, Element: DMG03, Note: Allowed Values are: 'M' Male, 'F' Female, 'U' Unknown",
        "enum": [
          "M",
          "F",
          "U"
        ]
      },
      "DestinationAttempt": {
        "type": "object",
        "properties": {
          "attemptId": {
            "type": "string"
          },
          "destinationId": {
            "type": "string"
          },
          "eventId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/DestinationAttemptStatus"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DestinationAttemptStatus": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "FAILURE",
          "PROCESSING"
        ]
      },
      "DetailedDestinationAttemptLog": {
        "type": "object",
        "properties": {
          "messageType": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          },
          "payload": {
            "type": "string"
          }
        }
      },
      "DiagnosisTypeCode": {
        "type": "string",
        "description": "Loop: 2100C and 2100D, Segment: HI, Element: HI01-1 , Notes: Diagnosis Type Code, Allowed descriptions are: 'BK' International Classification of Diseases Clinical Modification (ICD-9-CM) Principal Diagnosis, 'ABK' International Classification of Diseases Clinical Modification (ICD-10-CM) Principal Diagnosis, 'BF' International Classification of Diseases Clinical Modification (ICD-9-CM) Diagnosis, 'ABF' International Classification of Diseases Clinical Modification (ICD-10-CM) Diagnosis",
        "enum": [
          "BK",
          "ABK",
          "BF",
          "ABF"
        ]
      },
      "Direction": {
        "type": "string",
        "enum": [
          "INBOUND",
          "OUTBOUND",
          "UNKNOWN"
        ]
      },
      "DrugIdentification": {
        "type": "object",
        "description": "LOOP 2410",
        "properties": {
          "serviceIdQualifier": {
            "$ref": "#/components/schemas/DrugIdentificationServiceIdQualifier"
          },
          "nationalDrugCode": {
            "type": "string",
            "description": "Loop: 2410, Segment: LIN, Element: LIN03"
          },
          "nationalDrugUnitCount": {
            "type": "string",
            "description": "Loop: 2410, Segment: CTP, Element: CTP04"
          },
          "measurementUnitCode": {
            "$ref": "#/components/schemas/MeasurementUnitCode"
          },
          "linkSequenceNumber": {
            "type": "string",
            "description": "Loop: 2410, Segment: REF, Element: REF02 when REF01=VY"
          },
          "pharmacyPrescriptionNumber": {
            "type": "string",
            "description": "Loop: 2410, Segment: REF, Element: REF02 when REF01=XZ"
          }
        },
        "required": [
          "measurementUnitCode",
          "nationalDrugCode",
          "nationalDrugUnitCount",
          "serviceIdQualifier"
        ]
      },
      "DrugIdentificationServiceIdQualifier": {
        "type": "string",
        "description": "Loop: 2410, Segment: LIN, Element: LIN02, Note: Allowed Values are: 'EN' EAN/UCC - 13, 'EO' EAN/UCC - 8, 'HI' HIBC (Health Care Industry Bar Code) Supplier Labeling Standard Primary Data Message, 'N4' National Drug Code in 5-4-2 Format, 'ON' Customer Order Number, 'UK' GTIN 14-digit Data Structure, 'UP' UCC - 12",
        "enum": [
          "EN",
          "EO",
          "HI",
          "N4",
          "ON",
          "UK",
          "UP"
        ]
      },
      "DtpDate": {
        "type": "object",
        "description": "DtpDate",
        "properties": {
          "date": {
            "type": "string",
            "description": "DTP03 where DTP02=D8, single date"
          },
          "startDate": {
            "type": "string",
            "description": "DTP03 where DTP02=RD8 left side of date range"
          },
          "endDate": {
            "type": "string",
            "description": "DTP03 where DTP02=RD8 right side of date range"
          }
        }
      },
      "DurableMedicalEquipmentCertificateOfMedicalNecessity": {
        "type": "object",
        "description": "PWK",
        "properties": {
          "attachmentTransmissionCode": {
            "$ref": "#/components/schemas/DurableMedicalEquipmentCertificateOfMedicalNecessityAttachmentTransmissionCode"
          }
        },
        "required": [
          "attachmentTransmissionCode"
        ]
      },
      "DurableMedicalEquipmentCertificateOfMedicalNecessityAttachmentTransmissionCode": {
        "type": "string",
        "description": "Loop: 2400, Segment: PWK, Element: PWK02 when PWK01=CT, Note: Allowed Values are: 'AB' Previously Submitted to Payer, 'AD' Certification Included in this Claim, 'AF' Narrative Segment Included in this Claim, 'AG' No Documentation is Required, 'NS' Not Specified",
        "enum": [
          "AB",
          "AD",
          "AF",
          "AG",
          "NS"
        ]
      },
      "DurableMedicalEquipmentCertification": {
        "type": "object",
        "description": "CR3",
        "properties": {
          "certificationTypeCode": {
            "$ref": "#/components/schemas/CertificationTypeCode"
          },
          "durableMedicalEquipmentDurationInMonths": {
            "type": "string",
            "description": "Loop: 2400, Segment: CR3, Element: CR303 when CR302=MO"
          }
        },
        "required": [
          "certificationTypeCode",
          "durableMedicalEquipmentDurationInMonths"
        ]
      },
      "DurableMedicalEquipmentService": {
        "type": "object",
        "description": "SV5",
        "properties": {
          "days": {
            "type": "string",
            "description": "Loop: 2410, Segment: SV5, Element: SV503"
          },
          "rentalPrice": {
            "type": "string",
            "description": "Loop: 2410, Segment: SV5, Element: SV504"
          },
          "purchasePrice": {
            "type": "string",
            "description": "Loop: 2410, Segment: SV5, Element: SV505"
          },
          "frequencyCode": {
            "$ref": "#/components/schemas/FrequencyCode"
          }
        },
        "required": [
          "days",
          "frequencyCode",
          "purchasePrice",
          "rentalPrice"
        ]
      },
      "EditResponse": {
        "type": "object",
        "properties": {
          "qualifierCode": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          },
          "fieldIndex": {
            "type": "string"
          },
          "editName": {
            "type": "string"
          },
          "editActivity": {
            "type": "string"
          },
          "referenceID": {
            "type": "string"
          },
          "claimCorePath": {
            "type": "string"
          },
          "allowOverride": {
            "type": "string"
          },
          "element": {
            "type": "string"
          },
          "segment": {
            "type": "string"
          },
          "loop": {
            "type": "string"
          },
          "badData": {
            "type": "string"
          },
          "phaseID": {
            "type": "string"
          }
        }
      },
      "EligibilityAdditionalInformation": {
        "type": "object",
        "description": "EligibilityAdditionalInformation",
        "properties": {
          "codeListQualifierCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: III, Element: III01"
          },
          "industryCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: III, Element: III02"
          },
          "codeCategory": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: III, Element: III03"
          },
          "injuredBodyPartName": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: III, Element: III04"
          }
        }
      },
      "EligibilityCheckRequestContent": {
        "type": "object",
        "properties": {
          "submitterTransactionIdentifier": {
            "type": "string",
            "description": "MedicalEligibility\nBHT03"
          },
          "controlNumber": {
            "type": "string",
            "maxLength": 9,
            "minLength": 9,
            "description": "Segment: ISA, Element: ISA13, Notes: Required, Interchange Control Number - must be exactly 9 positive unsigned numeric characters."
          },
          "tradingPartnerServiceId": {
            "type": "string",
            "maxLength": 80,
            "minLength": 0,
            "description": "Loop: 2100A Segment: NM1, Element: NM109, Notes: we send this as MN108 as PI"
          },
          "tradingPartnerName": {
            "type": "string",
            "maxLength": 80,
            "minLength": 0,
            "description": "Loop: 2100A, Segment: NM1, Element: NM103, Notes: organizational name"
          },
          "provider": {
            "$ref": "#/components/schemas/Provider"
          },
          "portalUsername": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: REF, Element: REF02, Notes: User Identification REF01=JD"
          },
          "portalPassword": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: REF, Element: REF02, Notes: Personal Identification Number (PIN) REF01=4A"
          },
          "informationReceiverName": {
            "$ref": "#/components/schemas/InformationReceiverName"
          },
          "subscriber": {
            "$ref": "#/components/schemas/RequestSubscriber"
          },
          "dependents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestDependent"
            },
            "maxItems": 2147483647,
            "minItems": 1,
            "description": "Loop: 2000D, Notes: Dependent Detail"
          },
          "encounter": {
            "$ref": "#/components/schemas/Encounter"
          }
        },
        "required": [
          "controlNumber",
          "subscriber"
        ]
      },
      "EligibilityCheckResponseContent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/EligibilityMetaData"
          },
          "controlNumber": {
            "type": "string",
            "description": "Segment: ISA, Element: ISA13, Notes: Interchange Control Number original request"
          },
          "reassociationKey": {
            "type": "string",
            "description": "Segment: ISA, Element: ISA13, Notes: Interchange Control Number"
          },
          "tradingPartnerServiceId": {
            "type": "string",
            "description": "This is the payorId or Identification Code that was sent in the 270"
          },
          "provider": {
            "$ref": "#/components/schemas/ResponseProvider"
          },
          "subscriber": {
            "$ref": "#/components/schemas/ResponseMember"
          },
          "subscriberTraceNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriberTraceNumber"
            },
            "description": "Loop: 2100C and 2100D, Segment: TRN, Notes: Subscriber Trace Numbers"
          },
          "dependents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMember"
            },
            "description": "Loop: 2100D, Notes: Dependent Details"
          },
          "payer": {
            "$ref": "#/components/schemas/Payer"
          },
          "planInformation": {
            "$ref": "#/components/schemas/PlanInformation"
          },
          "planDateInformation": {
            "$ref": "#/components/schemas/PlanDateInformation"
          },
          "planStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanStatus"
            },
            "description": "Loop: 2110C and 2110D, Segments: EB, Notes: Subscriber/Dependent Eligibility Benefit Information - Deprecated please use benefitsInformation"
          },
          "benefitsInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BenefitsInformation"
            },
            "description": "Loop: 2110C and 2110D, Segments: NM1, PER, PRV, N3, N4, EB, H SD, MSG, LS, LE, REF, DTP, Notes: Subscriber/Dependent Eligibility Benefit Information"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          },
          "status": {
            "type": "string"
          },
          "transactionSetAcknowledgement": {
            "type": "string"
          },
          "implementationTransactionSetSyntaxError": {
            "type": "string"
          },
          "x12": {
            "type": "string"
          }
        }
      },
      "EligibilityMetaData": {
        "type": "object",
        "description": "Meta data about the response",
        "properties": {
          "senderId": {
            "type": "string",
            "description": "Sender id assigned to this request"
          },
          "submitterId": {
            "type": "string",
            "description": "Submitter id assigned to this request"
          },
          "billerId": {
            "type": "string",
            "description": "Billing id assigned to this request"
          },
          "applicationMode": {
            "type": "string",
            "description": "Used by Optum to identify where this request can be found for support"
          },
          "traceId": {
            "type": "string",
            "description": "Unique Id assigned to each request by Optum"
          },
          "outboundTraceId": {
            "type": "string",
            "description": "BHT03 Value for submitterTransactionIdentifier"
          }
        }
      },
      "EligibilityRawX12CheckRequestContent": {
        "type": "object",
        "properties": {
          "x12": {
            "type": "string"
          }
        },
        "required": [
          "x12"
        ]
      },
      "EligibilityRawX12CheckResponseContent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/EligibilityMetaData"
          },
          "controlNumber": {
            "type": "string",
            "description": "Segment: ISA, Element: ISA13, Notes: Interchange Control Number original request"
          },
          "reassociationKey": {
            "type": "string",
            "description": "Segment: ISA, Element: ISA13, Notes: Interchange Control Number"
          },
          "tradingPartnerServiceId": {
            "type": "string",
            "description": "This is the payorId or Identification Code that was sent in the 270"
          },
          "provider": {
            "$ref": "#/components/schemas/ResponseProvider"
          },
          "subscriber": {
            "$ref": "#/components/schemas/ResponseMember"
          },
          "subscriberTraceNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriberTraceNumber"
            },
            "description": "Loop: 2100C and 2100D, Segment: TRN, Notes: Subscriber Trace Numbers"
          },
          "dependents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMember"
            },
            "description": "Loop: 2100D, Notes: Dependent Details"
          },
          "payer": {
            "$ref": "#/components/schemas/Payer"
          },
          "planInformation": {
            "$ref": "#/components/schemas/PlanInformation"
          },
          "planDateInformation": {
            "$ref": "#/components/schemas/PlanDateInformation"
          },
          "planStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanStatus"
            },
            "description": "Loop: 2110C and 2110D, Segments: EB, Notes: Subscriber/Dependent Eligibility Benefit Information - Deprecated please use benefitsInformation"
          },
          "benefitsInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BenefitsInformation"
            },
            "description": "Loop: 2110C and 2110D, Segments: NM1, PER, PRV, N3, N4, EB, H SD, MSG, LS, LE, REF, DTP, Notes: Subscriber/Dependent Eligibility Benefit Information"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          },
          "status": {
            "type": "string"
          },
          "transactionSetAcknowledgement": {
            "type": "string"
          },
          "implementationTransactionSetSyntaxError": {
            "type": "string"
          },
          "x12": {
            "type": "string"
          }
        }
      },
      "EmergencyIndicator": {
        "type": "string",
        "description": "Loop 2400, Segment: SV1, Element: SV109",
        "enum": [
          "Y"
        ]
      },
      "Encounter": {
        "type": "object",
        "description": "Loop: 2110C and 2110D, Notes: Eligibility or Benefit Information",
        "properties": {
          "beginningDateOfService": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segment: DTP, Element: DTP03, Notes: DTP01=291 and DTP02=RD8, Date Expressed in Format YYYYMMDD."
          },
          "endDateOfService": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segment: DTP, Element: DTP03, Notes: DTP01=291 and DTP02=RD8, Date Expressed in Format YYYYMMDD."
          },
          "dateOfService": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segment: DTP, Element: DTP03, Notes: DTP01=291 and DTP02=D8, Date Expressed in Format YYYYMMDD."
          },
          "serviceTypeCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EncounterServiceTypeCodesItem"
            },
            "maxItems": 99,
            "minItems": 0,
            "description": "Loop: 2110C and 2110D, Segment: EQ, Element: EQ01, Notes: Service Type Codes, Allowed Values are: '1' Medical Care,'2' Surgical, '3' Consultation, '4' Diagnostic X-Ray, '5' Diagnostic Lab, '6' Radiation Therapy, '7' Anesthesia, '8' Surgical Assistance, '9' Other Medical, '10' Blood Charges, '11' Used Durable Medical Equipment, '12' Durable Medical Equipment Purchase, '13' Ambulatory Service Center Facility, '14' Renal Supplies in the Home, '15' Alternate Method Dialysis, '16' Chronic Renal Disease (CRD) Equipment, '17' Pre-Admission Testing, '18' Durable Medical Equipment Rental, '19' Pneumonia Vaccine, '20' Second Surgical Opinion, '21' Third Surgical Opinion, '22' Social Work, '23' Diagnostic Dental, '24' Periodontics, '25' Restorative, '26' Endodontics, '27' Maxillofacial Prosthetics, '28' Adjunctive Dental Services, '30' Health Benefit Plan Coverage, '32' Plan Waiting Period, '33' Chiropractic, '34' Chiropractic Office Visits, '35' Dental Care, '36' Dental Crowns, '37' Dental Accident, '38' Orthodontics, '39' Prosthodontics, '40' Oral Surgery, '41' Routine (Preventive) Dental, '42' Home Health Care, '43' Home Health Prescriptions, '44' Home Health Visits, '45' Hospice, '46' Respite Care, '47' Hospital, '48' Hospital - Inpatient, '49' Hospital - Room and Board, '50' Hospital - Outpatient, '51' Hospital - Emergency Accident, '52' Hospital - Emergency Medical, '53' Hospital - Ambulatory Surgical, '54' Long Term Care, '55' Major Medical, '56' Medically Related Transportation, '57' Air Transportation, '58' Cabulance, '59' Licensed Ambulance, '60' General Benefits, '61' In-vitro Fertilization, '62' MRI/CAT Scan, '63' Donor Procedures, '64' Acupuncture, '65' Newborn Care, '66' Pathology, '67' Smoking Cessation, '68' Well Baby Care, '69' Maternity, '70' Transplants, '71' Audiology Exam, '72' Inhalation Therapy, '73' Diagnostic Medical, '74' Private Duty Nursing, '75' Prosthetic Device, '76' Dialysis, '77' Otological Exam, '78' Chemotherapy, '79' Allergy Testing, '80' Immunizations, '81' Routine Physical, '82' Family Planning, '83' Infertility, '84' Abortion, '85' AIDS, '86' Emergency Services, '87' Cancer, '88' Pharmacy, '89' Free Standing Prescription Drug, '90' Mail Order Prescription Drug, '91' Brand Name Prescription Drug, '92' Generic Prescription Drug, '93' Podiatry, '94' Podiatry - Office Visits, '95' Podiatry - Nursing Home Visits, '96' Professional (Physician), '97' Anesthesiologist, '98' Professional (Physician) Visit - Office, '99' Professional (Physician) Visit - Inpatient, 'A0' Professional (Physician) Visit - Outpatient, 'A1' Professional (Physician) Visit - Nursing Home, 'A2' Professional (Physician) Visit - Skilled Nursing Facility, 'A3' Professional (Physician) Visit - Home, 'A4' Psychiatric, 'A5' Psychiatric - Room and Board, 'A6' Psychotherapy, 'A7' Psychiatric - Inpatient, 'A8' Psychiatric - Outpatient, 'A9' Rehabilitation, 'AA' Rehabilitation - Room and Board, 'AB' Rehabilitation - Inpatient, 'AC' Rehabilitation - Outpatient, 'AD' Occupational Therapy, 'AE' Physical Medicine, 'AF' Speech Therapy, 'AG' Skilled Nursing Care, 'AH' Skilled Nursing Care - Room and Board, 'AI' Substance Abuse, 'AJ' Alcoholism, 'AK' Drug Addiction, 'AL' Vision (Optometry), 'AM' Frames, 'AN' Routine Exam, 'AO' Lenses, 'AQ' Nonmedically Necessary Physical, 'AR' Experimental Drug Therapy, 'B1' Burn Care, 'B2' Brand Name Prescription Drug - Formulary, 'B3' Brand Name Prescription Drug - Non-Formulary, 'BA' Independent Medical Evaluation, 'BB' Partial Hospitalization (Psychiatric), 'BC' Day Care (Psychiatric), 'BD' Cognitive Therapy, 'BE' Massage Therapy, 'BF' Pulmonary Rehabilitation, 'BG' Cardiac Rehabilitation, 'BH' Pediatric, 'BI' Nursery, 'BJ' Skin, 'BK' Orthopedic, 'BL' Cardiac, 'BM' Lymphatic, 'BN' Gastrointestinal, 'BP' Endocrine, 'BQ' Neurology, 'BR' Eye, 'BS' Invasive Procedures, 'BT' Gynecological, 'BU' Obstetrical, 'BV' Obstetrical/Gynecological, 'BW' Mail Order Prescription Drug: Brand Name, 'BX' Mail Order Prescription Drug: Generic, 'BY' Physician Visit - Office: Sick, 'BZ' Physician Visit - Office: Well, 'C1' Coronary Care, 'CA' Private Duty Nursing - Inpatient, 'CB' Private Duty Nursing - Home, 'CC' Surgical Benefits - Professional (Physician), 'CD' Surgical Benefits - Facility, 'CE' Mental Health Provider - Inpatient, 'CF' Mental Health Provider - Outpatient, 'CG' Mental Health Facility - Inpatient, 'CH' Mental Health Facility - Outpatient, 'CI' Substance Abuse Facility - Inpatient, 'CJ' Substance Abuse Facility - Outpatient, 'CK' Screening X-ray, 'CL' Screening laboratory, 'CM' Mammogram, High Risk Patient, 'CN' Mammogram, Low Risk Patient, 'CO' Flu Vaccination, 'CP' Eyewear and Eyewear Accessories, 'CQ' Case Management, 'DG' Dermatology, 'DM' Durable Medical Equipment, 'DS' Diabetic Supplies, 'GF' Generic Prescription Drug - Formulary, 'GN' Generic Prescription Drug - Non-Formulary, 'GY' Allergy, 'IC' Intensive Care, 'MH' Mental Health, 'NI' Neonatal Intensive Care, 'ON' Oncology, 'PT' Physical Therapy, 'PU' Pulmonary, 'RN' Renal, 'RT' Residential Psychiatric Treatment, 'TC' Transitional Care, 'TN' Transitional Nursery Care, 'UC' Urgent Care"
          },
          "priorAuthorizationOrReferralNumber": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: REF, Element: REF02, Notes: Prior Authorization or Referral Number"
          },
          "referenceIdentificationQualifier": {
            "$ref": "#/components/schemas/EncounterReferenceIdentificationQualifier"
          },
          "industryCode": {
            "$ref": "#/components/schemas/IndustryCode"
          },
          "productOrServiceIDQualifier": {
            "$ref": "#/components/schemas/EncounterProductOrServiceIDQualifier"
          },
          "procedureCode": {
            "type": "string",
            "maxLength": 48,
            "minLength": 0,
            "description": "Loop: 2110C and 2110D, Segment: EQ, Element: EQ02-2, Notes: Composite Medical Procedure Identifier - Procedure Code"
          },
          "procedureModifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 4,
            "minItems": 0,
            "description": "Loop: 2110C and 2110D, Segment: EQ, Element: EQ02-3, Notes: Composite Medical Procedure Identifier - Procedure Modifier"
          },
          "diagnosisCodePointer": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 4,
            "minItems": 0,
            "description": "Loop: 2110C and 2110D, Segment: EQ, Element: EQ05, Notes: Composite Diagnosis Code Pointer"
          },
          "medicalProcedures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MedicalProcedure"
            },
            "maxItems": 98,
            "minItems": 0,
            "description": "Loop: 2110C and 2110D, Segment: EQ, Element: EQ02-1-3, Notes: Composite Medical Procedure Identifier"
          }
        }
      },
      "EncounterProductOrServiceIDQualifier": {
        "type": "string",
        "description": "Loop: 2110C and 2110D, Segment: EQ, Element: EQ02-1, Notes: Composite Medical Procedure Identifier - Product or Service ID Qualifier, Allowed Values are: 'AD' American Dental Association Codes, 'CJ' Current Procedural Terminology (CPT) Codes, 'HC' Health Care Financing Administration Common Procedural Coding System (HCPCS) Codes, 'ID' International Classification of Diseases, 9th Revision, Clinical Modification (ICD-9-CM) - Procedure, 'IV' Home Infusion EDI Coalition (HIEC) Product/Service Code, 'N4' National Drug Code in 5-4-2 Format, 'ZZ' Mutually Defined",
        "enum": [
          "AD",
          "CJ",
          "HC",
          "ID",
          "IV",
          "N4",
          "ZZ"
        ]
      },
      "EncounterReferenceIdentificationQualifier": {
        "type": "string",
        "description": "Loop: 2110C and 2110D, Segment: REF, Element: REF01, Notes: Prior Authorization or Referral Number, Allowed Values are: '9F' Referral Number, 'G1' Prior Authorization Number",
        "enum": [
          "9F",
          "G1"
        ]
      },
      "EncounterServiceTypeCodesItem": {
        "type": "string",
        "enum": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6",
          "7",
          "8",
          "9",
          "10",
          "11",
          "12",
          "13",
          "14",
          "15",
          "16",
          "17",
          "18",
          "19",
          "20",
          "21",
          "22",
          "23",
          "24",
          "25",
          "26",
          "27",
          "28",
          "30",
          "32",
          "33",
          "34",
          "35",
          "36",
          "37",
          "38",
          "39",
          "40",
          "41",
          "42",
          "43",
          "44",
          "45",
          "46",
          "47",
          "48",
          "49",
          "50",
          "51",
          "52",
          "53",
          "54",
          "55",
          "56",
          "57",
          "58",
          "59",
          "60",
          "61",
          "62",
          "63",
          "64",
          "65",
          "66",
          "67",
          "68",
          "69",
          "70",
          "71",
          "72",
          "73",
          "74",
          "75",
          "76",
          "77",
          "78",
          "79",
          "80",
          "81",
          "82",
          "83",
          "84",
          "85",
          "86",
          "87",
          "88",
          "89",
          "90",
          "91",
          "92",
          "93",
          "94",
          "95",
          "96",
          "97",
          "98",
          "99",
          "A0",
          "A1",
          "A2",
          "A3",
          "A4",
          "A5",
          "A6",
          "A7",
          "A8",
          "A9",
          "AA",
          "AB",
          "AC",
          "AD",
          "AE",
          "AF",
          "AG",
          "AH",
          "AI",
          "AJ",
          "AK",
          "AL",
          "AM",
          "AN",
          "AO",
          "AQ",
          "AR",
          "B1",
          "B2",
          "B3",
          "BA",
          "BB",
          "BC",
          "BD",
          "BE",
          "BF",
          "BG",
          "BH",
          "BI",
          "BJ",
          "BK",
          "BL",
          "BM",
          "BN",
          "BP",
          "BQ",
          "BR",
          "BS",
          "BT",
          "BU",
          "BV",
          "BW",
          "BX",
          "BY",
          "BZ",
          "C1",
          "CA",
          "CB",
          "CC",
          "CD",
          "CE",
          "CF",
          "CG",
          "CH",
          "CI",
          "CJ",
          "CK",
          "CL",
          "CM",
          "CN",
          "CO",
          "CP",
          "CQ",
          "DG",
          "DM",
          "DS",
          "GF",
          "GN",
          "GY",
          "IC",
          "MH",
          "NI",
          "ON",
          "PT",
          "PU",
          "RN",
          "RT",
          "TC",
          "TN",
          "UC"
        ]
      },
      "EpsdtIndicator": {
        "type": "string",
        "description": "Loop 2400, Segment: SV1, Element: SV111",
        "enum": [
          "Y"
        ]
      },
      "EpsdtReferral": {
        "type": "object",
        "description": "CRC",
        "properties": {
          "certificationConditionCodeAppliesIndicator": {
            "$ref": "#/components/schemas/CertificationConditionCodeAppliesIndicator"
          },
          "conditionCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EpsdtReferralConditionCodesItem"
            },
            "maxItems": 3,
            "minItems": 1,
            "description": "Loop: 2300, Segment: CRC, Elements: CRC03, CRC04, CRC05 Note: Allowed Values are: 'AV' Available- Not Used, 'NU' Not Used, 'S2' Under Treatment, 'ST' New Services Requested"
          }
        },
        "required": [
          "certificationConditionCodeAppliesIndicator",
          "conditionCodes"
        ]
      },
      "EpsdtReferralConditionCodesItem": {
        "type": "string",
        "enum": [
          "AV",
          "NU",
          "S2",
          "ST"
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "followupAction": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "possibleResolutions": {
            "type": "string"
          }
        }
      },
      "ExceptionCause": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "stack": {
            "type": "string"
          }
        }
      },
      "ExecutionFaultCode": {
        "type": "string",
        "enum": [
          "DELIVERY_FAILURE",
          "FAILED_TO_EXTRACT_BUSINESS_IDENTIFIERS",
          "FAILED_TO_FIND_GUIDE",
          "FAILED_TO_FIND_LOCAL_PROFILE",
          "FAILED_TO_FIND_PARTNER_PROFILE",
          "FAILED_TO_FIND_PARTNERSHIP",
          "FAILED_TO_FIND_PROFILES",
          "FAILED_TO_FIND_RECEIVER_PROFILE",
          "FAILED_TO_FIND_SENDER_PROFILE",
          "FAILED_TO_FIND_CONNECTION",
          "FAILED_TO_GENERATE_CONTROL_NUMBERS",
          "FAILED_TO_PARSE",
          "FAILED_TO_PARSE_METADATA",
          "FAILED_TO_TRANSLATE",
          "FAILED_TO_ACK",
          "FILE_NOT_FOUND",
          "INVALID_EVENT",
          "INVALID_CONFIGURATION",
          "MISMATCHED_PARTNERSHIP_CONNECTION",
          "MISSING_FUNCTIONAL_GROUP_CONTROL_NUMBER",
          "MISSING_FUNCTIONAL_GROUP_RELEASE",
          "MISSING_INTERCHANGE_CONTROL_NUMBER",
          "MISSING_TRANSACTION_SET_CONTROL_NUMBER",
          "MISSING_RECEIVER_ID",
          "MISSING_RECEIVER_QUALIFIER",
          "MISSING_SENDER_ID",
          "MISSING_SENDER_QUALIFIER",
          "MULTIPLE_MATCHING_GUIDES",
          "MULTIPLE_MATCHING_TRANSACTION_SETTINGS",
          "MULTIPLE_PARTNERSHIPS",
          "NO_TRANSLATION_OUTPUT",
          "NO_TRANSACTION_SETS",
          "NOT_SUPPORTED",
          "NO_FUNCTIONAL_GROUPS",
          "NO_USAGE_INDICATOR_CODE",
          "PREVIOUSLY_RETRIED",
          "TRANSLATION_ERROR",
          "UNKNOWN_ERROR"
        ]
      },
      "ExecutionSource": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "ExecutionStatus": {
        "type": "string",
        "enum": [
          "COMPLETED",
          "PARTIALLY_COMPLETED",
          "FAILED",
          "IGNORED",
          "IN_PROGRESS",
          "RETRYING",
          "RETRIED",
          "STARTED"
        ]
      },
      "ExecutionSummary": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "executionId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ExecutionStatus"
          },
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "transactionCount": {
            "type": "number"
          },
          "faultCount": {
            "type": "number"
          },
          "faultCode": {
            "$ref": "#/components/schemas/ExecutionFaultCode"
          },
          "faultMessage": {
            "type": "string"
          },
          "retryable": {
            "type": "boolean"
          },
          "parentExecutionId": {
            "type": "string"
          },
          "childExecutionId": {
            "type": "string"
          },
          "partnershipId": {
            "type": "string",
            "maxLength": 81,
            "minLength": 1,
            "pattern": "^([a-zA-Z0-9_-]+)$",
            "description": "Identifier chosen by the user to uniquely identify a partnership."
          },
          "connectionType": {
            "$ref": "#/components/schemas/ConnectionType"
          },
          "connectionId": {
            "type": "string",
            "pattern": "^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$",
            "description": "Autogenerated identifier for a connection"
          },
          "source": {
            "$ref": "#/components/schemas/ExecutionSource"
          }
        },
        "required": [
          "createdAt",
          "direction",
          "executionId",
          "status",
          "updatedAt"
        ]
      },
      "Failure": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "FamilyPlanningIndicator": {
        "type": "string",
        "description": "Loop 2400, Segment: SV1, Element: SV112",
        "enum": [
          "Y"
        ]
      },
      "FormIdentification": {
        "type": "object",
        "description": "LQ and FRM",
        "properties": {
          "formTypeCode": {
            "$ref": "#/components/schemas/FormTypeCode"
          },
          "formIdentifier": {
            "type": "string",
            "description": "Loop: 2440, Segment: LQ, Element: LQ02"
          },
          "supportingDocumentation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupportingDocumentation"
            },
            "maxItems": 99,
            "minItems": 0,
            "description": "Loop: 2440, Segment: FRM"
          }
        },
        "required": [
          "formIdentifier",
          "formTypeCode"
        ]
      },
      "FormTypeCode": {
        "type": "string",
        "description": "Loop: 2440, Segment: LQ, Element: LQ01, Note: Allowed Values are:'AS' Form Type Code, 'UT' Centers for Medicare and Medicaid Services (CMS) Durable Medical Equipment Regional Carrier (DMERC) Certificate of Medical Necessity (CMN) Forms",
        "enum": [
          "AS",
          "UT"
        ]
      },
      "FrequencyCode": {
        "type": "string",
        "description": "Loop: 2410, Segment: SV5, Element: SV506, Note: Allowed Values are: '1' weekly, '4' monthly, '6' daily",
        "enum": [
          "1",
          "4",
          "6"
        ]
      },
      "GatewayTimeoutExceptionResponseContent": {
        "type": "object",
        "description": "The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.",
        "properties": {
          "message": {
            "type": "string",
            "description": "Human readable exception message."
          },
          "code": {
            "type": "string",
            "description": "Classification of the exception type."
          }
        },
        "required": [
          "message"
        ]
      },
      "GenerateEdiRequestContent": {
        "type": "object",
        "properties": {
          "transactionGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionGroup"
            },
            "minItems": 1,
            "description": "Contains one or more EDI functional groups, each containing the data for one or more EDI transactions. You can override the Application IDs (GS-02 and GS-03) for each group individually. The outbound transaction setting for each group must be configured to use the same connection. If you need to send transactions to different connections, you must call the endpoint multiple times."
          },
          "filename": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "pattern": "^([a-zA-Z0-9.*'()!_-]+)$",
            "description": "Set a custom name for the generated EDI file. Stedi overwrites files with the same name, so we recommend making the filename unique by including a timestamp or other identifier. If you do not specify a filename, Stedi autogenerates a unique name using an ID."
          },
          "overrides": {
            "$ref": "#/components/schemas/InterchangeOverrides"
          },
          "interchangeUsageIndicatorOverride": {
            "$ref": "#/components/schemas/CoreX12UsageIndicator"
          },
          "interchangeAuthorization": {
            "$ref": "#/components/schemas/X12InterchangeAuthorization"
          }
        },
        "required": [
          "transactionGroups"
        ]
      },
      "GenerateEdiResponseContent": {
        "type": "object",
        "properties": {
          "edi": {
            "type": "string",
            "description": "The EDI Stedi generated from the JSON transaction data."
          },
          "artifactId": {
            "type": "string",
            "description": "An ID for the generated EDI file."
          },
          "fileExecutionId": {
            "type": "string",
            "description": "A ID for the process Stedi uses to generate the EDI file. This ID appears on the details page for this file execution in the Stedi app. Internally, Stedi uses this ID to place the file in Stedi's outbound queue."
          }
        },
        "required": [
          "artifactId",
          "fileExecutionId"
        ]
      },
      "GetDestinationAttemptDetailsResponseContent": {
        "type": "object",
        "properties": {
          "attemptId": {
            "type": "string"
          },
          "destinationId": {
            "type": "string"
          },
          "eventId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/DestinationAttemptStatus"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DetailedDestinationAttemptLog"
            }
          }
        }
      },
      "GetDestinationAttemptsResponseContent": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DestinationAttempt"
            },
            "description": "The related destinations attempts for the event."
          }
        }
      },
      "GetExecutionInputDocumentResponseContent": {
        "type": "object",
        "properties": {
          "documentDownloadUrl": {
            "type": "string",
            "description": "A URL to download the document. This URL is available for 60 minutes."
          }
        }
      },
      "GetExecutionInputDocumentUrlResponseContent": {
        "type": "object",
        "properties": {
          "documentDownloadUrl": {
            "type": "string",
            "description": "A URL to download the document. This URL is available for 60 minutes."
          }
        }
      },
      "GetExecutionMetadataDocumentResponseContent": {
        "type": "object",
        "properties": {
          "documentDownloadUrl": {
            "type": "string",
            "description": "A URL to download the document. This URL is available for 60 minutes."
          }
        }
      },
      "GetExecutionMetadataDocumentUrlResponseContent": {
        "type": "object",
        "properties": {
          "documentDownloadUrl": {
            "type": "string",
            "description": "A URL to download the document. This URL is available for 60 minutes."
          }
        }
      },
      "GetExecutionOutputDocumentResponseContent": {
        "type": "object",
        "properties": {
          "documentDownloadUrl": {
            "type": "string",
            "description": "A URL to download the document. This URL is available for 60 minutes."
          }
        }
      },
      "GetExecutionOutputDocumentUrlResponseContent": {
        "type": "object",
        "properties": {
          "documentDownloadUrl": {
            "type": "string",
            "description": "A URL to download the document. This URL is available for 60 minutes."
          }
        }
      },
      "GetExecutionResponseContent": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "executionId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ExecutionStatus"
          },
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "transactionCount": {
            "type": "number"
          },
          "faultCount": {
            "type": "number"
          },
          "faultCode": {
            "$ref": "#/components/schemas/ExecutionFaultCode"
          },
          "faultMessage": {
            "type": "string"
          },
          "retryable": {
            "type": "boolean"
          },
          "parentExecutionId": {
            "type": "string"
          },
          "childExecutionId": {
            "type": "string"
          },
          "partnershipId": {
            "type": "string",
            "maxLength": 81,
            "minLength": 1,
            "pattern": "^([a-zA-Z0-9_-]+)$",
            "description": "Identifier chosen by the user to uniquely identify a partnership."
          },
          "connectionType": {
            "$ref": "#/components/schemas/ConnectionType"
          },
          "connectionId": {
            "type": "string",
            "pattern": "^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$",
            "description": "Autogenerated identifier for a connection"
          },
          "source": {
            "$ref": "#/components/schemas/ExecutionSource"
          }
        },
        "required": [
          "createdAt",
          "direction",
          "executionId",
          "status",
          "updatedAt"
        ]
      },
      "GetTransactionFragmentOutputDocumentResponseContent": {
        "type": "object",
        "properties": {
          "documentDownloadUrl": {
            "type": "string",
            "description": "A URL to download the document. This URL is available for 60 minutes."
          }
        }
      },
      "GetTransactionFragmentOutputDocumentUrlResponseContent": {
        "type": "object",
        "properties": {
          "documentDownloadUrl": {
            "type": "string",
            "description": "A URL to download the document. This URL is available for 60 minutes."
          }
        }
      },
      "GetTransactionFragmentResponseContent": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app."
          },
          "fileExecutionId": {
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "processedAt": {
            "type": "string",
            "format": "date-time"
          },
          "fragmentIndex": {
            "type": "number"
          },
          "fragments": {
            "$ref": "#/components/schemas/TransactionFragmentsSummary"
          },
          "transactionUrl": {
            "type": "string"
          },
          "artifacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Artifact"
            }
          },
          "partnership": {
            "$ref": "#/components/schemas/Partnership"
          },
          "x12": {
            "$ref": "#/components/schemas/X12TransactionSummary"
          }
        },
        "required": [
          "artifacts",
          "direction",
          "fileExecutionId",
          "fragmentIndex",
          "fragments",
          "mode",
          "partnership",
          "processedAt",
          "transactionId",
          "transactionUrl"
        ]
      },
      "GetTransactionInputDocumentResponseContent": {
        "type": "object",
        "properties": {
          "documentDownloadUrl": {
            "type": "string",
            "description": "A URL to download the document. This URL is available for 60 minutes."
          }
        }
      },
      "GetTransactionInputDocumentUrlResponseContent": {
        "type": "object",
        "properties": {
          "documentDownloadUrl": {
            "type": "string",
            "description": "A URL to download the document. This URL is available for 60 minutes."
          }
        }
      },
      "GetTransactionOutputDocumentResponseContent": {
        "type": "object",
        "properties": {
          "documentDownloadUrl": {
            "type": "string",
            "description": "A URL to download the document. This URL is available for 60 minutes."
          }
        }
      },
      "GetTransactionOutputDocumentUrlResponseContent": {
        "type": "object",
        "properties": {
          "documentDownloadUrl": {
            "type": "string",
            "description": "A URL to download the document. This URL is available for 60 minutes."
          }
        }
      },
      "GetTransactionResponseContent": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app."
          },
          "fileExecutionId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "processedAt": {
            "type": "string",
            "format": "date-time"
          },
          "artifacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Artifact"
            }
          },
          "partnership": {
            "$ref": "#/components/schemas/Partnership"
          },
          "x12": {
            "$ref": "#/components/schemas/X12TransactionSummary"
          },
          "fragments": {
            "$ref": "#/components/schemas/TransactionFragmentsSummary"
          },
          "translationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TranslationError"
            }
          }
        },
        "required": [
          "artifacts",
          "direction",
          "fileExecutionId",
          "mode",
          "partnership",
          "processedAt",
          "status",
          "transactionId"
        ]
      },
      "HealthCareDiagnosisCode": {
        "type": "object",
        "description": "HealthCareDiagnosisCode",
        "properties": {
          "diagnosisTypeCode": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segment: HI, Element: HI01-1, HI02-1, HI03-1, HI04-1, HI05-1, HI06-1, HI01-7, HI08-1"
          },
          "diagnosisCode": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segment: HI, Element: HI01-2, HI02-2, HI03-2, HI04-2, HI05-2, HI06-2, HI01-2, HI08-2"
          }
        }
      },
      "HealthCareInformation": {
        "type": "object",
        "description": "Loop: 2100C and 2100D, Segment: HI, Element: HI01-1 HI01-2, Notes: Health Care Diagnosis",
        "properties": {
          "diagnosisTypeCode": {
            "$ref": "#/components/schemas/DiagnosisTypeCode"
          },
          "diagnosisCode": {
            "type": "string",
            "maxLength": 30,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9]+$",
            "description": "Loop: 2100C and 2100D, Segment: HI, Element: HI01-2, Notes: Diagnosis Code"
          }
        }
      },
      "HttpStatusCode": {
        "type": "string",
        "enum": [
          "100 CONTINUE",
          "101 SWITCHING_PROTOCOLS",
          "102 PROCESSING",
          "103 CHECKPOINT",
          "200 OK",
          "201 CREATED",
          "202 ACCEPTED",
          "203 NON_AUTHORITATIVE_INFORMATION",
          "204 NO_CONTENT",
          "205 RESET_CONTENT",
          "206 PARTIAL_CONTENT",
          "207 MULTI_STATUS",
          "208 ALREADY_REPORTED",
          "226 IM_USED",
          "300 MULTIPLE_CHOICES",
          "301 MOVED_PERMANENTLY",
          "302 FOUND",
          "302 MOVED_TEMPORARILY",
          "303 SEE_OTHER",
          "304 NOT_MODIFIED",
          "305 USE_PROXY",
          "307 TEMPORARY_REDIRECT",
          "308 PERMANENT_REDIRECT",
          "400 BAD_REQUEST",
          "401 UNAUTHORIZED",
          "402 PAYMENT_REQUIRED",
          "403 FORBIDDEN",
          "404 NOT_FOUND",
          "405 METHOD_NOT_ALLOWED",
          "406 NOT_ACCEPTABLE",
          "407 PROXY_AUTHENTICATION_REQUIRED",
          "408 REQUEST_TIMEOUT",
          "409 CONFLICT",
          "410 GONE",
          "411 LENGTH_REQUIRED",
          "412 PRECONDITION_FAILED",
          "413 PAYLOAD_TOO_LARGE",
          "413 REQUEST_ENTITY_TOO_LARGE",
          "414 URI_TOO_LONG",
          "414 REQUEST_URI_TOO_LONG",
          "415 UNSUPPORTED_MEDIA_TYPE",
          "416 REQUESTED_RANGE_NOT_SATISFIABLE",
          "417 EXPECTATION_FAILED",
          "418 I_AM_A_TEAPOT",
          "419 INSUFFICIENT_SPACE_ON_RESOURCE",
          "420 METHOD_FAILURE",
          "421 DESTINATION_LOCKED",
          "422 UNPROCESSABLE_ENTITY",
          "423 LOCKED",
          "424 FAILED_DEPENDENCY",
          "425 TOO_EARLY",
          "426 UPGRADE_REQUIRED",
          "428 PRECONDITION_REQUIRED",
          "429 TOO_MANY_REQUESTS",
          "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
          "451 UNAVAILABLE_FOR_LEGAL_REASONS",
          "500 INTERNAL_SERVER_ERROR",
          "501 NOT_IMPLEMENTED",
          "502 BAD_GATEWAY",
          "503 SERVICE_UNAVAILABLE",
          "504 GATEWAY_TIMEOUT",
          "505 HTTP_VERSION_NOT_SUPPORTED",
          "506 VARIANT_ALSO_NEGOTIATES",
          "507 INSUFFICIENT_STORAGE",
          "508 LOOP_DETECTED",
          "509 BANDWIDTH_LIMIT_EXCEEDED",
          "510 NOT_EXTENDED",
          "511 NETWORK_AUTHENTICATION_REQUIRED"
        ]
      },
      "Index": {
        "type": "object",
        "properties": {
          "line": {
            "type": "number"
          },
          "column": {
            "type": "number"
          }
        },
        "required": [
          "column",
          "line"
        ]
      },
      "IndividualRelationshipCode": {
        "type": "string",
        "description": "Loop: 2100D Segment: INS, Element: INS02, Notes: Allowed Values are: '01' - Spouse, '19' - Child, '34' Other Adult",
        "enum": [
          "01",
          "19",
          "34"
        ]
      },
      "IndustryCode": {
        "type": "string",
        "description": "Loop: 2110C and 2110D, Segment: III, Element: III02, Notes: III01=ZZ Industry Code, Allowed Values are: '01' Pharmacy, '02' Telehealth Provided Other than in Patient's Home, '03' School, '04' Homeless Shelter, '05' Indian Health Service Free-standing Facility, '06' Indian Health Service Provider-based Facility, '07' Tribal 638 Free-standing Facility, '08' Tribal 638 Provider-based Facility, '09' Prison/Correctional Facility, '10' Telehealth Provided in Patient's Home, '11' Office, '12' Home, '13' Assisted Living Facility, '14' Group Home, '15' Mobile Unit, '16' Temporary Lodging, '17' Walk-in Retail Health Clinic, '18' Place of Employment-Worksite, '19' Off Campus-Outpatient Hospital, '20' Urgent Care Facility, '21' Inpatient Hospital, '22' On Campus-Outpatient Hospital, '23' Emergency Room - Hospital, '24' Ambulatory Surgical Center, '25' Birthing Center, '26' Military Treatment Facility, '31' Skilled Nursing Facility, '32' Nursing Facility, '33' Custodial Care Facility, '34' Hospice, '41' Ambulance - Land, '42' Ambulance - Air or Water, '49' Independent Clinic, '50' Federally Qualified Health Center, '51' Inpatient Psychiatric Facility, '52' Psychiatric Facility - Partial Hospitalization, '53' Community Mental Health Center, '54' Intermediate Care Facility / Individuals with Intellectual Disabilities, '55' Residential Substance Abuse Treatment Facility, '56' Psychiatric Residential Treatment Center, '57' Non-residential Substance Abuse Treatment Facility, '58' Non-residential Opioid Treatment Facility, '60' Mass Immunization Center, '61' Comprehensive Inpatient Rehabilitation Facility, '62' Comprehensive Outpatient Rehabilitation Facility, '65' End-Stage Renal Disease Treatment Facility, '71' Public Health Clinic, '72' Rural Health Clinic, '81' Independent Laboratory, '99' Other Place of Service",
        "enum": [
          "01",
          "02",
          "03",
          "04",
          "05",
          "06",
          "07",
          "08",
          "09",
          "10",
          "11",
          "12",
          "13",
          "14",
          "15",
          "16",
          "17",
          "18",
          "19",
          "20",
          "21",
          "22",
          "23",
          "24",
          "25",
          "26",
          "31",
          "32",
          "33",
          "34",
          "41",
          "42",
          "49",
          "50",
          "51",
          "52",
          "53",
          "54",
          "55",
          "56",
          "57",
          "58",
          "60",
          "61",
          "62",
          "65",
          "71",
          "72",
          "81",
          "99"
        ]
      },
      "InformationReceiverName": {
        "type": "object",
        "description": "Loop: 2100B, Notes: Information Receiver Name",
        "properties": {
          "stateLicenceNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=0B State License Number"
          },
          "medicareProviderNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=1C Medicare Provider Number"
          },
          "medicaidProviderNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=1D Medicaid Provider Number"
          },
          "facilityIdNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=1J Facility ID Number"
          },
          "contactNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=CT Contact Number"
          },
          "devicePinNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=EL Electronic Device Pin Number"
          },
          "submitterIdNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=EO Submitter Identification Number"
          },
          "nationalProviderIdentifier": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=HPI Centers for Medicare and Medicaid Services National Provider Identifier"
          },
          "providerPlanNetworkIdNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=N5 Provider Plan Network Identification Number"
          },
          "facilityNetworkIdNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=N7 Facility Network Identification Number"
          },
          "priorIdentifierNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=Q4 Prior Identifier Number"
          },
          "socialSecurityNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=SY Social Security Number"
          },
          "federalTaxpayerIdentificationNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=TJ Federal Taxpayer's Identification Number"
          },
          "informationReceiverAdditionalIdentifierState": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: REF, Element: REF03, Notes: REF01=0B REF02=stateLicenceNumber Federal Taxpayer's Identification Number"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "InterchangeOverrides": {
        "type": "object",
        "properties": {
          "interchangeUsageIndicator": {
            "$ref": "#/components/schemas/CoreX12UsageIndicator"
          },
          "acknowledgmentRequestedCode": {
            "$ref": "#/components/schemas/X12AcknowledgmentRequestedCode"
          },
          "interchangeControlVersionNumberCode": {
            "type": "string",
            "maxLength": 5,
            "minLength": 5,
            "description": "Set [ISA-12](https://www.stedi.com/edi/x12/segment/ISA#ISA-12) to a different value. This code indicates the version of the `ISA` header segments included in the EDI file. By default, Stedi sets `ISA-12` to to be the X12 release number of the guide associated with the transaction setting."
          }
        }
      },
      "LineAdjudicationInformation": {
        "type": "object",
        "description": "SVD, CAS, DTP and AMT",
        "properties": {
          "otherPayerPrimaryIdentifier": {
            "type": "string",
            "description": "Loop: 2430, Segment: SVD, Element: SVD01"
          },
          "serviceLinePaidAmount": {
            "type": "string",
            "description": "Loop: 2430, Segment: SVD, Element: SVD02"
          },
          "serviceIdQualifier": {
            "$ref": "#/components/schemas/LineAdjudicationInformationServiceIdQualifier"
          },
          "procedureCode": {
            "type": "string",
            "description": "Loop: 2430, Segment: SVD, Element: SVD03-02"
          },
          "procedureModifier": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 4,
            "minItems": 0
          },
          "procedureCodeDescription": {
            "type": "string",
            "description": "Loop: 2430, Segment: SVD, Element: SVD03-07"
          },
          "paidServiceUnitCount": {
            "type": "string",
            "description": "Loop: 2430, Segment: SVD, Element: SVD05"
          },
          "bundledOrUnbundledLineNumber": {
            "type": "string",
            "description": "Loop: 2430, Segment: SVD, Element: SVD06"
          },
          "claimAdjustmentInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimAdjustment"
            },
            "maxItems": 5,
            "minItems": 0,
            "description": "Loop: 2430, Segment: CAS"
          },
          "adjudicationOrPaymentDate": {
            "type": "string",
            "description": "Loop: 2430, Segment: DTP, Element=DTP03 when DTP02=D8 and DTP01=573"
          },
          "remainingPatientLiability": {
            "type": "string",
            "description": "Loop: 2430, Segment: AMT, Element=AMT02 when AMT01=EAF"
          }
        },
        "required": [
          "adjudicationOrPaymentDate",
          "otherPayerPrimaryIdentifier",
          "paidServiceUnitCount",
          "procedureCode",
          "serviceIdQualifier",
          "serviceLinePaidAmount"
        ]
      },
      "LineAdjudicationInformationServiceIdQualifier": {
        "type": "string",
        "description": "Loop: 2430, Segment: SVD, Element: SVD03-01, Note: Allowed Values are: 'ER' Jurisdiction Specific Procedure and Supply Codes, 'HC' Health Care Financing Administration Common Procedural Coding System (HCPCS) Codes, 'HP' Health Insurance Prospective Payment System (HIPPS) Skilled Nursing Facility Rate Code, 'IV' Home Infusion EDI Coalition (HIEC) Product/Service Code, 'WK' Advanced Billing Concepts (ABC) Codes",
        "enum": [
          "ER",
          "HC",
          "HP",
          "IV",
          "WK"
        ]
      },
      "ListExecutionTransactionsResponseContent": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 1,
            "description": "The token used for pagination"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionSummary"
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "ListExecutionsResponseContent": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 1,
            "description": "The token used for pagination"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecutionSummary"
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "ListPollingExecutionsResponseContent": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 1,
            "description": "The token used for pagination"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecutionSummary"
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "ListPollingTransactionsResponseContent": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 1,
            "description": "The token used for pagination"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionSummary"
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "ListTransactionsResponseContent": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 1,
            "description": "The token used for pagination"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionSummary"
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "Mark": {
        "type": "object",
        "description": "The location in the document where the problem occurred. May be a single index or a range.",
        "properties": {
          "start": {
            "$ref": "#/components/schemas/Index"
          },
          "end": {
            "$ref": "#/components/schemas/Index"
          }
        },
        "required": [
          "start"
        ]
      },
      "MeasurementQualifier": {
        "type": "string",
        "description": "Loop 2400, Segment: MEA; Element: MEA02, Notes: Allowable values are 'HT' Height, 'R1' Hemoglobin, 'R2' Hematocrit, 'R3' Epoetin Starting Dosage, 'R4' Creatinine",
        "enum": [
          "HT",
          "R1",
          "R2",
          "R3",
          "R4"
        ]
      },
      "MeasurementReferenceIdentificationCode": {
        "type": "string",
        "description": "Loop 2400, Segment: MEA; Element: MEA01, Notes: Allowable values are 'OG' Original and 'TR' Test Results",
        "enum": [
          "OG",
          "TR"
        ]
      },
      "MeasurementUnit": {
        "type": "string",
        "description": "Loop 2400, Segment: SV1, Element: SV103, Notes: Allowed values are 'MJ' Minutes, 'UN' Unit",
        "enum": [
          "MJ",
          "UN"
        ]
      },
      "MeasurementUnitCode": {
        "type": "string",
        "description": "Loop: 2410, Segment: CTP05, Element: CTP05-01, Allowed Values are: 'F2' International Unit, 'GR' Gram, 'ME' Milligram, 'ML' Milliliter, 'UN' Unit",
        "enum": [
          "F2",
          "GR",
          "ME",
          "ML",
          "UN"
        ]
      },
      "Measurements": {
        "type": "object",
        "properties": {
          "measurementReferenceIdentificationCode": {
            "$ref": "#/components/schemas/MeasurementReferenceIdentificationCode"
          },
          "measurementQualifier": {
            "$ref": "#/components/schemas/MeasurementQualifier"
          },
          "testResults": {
            "type": "string",
            "description": "Loop 2400, Segment: MEA; Element: MEA03"
          }
        },
        "required": [
          "measurementQualifier",
          "measurementReferenceIdentificationCode",
          "testResults"
        ]
      },
      "MedicalProcedure": {
        "type": "object",
        "description": "Loop: 2110C and 2110D, Notes: Eligibility or Benefit Information, EQ02 and beyond only",
        "properties": {
          "productOrServiceIDQualifier": {
            "$ref": "#/components/schemas/MedicalProcedureProductOrServiceIDQualifier"
          },
          "procedureCode": {
            "type": "string",
            "maxLength": 48,
            "minLength": 0,
            "description": "Loop: 2110C and 2110D, Segment: EQ, Element: EQ02-2, Notes: Composite Medical Procedure Identifier - Procedure Code"
          },
          "procedureModifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 4,
            "minItems": 0,
            "description": "Loop: 2110C and 2110D, Segment: EQ, Element: EQ02-3, Notes: Composite Medical Procedure Identifier - Procedure Modifier"
          },
          "diagnosisCodePointer": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 4,
            "minItems": 0,
            "description": "Loop: 2110C and 2110D, Segment: EQ, Element: EQ05, Notes: Composite Diagnosis Code Pointer"
          }
        }
      },
      "MedicalProcedureProductOrServiceIDQualifier": {
        "type": "string",
        "description": "Loop: 2110C and 2110D, Segment: EQ, Element: EQ02-1, Notes: Composite Medical Procedure Identifier - Product or Service ID Qualifier, Allowed Values are: 'AD' American Dental Association Codes, 'CJ' Current Procedural Terminology (CPT) Codes, 'HC' Health Care Financing Administration Common Procedural Coding System (HCPCS) Codes, 'ID' International Classification of Diseases, 9th Revision, Clinical Modification (ICD-9-CM) - Procedure, 'IV' Home Infusion EDI Coalition (HIEC) Product/Service Code, 'N4' National Drug Code in 5-4-2 Format, 'ZZ' Mutually Defined",
        "enum": [
          "AD",
          "CJ",
          "HC",
          "ID",
          "IV",
          "N4",
          "ZZ"
        ]
      },
      "MedicareOutpatientAdjudication": {
        "type": "object",
        "description": "Loop: 2320, Segment: MOA",
        "properties": {
          "reimbursementRate": {
            "type": "string",
            "description": "Loop 2320, Segment: MOA; Element: MOA01"
          },
          "hcpcsPayableAmount": {
            "type": "string",
            "description": "Loop 2320, Segment: MOA; Element: MOA02"
          },
          "claimPaymentRemarkCode": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 5,
            "minItems": 0,
            "description": "Loop: 2320: Segment: MOA, Element: MOA03 to MOA07"
          },
          "endStageRenalDiseasePaymentAmount": {
            "type": "string",
            "description": "Loop 2320, Segment: MOA; Element: MOA08"
          },
          "nonPayableProfessionalComponentBilledAmount": {
            "type": "string",
            "description": "Loop 2320, Segment: MOA; Element: MOA09"
          }
        }
      },
      "Mode": {
        "type": "string",
        "enum": [
          "test",
          "production",
          "other"
        ]
      },
      "Ordering": {
        "type": "object",
        "description": "Loop: 2420E, Setting ProviderType equal to OrderingProvider is deprecated, please use ClaimInformation.serviceLines.orderingProvider",
        "properties": {
          "providerType": {
            "type": "string"
          },
          "npi": {
            "type": "string",
            "description": "NM109, Notes: National Provider Identifier"
          },
          "ssn": {
            "type": "string",
            "description": "REF02 when REF01=SY, Notes: The Social Security Number must be a string of nine numbers with no separators"
          },
          "employerId": {
            "type": "string",
            "description": "REF02 when REF01=EI, Notes: The Employer Identification Number must be a string of exactly nine numbers with no separators"
          },
          "commercialNumber": {
            "type": "string",
            "description": "REF02 when REF01=G2"
          },
          "locationNumber": {
            "type": "string",
            "description": "REF02 when REF01=LU"
          },
          "payerIdentificationNumber": {
            "type": "string",
            "description": "LOOP: 2010AC, Segment: REF, Element: REF02 when REF01=2U"
          },
          "employerIdentificationNumber": {
            "type": "string",
            "description": "LOOP: 2010AC, Segment: REF, Element: REF02 when REF01=EI"
          },
          "claimOfficeNumber": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: REF, Element: REF02 when REF01=FY"
          },
          "naic": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: REF, Element: REF02 when REF01=NF, Notes: National Association of Insurance Commissioners (NAIC) Code"
          },
          "stateLicenseNumber": {
            "type": "string",
            "description": "REF02 when REF01=0B"
          },
          "providerUpinNumber": {
            "type": "string",
            "description": "REF02 when REF01=1G, Notes: UPINs must be formatted as either X99999 or XXX999"
          },
          "taxonomyCode": {
            "type": "string",
            "description": "PRV03"
          },
          "firstName": {
            "type": "string",
            "description": "NM104"
          },
          "lastName": {
            "type": "string",
            "description": "NM103"
          },
          "middleName": {
            "type": "string",
            "description": "NM105"
          },
          "suffix": {
            "type": "string",
            "description": "NM107"
          },
          "organizationName": {
            "type": "string",
            "description": "NM103"
          },
          "address": {
            "$ref": "#/components/schemas/ClaimsAddress"
          },
          "contactInformation": {
            "$ref": "#/components/schemas/ClaimsContactInformation"
          }
        },
        "required": [
          "providerType"
        ]
      },
      "OtherInsuredIdentifierTypeCode": {
        "type": "string",
        "description": "Loop: 2330A, Segment: NM1, Element: NM108, Notes: Allowable values are: 'II' Standard Unique HealthIdentifier for each individual in the United States and 'MI' member identification number",
        "enum": [
          "II",
          "MI"
        ]
      },
      "OtherInsuredQualifier": {
        "type": "string",
        "description": "Loop: 2330A, Segment: NM1, Element: NM102, Notes: Allowed Values are: '1' Person, '2' Non-Person Entity",
        "enum": [
          "1",
          "2"
        ]
      },
      "OtherPayerBillingProvider": {
        "type": "object",
        "description": "Loop 2330G",
        "properties": {
          "entityTypeQualifier": {
            "$ref": "#/components/schemas/OtherPayerBillingProviderEntityTypeQualifier"
          },
          "otherPayerBillingProviderIdentifier": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceIdentification"
            },
            "maxItems": 2,
            "minItems": 1,
            "description": "Loop 2330G, Segment: NM1 and REF"
          }
        },
        "required": [
          "entityTypeQualifier",
          "otherPayerBillingProviderIdentifier"
        ]
      },
      "OtherPayerBillingProviderEntityTypeQualifier": {
        "type": "string",
        "description": "Loop 2330G, Segment: NM1; Element: NM101, Notes: Code identifying an organizational entity, a physical location, property or an individual. Allowablevalues: '1' Person, '2' Non-Person Entity",
        "enum": [
          "1",
          "2"
        ]
      },
      "OtherPayerIdentifierTypeCode": {
        "type": "string",
        "description": "Loop: 2330B; Segment: NM1, Element: NM108, Notes: Allowable values: 'PI' Payor Identification and 'XV' Centers for Medicare/Medicaid Services PlanID",
        "enum": [
          "PI",
          "XV"
        ]
      },
      "OtherPayerName": {
        "type": "object",
        "description": "Loop: 2330B",
        "properties": {
          "otherInsuredAdditionalIdentifier": {
            "type": "string",
            "description": "Loop: 2330B; Segment: NM1, Element: NM111"
          },
          "otherPayerOrganizationName": {
            "type": "string",
            "description": "Loop: 2330B; Segment: NM1, Element: NM103"
          },
          "otherPayerIdentifierTypeCode": {
            "$ref": "#/components/schemas/OtherPayerIdentifierTypeCode"
          },
          "otherPayerIdentifier": {
            "type": "string",
            "description": "Loop: 2330B; Segment: NM1, Element: NM109"
          },
          "otherPayerAddress": {
            "$ref": "#/components/schemas/ClaimsAddress"
          },
          "otherPayerAdjudicationOrPaymentDate": {
            "type": "string",
            "description": "Loop: 2330B, Segment: DTP, Element: DTP03"
          },
          "otherPayerSecondaryIdentifier": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceIdentification"
            },
            "maxItems": 2,
            "minItems": 0,
            "description": "Loop: 2330B, Segment: REF"
          },
          "otherPayerPriorAuthorizationNumber": {
            "type": "string",
            "description": "Loop: 2330B, Segment: REF, Element: REF02 when REF01=G1"
          },
          "otherPayerPriorAuthorizationOrReferralNumber": {
            "type": "string",
            "description": "Loop: 2330B; Segment: REF, Element: REF02 when REF01=9F"
          },
          "otherPayerClaimAdjustmentIndicator": {
            "type": "boolean",
            "description": "Loop: 2330B, Segment: REF, Element: REF02 when REF01=T4"
          },
          "otherPayerClaimControlNumber": {
            "type": "string",
            "description": "Loop: 2330B, Segment: REF, Element: REF02 when REF01=F8"
          }
        },
        "required": [
          "otherPayerIdentifier",
          "otherPayerIdentifierTypeCode",
          "otherPayerOrganizationName"
        ]
      },
      "OtherPayerReferringProvider": {
        "type": "object",
        "description": "Loop 2330C",
        "properties": {
          "otherPayerReferringProviderIdentifier": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceIdentification"
            },
            "maxItems": 3,
            "minItems": 1,
            "description": "Loop 2330E, Segment: NM1 and REF"
          }
        },
        "required": [
          "otherPayerReferringProviderIdentifier"
        ]
      },
      "OtherPayerRenderingProvider": {
        "type": "object",
        "description": "Loop 2330D",
        "properties": {
          "entityTypeQualifier": {
            "$ref": "#/components/schemas/OtherPayerRenderingProviderEntityTypeQualifier"
          },
          "otherPayerRenderingProviderSecondaryIdentifier": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceIdentification"
            },
            "maxItems": 3,
            "minItems": 1,
            "description": "Loop 2330D, Segment: NM1 and REF"
          }
        },
        "required": [
          "entityTypeQualifier"
        ]
      },
      "OtherPayerRenderingProviderEntityTypeQualifier": {
        "type": "string",
        "description": "Loop: 2330D, Segment NM1, Element: NM102, Notes: Allowable values are '1' Person and '2' Non-Person Entity",
        "enum": [
          "1",
          "2"
        ]
      },
      "OtherPayerServiceFacilityLocation": {
        "type": "object",
        "description": "Loop 2330E",
        "properties": {
          "otherPayerServiceFacilityLocationSecondaryIdentifier": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceIdentification"
            },
            "maxItems": 3,
            "minItems": 1,
            "description": "Loop 2330E, Segments: NM1 and REF"
          }
        },
        "required": [
          "otherPayerServiceFacilityLocationSecondaryIdentifier"
        ]
      },
      "OtherPayerSupervisingProvider": {
        "type": "object",
        "description": "Loop 2330F",
        "properties": {
          "otherPayerSupervisingProviderIdentifier": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceIdentification"
            },
            "maxItems": 3,
            "minItems": 1,
            "description": "Loop 2330F, Segments: NM1 and REF"
          }
        },
        "required": [
          "otherPayerSupervisingProviderIdentifier"
        ]
      },
      "OtherSubscriberInformation": {
        "type": "object",
        "description": "Loop 2320",
        "properties": {
          "paymentResponsibilityLevelCode": {
            "$ref": "#/components/schemas/OtherSubscriberInformationPaymentResponsibilityLevelCode"
          },
          "individualRelationshipCode": {
            "$ref": "#/components/schemas/ClaimsIndividualRelationshipCode"
          },
          "insuranceGroupOrPolicyNumber": {
            "type": "string",
            "description": "Loop: 2320, Segment: SBR, Element: SBR03"
          },
          "otherInsuredGroupName": {
            "type": "string",
            "description": "Loop: 2000B, Segment: SBR, Element: SBR04"
          },
          "insuranceTypeCode": {
            "$ref": "#/components/schemas/OtherSubscriberInformationInsuranceTypeCode"
          },
          "claimFilingIndicatorCode": {
            "$ref": "#/components/schemas/ClaimFilingIndicatorCode"
          },
          "claimLevelAdjustments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimAdjustment"
            },
            "maxItems": 5,
            "minItems": 0,
            "description": "Loop: 2320, Segment: CAS"
          },
          "payerPaidAmount": {
            "type": "string",
            "description": "Loop: 2320, Segment: AMT, Element: AMT02 when AMT01=D, Notes: It is acceptable to show '0' (Zero)"
          },
          "nonCoveredChargeAmount": {
            "type": "string",
            "description": "Loop: 2320, Segment: AMT, Element: AMT02 when AMT01=A8"
          },
          "remainingPatientLiability": {
            "type": "string",
            "description": "Loop: 2320, Segment: AMT, Element: AMT02 when AMT01=EAF"
          },
          "benefitsAssignmentCertificationIndicator": {
            "$ref": "#/components/schemas/OtherSubscriberInformationBenefitsAssignmentCertificationIndicator"
          },
          "patientSignatureGeneratedForPatient": {
            "type": "boolean",
            "description": "Loop: 2320, Segment: OI, Element: OI04, Notes: Allowable value is 'P' Signature generated by provider because the patient was not physically present for services"
          },
          "releaseOfInformationCode": {
            "$ref": "#/components/schemas/ReleaseOfInformationCode"
          },
          "medicareOutpatientAdjudication": {
            "$ref": "#/components/schemas/MedicareOutpatientAdjudication"
          },
          "otherSubscriberName": {
            "$ref": "#/components/schemas/OtherSubscriberName"
          },
          "otherPayerName": {
            "$ref": "#/components/schemas/OtherPayerName"
          },
          "otherPayerReferringProvider": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OtherPayerReferringProvider"
            }
          },
          "otherPayerRenderingProvider": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OtherPayerRenderingProvider"
            }
          },
          "otherPayerServiceFacilityLocation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OtherPayerServiceFacilityLocation"
            }
          },
          "otherPayerSupervisingProvider": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OtherPayerSupervisingProvider"
            }
          },
          "otherPayerBillingProvider": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OtherPayerBillingProvider"
            }
          }
        },
        "required": [
          "benefitsAssignmentCertificationIndicator",
          "claimFilingIndicatorCode",
          "individualRelationshipCode",
          "otherPayerName",
          "otherSubscriberName",
          "paymentResponsibilityLevelCode",
          "releaseOfInformationCode"
        ]
      },
      "OtherSubscriberInformationBenefitsAssignmentCertificationIndicator": {
        "type": "string",
        "description": "Loop: 2320, Segment: OI, Element: OI03, Notes: Allowable values are: 'N' No, 'W' Not Applicable, 'Y' Yes",
        "enum": [
          "N",
          "W",
          "Y"
        ]
      },
      "OtherSubscriberInformationInsuranceTypeCode": {
        "type": "string",
        "description": "Loop: 2320, Segment: SBR, Element: SBR05, Notes: Allowable Values are:  '12' Medicare Secondary Working Aged Beneficiary or Spouse with Employer Group Health Plan, '13' Medicare Secondary End-Stage Renal Disease Beneficiary in the Mandated Coordination Period, '14' Medicare Secondary, No-fault Insurance including Auto is Primary, '15' Medicare Secondary Worker's Compensation, '16' Medicare Secondary Public Health Service (PHS)or Other Federal Agency, '41' Medicare Secondary Black Lung,  '42' Medicare Secondary Veteran's Administration, '43' Medicare Secondary Disabled Beneficiary Under Age 65 with Large Group Health Plan (LGHP), '47' Medicare Secondary, Other Liability Insurance is Primary",
        "enum": [
          "12",
          "13",
          "14",
          "15",
          "16",
          "41",
          "42",
          "43",
          "47"
        ]
      },
      "OtherSubscriberInformationPaymentResponsibilityLevelCode": {
        "type": "string",
        "description": "Loop: 2320, Segment: SBR, Element: SBR01, Notes: Allowable values are 'A' Payer Responsibility Four, 'B' Payer Responsibility Five, 'C' Payer Responsibility Six, 'D' Payer Responsibility Seven, 'E' Payer Responsibility Eight, 'F' Payer Responsibility Nine, 'G' Payer Responsibility Ten, 'H' Payer Responsibility Eleven, 'P' Primary, 'S' Secondary, 'T' Tertiary, and 'U' Unknown",
        "enum": [
          "A",
          "B",
          "C",
          "D",
          "E",
          "F",
          "G",
          "H",
          "P",
          "S",
          "T",
          "U"
        ]
      },
      "OtherSubscriberName": {
        "type": "object",
        "description": "Loop: 2330A",
        "properties": {
          "otherInsuredQualifier": {
            "$ref": "#/components/schemas/OtherInsuredQualifier"
          },
          "otherInsuredLastName": {
            "type": "string",
            "description": "Loop: 2330A, Segment: NM1, Element: NM103"
          },
          "otherInsuredFirstName": {
            "type": "string",
            "description": "Loop: 2330A, Segment: NM1, Element: NM102, Notes: Required when NM102 = 1 (Person)"
          },
          "otherInsuredMiddleName": {
            "type": "string",
            "description": "Loop: 2330A, Segment: NM1, Element: NM105, Notes: Required when NM102 = 1 (Person)"
          },
          "otherInsuredNameSuffix": {
            "type": "string",
            "description": "Loop: 2330A, Segment: NM1, Element: NM107, Notes: Required when NM102 = 1 (Person)"
          },
          "otherInsuredIdentifierTypeCode": {
            "$ref": "#/components/schemas/OtherInsuredIdentifierTypeCode"
          },
          "otherInsuredIdentifier": {
            "type": "string",
            "description": "Loop: 2330A, Segment: NM1, Element: NM109"
          },
          "otherInsuredAddress": {
            "$ref": "#/components/schemas/ClaimsAddress"
          },
          "otherInsuredAdditionalIdentifier": {
            "type": "string",
            "description": "Loop: 2330A, Segment: REF, Element: REF02 when REF01=SY"
          }
        },
        "required": [
          "otherInsuredIdentifier",
          "otherInsuredIdentifierTypeCode",
          "otherInsuredLastName",
          "otherInsuredQualifier"
        ]
      },
      "Partnership": {
        "type": "object",
        "properties": {
          "partnershipId": {
            "type": "string",
            "maxLength": 81,
            "minLength": 1,
            "pattern": "^([a-zA-Z0-9_-]+)$",
            "description": "Identifier chosen by the user to uniquely identify a partnership."
          },
          "partnershipType": {
            "$ref": "#/components/schemas/PartnershipType"
          },
          "sender": {
            "$ref": "#/components/schemas/PartnershipSender"
          },
          "receiver": {
            "$ref": "#/components/schemas/PartnershipReceiver"
          }
        },
        "required": [
          "partnershipId",
          "partnershipType",
          "receiver",
          "sender"
        ]
      },
      "PartnershipReceiver": {
        "type": "object",
        "properties": {
          "profileId": {
            "type": "string",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "^([a-zA-Z0-9_-]+)$"
          }
        },
        "required": [
          "profileId"
        ]
      },
      "PartnershipSender": {
        "type": "object",
        "properties": {
          "profileId": {
            "type": "string",
            "maxLength": 40,
            "minLength": 1,
            "pattern": "^([a-zA-Z0-9_-]+)$"
          }
        },
        "required": [
          "profileId"
        ]
      },
      "PartnershipType": {
        "type": "string",
        "enum": [
          "x12",
          "edifact"
        ]
      },
      "PatientConditionDescription1": {
        "type": "string",
        "description": "Loop: 2300, Segment: CR, Element: CR210 Note: Allowed Values are: 'A' Acute Condition, 'C' Chronic Condition, 'D' Chronic Condition, 'E' Non-Life Threatening, 'F' Routine, 'G' Symptomatic, 'M' Acute Manifestation of a Chronic Condition",
        "enum": [
          "A",
          "C",
          "D",
          "E",
          "F",
          "G",
          "M"
        ]
      },
      "PatientConditionInformationVision": {
        "type": "object",
        "description": "Loop 2300, Segment: CRC",
        "properties": {
          "codeCategory": {
            "$ref": "#/components/schemas/CodeCategory"
          },
          "certificationConditionIndicator": {
            "$ref": "#/components/schemas/PatientConditionInformationVisionCertificationConditionIndicator"
          },
          "conditionCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatientConditionInformationVisionConditionCodesItem"
            },
            "maxItems": 5,
            "minItems": 1,
            "description": "Loop: 2300, Segment: CRC, Element: CRC03 to CRC07, Notes: CRC03 is required, others are situational. Allowed Values are: 'L1' General Standard of 20 Degree or .5 Diopter Sphere or Cylinder Change Met, 'L2' Replacement Due to Loss or Theft, 'L3' Replacement Due to Breakage or Damage, L4' Replacement Due to Patient Preference, 'L5' Replacement Due to Medical Reason"
          }
        },
        "required": [
          "certificationConditionIndicator",
          "codeCategory",
          "conditionCodes"
        ]
      },
      "PatientConditionInformationVisionCertificationConditionIndicator": {
        "type": "string",
        "description": "Loop: 2300, Segment: CRC, Element: CRC02, Notes: Allowed Values are: 'N' No, 'Y' Yes",
        "enum": [
          "N",
          "Y"
        ]
      },
      "PatientConditionInformationVisionConditionCodesItem": {
        "type": "string",
        "enum": [
          "L1",
          "L2",
          "L3",
          "L4",
          "L5"
        ]
      },
      "PayToPlan": {
        "type": "object",
        "description": "2010AC",
        "properties": {
          "organizationName": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: NM1, Element: NM103"
          },
          "primaryIdentifierTypeCode": {
            "$ref": "#/components/schemas/PrimaryIdentifierTypeCode"
          },
          "primaryIdentifier": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: NM1, Element: NM109"
          },
          "address": {
            "$ref": "#/components/schemas/ClaimsAddress"
          },
          "secondaryIdentifierTypeCode": {
            "$ref": "#/components/schemas/SecondaryIdentifierTypeCode"
          },
          "secondaryIdentifier": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: REF, Element: REF02"
          },
          "taxIdentificationNumber": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: REF, Element: REF02 when REF01=EI"
          }
        },
        "required": [
          "address",
          "organizationName",
          "primaryIdentifier",
          "primaryIdentifierTypeCode",
          "taxIdentificationNumber"
        ]
      },
      "Payer": {
        "type": "object",
        "description": "Payer",
        "properties": {
          "entityIdentifier": {
            "type": "string",
            "description": "Loop: 2100A, Segments: NM1, Element: NM101 Notes: Entity Identifier Code"
          },
          "entityType": {
            "type": "string",
            "description": "Loop: 2100A, Segments: NM1, Element: NM102 Notes: Entity Type Qualifier"
          },
          "firstName": {
            "type": "string",
            "description": "Loop: 2100A, Segments: NM1, Element: NM104 Notes: Name First"
          },
          "lastName": {
            "type": "string",
            "description": "Loop: 2100A, Segments: NM1, Element: NM103 Notes: Name Last"
          },
          "name": {
            "type": "string",
            "description": "Loop: 2100A, Segments: NM1, Element: NM103 Notes: Organization Name"
          },
          "middleName": {
            "type": "string",
            "description": "Loop: 2100A, Segments: NM1, Element: NM105 Notes: Name Middle"
          },
          "suffix": {
            "type": "string",
            "description": "Loop: 2100A, Segments: NM1, Element: NM107 Notes: Name Suffix"
          },
          "employersId": {
            "type": "string",
            "description": "Loop: 2100A, Segments: NM1, Element: NM109 Notes: NM108=24 Employer's Identification Number"
          },
          "federalTaxpayersIdNumber": {
            "type": "string",
            "description": "Loop: 2100A, Segments: NM1, Element: NM109 Notes: NM108=FI Federal Taxpayer's Identification Number"
          },
          "naic": {
            "type": "string",
            "description": "Loop: 2100A, Segments: NM1, Element: NM109 Notes: NM108=NI National Association of Insurance Commissioners (NAIC) Identification"
          },
          "npi": {
            "type": "string",
            "description": "Loop: 2100A, Segments: NM1, Element: NM109 Notes: NM108=XX Centers for Medicare and Medicaid Services National Provider Identifier"
          },
          "centersForMedicareAndMedicaidPlanId": {
            "type": "string",
            "description": "Loop: 2100A, Segments: NM1, Element: NM109 Notes: NM108=XV Centers for Medicare and Medicaid Services PlanID"
          },
          "payorIdentification": {
            "type": "string",
            "description": "Loop: 2100A, Segments: NM1, Element: NM109 Notes: NM108=PI Payor Identification"
          },
          "contactInformation": {
            "$ref": "#/components/schemas/ContactInformation"
          },
          "aaaErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          },
          "etin": {
            "type": "string"
          }
        }
      },
      "PlanDateInformation": {
        "type": "object",
        "description": "PlanDateInformation",
        "properties": {
          "discharge": {
            "type": "string",
            "description": "Loop: 2100C and 2100D or 2110C and 2110D, Segments: DTP, Element: DTP03, Notes: DTP01=096 Discharge"
          },
          "issue": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=102 issue"
          },
          "effectiveDateOfChange": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=152 effectiveDateOfChange"
          },
          "periodStart": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03, Notes: DTP01=193 periodStart"
          },
          "periodEnd": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03, Notes: DTP01=194 periodEnd"
          },
          "completion": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03, Notes: DTP01=198 completion"
          },
          "coordinationOfBenefits": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: DTP, Element: DTP03, Notes: DTP01=290 coordinationOfBenefits"
          },
          "plan": {
            "type": "string",
            "description": "Loop: 2100C and 2100D or 2110C and 2110D, Segments: DTP, Element: DTP03, Notes: DTP01=291 plan"
          },
          "benefit": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=292 benefit"
          },
          "primaryCareProvider": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=295 primaryCareProvider"
          },
          "latestVisitOrConsultation": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=304 latestVisitOrConsultation"
          },
          "eligibility": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=307 eligibility"
          },
          "added": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=318 added"
          },
          "cobraBegin": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=340 cobraBegin"
          },
          "cobraEnd": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=341 cobraEnd"
          },
          "premiumPaidToDateBegin": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=342 premiumPaidToDateBegin"
          },
          "premiumPaidToDateEnd": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=343 premiumPaidToDateEnd"
          },
          "planBegin": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=346 planBegin"
          },
          "planEnd": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=347 planEnd"
          },
          "benefitBegin": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=348 benefitBegin"
          },
          "benefitEnd": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=349 benefitEnd"
          },
          "eligibilityBegin": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=356 eligibilityBegin"
          },
          "eligibilityEnd": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=357 eligibilityEnd"
          },
          "enrollment": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=382 enrollment"
          },
          "admission": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=435 admission"
          },
          "dateOfDeath": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=442 dateOfDeath"
          },
          "certification": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=458 certification"
          },
          "service": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=472 service"
          },
          "policyEffective": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=539 policyEffective"
          },
          "policyExpiration": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=540 policyExpiration"
          },
          "dateOfLastUpdate": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=636 dateOfLastUpdate"
          },
          "status": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=771 status"
          }
        }
      },
      "PlanInformation": {
        "type": "object",
        "description": "PlanInformation",
        "properties": {
          "stateLicenseNumber": {
            "type": "string",
            "description": "Loop: 2100B; Segments: REF; Element: REF02; Notes: REF01=0B State License Number"
          },
          "medicareProviderNumber": {
            "type": "string",
            "description": "Loop: 2100B; Segments: REF; Element: REF02; Notes: REF01=1C Medicare Provider Number"
          },
          "medicaidProviderNumber": {
            "type": "string",
            "description": "Loop: 2100B; Segments: REF; Element: REF02; Notes: REF01=1D Medicaid Provider Number"
          },
          "facilityIdNumber": {
            "type": "string",
            "description": "Loop: 2100B; Segments: REF; Element: REF02; Notes: REF01=1J Facility ID Number"
          },
          "personalIdentificationNumber": {
            "type": "string",
            "description": "Loop: 2100B; Segments: REF; Element: REF02; Notes: REF01=4A Personal Identification Number"
          },
          "planNumber": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=18 Plan Number"
          },
          "planDescription": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF03; Notes: REF01=18 Plan Description"
          },
          "policyNumber": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=1L Group or Policy Number"
          },
          "memberId": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=1W Member Identification Number"
          },
          "caseNumber": {
            "type": "string",
            "description": "Loop: 2100C; Segments: REF; Element: REF02; Notes: REF01=3H Case Number"
          },
          "familyUnitNumber": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=49 Family Unit Number"
          },
          "groupNumber": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=6P Group Number"
          },
          "groupDescription": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF03; Notes: REF01=6P Group Description"
          },
          "referralNumber": {
            "type": "string",
            "description": "Loop: 2110C, 2110D; Segments: REF; Element: REF02; Notes: REF01=9F Referral Number"
          },
          "alternativeListId": {
            "type": "string",
            "description": "Loop: 2110C, 2110D; Segments: REF; Element: REF02; Notes: REF01=ALS Alternative List ID"
          },
          "classOfContractCode": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=CE Class of Contract Code"
          },
          "coverageListId": {
            "type": "string",
            "description": "Loop: 2110C, 2110D; Segments: REF; Element: REF02; Notes: REF01=CLI Coverage List ID"
          },
          "contractNumber": {
            "type": "string",
            "description": "Loop: 2100B, 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=CT Contract Number"
          },
          "medicalRecordIdentificationNumber": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=EA Medical Record Identification Number"
          },
          "electronicDevicePin": {
            "type": "string",
            "description": "Loop: 2100B; Segments: REF; Element: REF02; Notes: REF01=EL Electronic device pin number"
          },
          "submitterIdentificationNumber": {
            "type": "string",
            "description": "Loop: 2100B; Segments: REF; Element: REF02; Notes: REF01=EO Submitter Identification Number"
          },
          "patientAccountNumber": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=EJ Patient Account Number"
          },
          "hicNumber": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=F6 Health Insurance Claim Number"
          },
          "drugFormularyNumber": {
            "type": "string",
            "description": "Loop: 2110C, 2110D; Segments: REF; Element: REF02; Notes: REF01=FO Drug Formulary Number"
          },
          "priorAuthorizationNumber": {
            "type": "string",
            "description": "Loop: 2110C, 2110D; Segments: REF; Element: REF02; Notes: REF01=G1 Prior Authorization Number"
          },
          "idCardSerialNumber": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=GH Identification Card Serial Number"
          },
          "idCardNumber": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=HJ Identity Card Number"
          },
          "centersForMedicareAndMedicaidServicesNPI": {
            "type": "string",
            "description": "Loop: 2100B; Segments: REF; Element: REF02; Notes: REF01=HPI Centers for Medicare and Medicaid Services NPI"
          },
          "issueNumber": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=IF Issue Number"
          },
          "insurancePolicyNumber": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=IG Insurance Policy Number"
          },
          "userIdentification": {
            "type": "string",
            "description": "Loop: 2100B; Segments: REF; Element: REF02; Notes: REF01=JD User Identification"
          },
          "medicalAssistanceCategory": {
            "type": "string",
            "description": "Loop: 2110C; Segments: REF; Element: REF02; Notes: REF01=M7 Medical Assistance Category"
          },
          "eligibilityCategory": {
            "type": "string",
            "description": "Loop: 2100D; Segments: REF; Element: REF02; Notes: REF01=MRC Eligibility Category"
          },
          "planNetworkIdNumber": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=N6 Plan Network Identification Number"
          },
          "planNetworkIdDescription": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF03; Notes: REF01=N6 Plan Network Identification Description"
          },
          "facilityNetworkIdentificationNumber": {
            "type": "string",
            "description": "Loop: 2100B; Segments: REF; Element: REF02; Notes: REF01=N7 Facility Network Identification Number"
          },
          "medicaidRecipientIdNumber": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=NQ Medicaid Recipient Identification Number"
          },
          "priorIdNumber": {
            "type": "string",
            "description": "Loop: 2100B, 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=Q4 Prior Identifier Number"
          },
          "socialSecurityNumber": {
            "type": "string",
            "description": "Loop: 2100B, 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=SY Social Security Number"
          },
          "federalTaxpayersIdentificationNumber": {
            "type": "string",
            "description": "Loop: 2100B; Segments: REF; Element: REF02; Notes: REF01=TJ Federal Taxpayer's Identification Number"
          },
          "agencyClaimNumber": {
            "type": "string",
            "description": "Loop: 2100C, 2100D; Segments: REF; Element: REF02; Notes: REF01=Y4 Agency Claim Number"
          }
        }
      },
      "PlanParticipationCode": {
        "type": "string",
        "description": "Loop 2300, Segment: CLM, Element: CLM07, Note: Allowed Values are: 'A' Assigned, 'B' Assignment Accepted on Clinical Lab Services Only, 'C' Not Assigned",
        "enum": [
          "A",
          "B",
          "C"
        ]
      },
      "PlanStatus": {
        "type": "object",
        "description": "PlanStatus - Deprecated please use benefitsInformation",
        "properties": {
          "statusCode": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB01, Notes: Eligibility or Benefit Information Code"
          },
          "status": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB01, Notes: Eligibility or Benefit Information Code Description"
          },
          "planDetails": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segments: EB, Element: EB05, Notes: Plan Coverage Description"
          },
          "serviceTypeCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PolicyComplianceCode": {
        "type": "string",
        "description": "Loop: 2300, Segment: HCP, Element: HCP14, Note: Allowed Values are: '1' Procedure Followed (Compliance), '2' Not Followed - Call Not Made (Non-Compliance Call Not Made), '3' Not Medically Necessary (Non-Compliance Non-Medically Necessary), '4' Not Followed Other (Non-Compliance Other), '5' Emergency Admit to Non-Network Hospital",
        "enum": [
          "1",
          "2",
          "3",
          "4",
          "5"
        ]
      },
      "PregnancyIndicator": {
        "type": "string",
        "description": "Loop 2000B and 2000C, Segment: PAT, Element: PAT09",
        "enum": [
          "Y"
        ]
      },
      "PricingMethodologyCode": {
        "type": "string",
        "description": "Loop: 2300, Segment: HCP, Element: HCP01, Note: Allowed Values are: '00' Zero Pricing (Not Covered Under Contract), '01' Priced as Billed at 100%, '02' Priced at the Standard Fee Schedule, '03' Priced at a Contractual Percentage, '04' Bundled Pricing, '05' Peer Review Pricing, '06' Bundled Pricing, '07' Flat Rate Pricing, '08' Combination Pricing, '09' Maternity Pricing, '10' Other Pricing, '11' Lower of Cost, '12' Ratio of Cost, '13' Cost Reimbursed, '14' Adjustment Pricing",
        "enum": [
          "00",
          "01",
          "02",
          "03",
          "04",
          "05",
          "06",
          "07",
          "08",
          "09",
          "10",
          "11",
          "12",
          "13",
          "14"
        ]
      },
      "PrimaryIdentifierTypeCode": {
        "type": "string",
        "description": "Loop: 2010AC, Segment: NM1, Element: NM108, Notes: 'PI' Payor Identification and 'XV' Centers for Medicare/Medicaid Services PlanID",
        "enum": [
          "PI",
          "XV"
        ]
      },
      "PriorAuthorization": {
        "type": "object",
        "description": "Loop 2400 REF",
        "properties": {
          "priorAuthorizationOrReferralNumber": {
            "type": "string",
            "description": "Loop: 2400, Segment: REF, Element: REF02 when REF01=G1"
          },
          "otherPayerPrimaryIdentifier": {
            "type": "string",
            "description": "Loop: 2400, Segment: REF, Element: REF04-2 when REF04-1=2U"
          }
        },
        "required": [
          "priorAuthorizationOrReferralNumber"
        ]
      },
      "ProcedureIdentifier": {
        "type": "string",
        "description": "Loop: 2400, Segment: SV1, Element: SV101-01, Notes: Allowed Values are: 'ER' Jurisdiction Specific Procedure and Supply Codes, 'HC' Health Care Financing Administration Common Procedural Coding System (HCPCS) Codes, 'IV' Home Infusion EDI Coalition (HIEC) Product/Service Code,'WK' Advanced Billing Concepts (ABC) Codes",
        "enum": [
          "ER",
          "HC",
          "IV",
          "WK"
        ]
      },
      "ProfessionalService": {
        "type": "object",
        "properties": {
          "procedureIdentifier": {
            "$ref": "#/components/schemas/ProcedureIdentifier"
          },
          "procedureCode": {
            "type": "string",
            "description": "Loop 2400, Segment: SV1, Element: SV101-02"
          },
          "procedureModifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 4,
            "minItems": 0,
            "description": "Loop 2400, Segment: SV1, Elements: SV101-03 to SV101-06, Notes: Required when modifier clarifies or improves the reporting accuracy of the associated procedure code. If not required then do not send"
          },
          "description": {
            "type": "string",
            "description": "Loop 2400, Segment: SV1, Element: SV101-07, Notes: A free form description to clarify teh related data elements and their content"
          },
          "lineItemChargeAmount": {
            "type": "string",
            "description": "Loop 2400, Segment: SV1, Element: SV102, Notes: Required value for total charge amount, '0' (Zero) is acceptable for this value"
          },
          "measurementUnit": {
            "$ref": "#/components/schemas/MeasurementUnit"
          },
          "serviceUnitCount": {
            "type": "string",
            "description": "Loop 2400, Segment: SV1, Element: SV104, Notes: When a decimal is needed to report units, include it in this element"
          },
          "placeOfServiceCode": {
            "type": "string",
            "description": "Loop 2400, Segment: SV1, Element: SV105"
          },
          "compositeDiagnosisCodePointers": {
            "$ref": "#/components/schemas/CompositeDiagnosisCodePointers"
          },
          "emergencyIndicator": {
            "$ref": "#/components/schemas/EmergencyIndicator"
          },
          "epsdtIndicator": {
            "$ref": "#/components/schemas/EpsdtIndicator"
          },
          "familyPlanningIndicator": {
            "$ref": "#/components/schemas/FamilyPlanningIndicator"
          },
          "copayStatusCode": {
            "$ref": "#/components/schemas/CopayStatusCode"
          }
        },
        "required": [
          "compositeDiagnosisCodePointers",
          "lineItemChargeAmount",
          "measurementUnit",
          "procedureCode",
          "procedureIdentifier",
          "serviceUnitCount"
        ]
      },
      "Provider": {
        "type": "object",
        "description": "Loop: 2100B, Segment: NM1, Notes: Information Receiver",
        "properties": {
          "organizationName": {
            "type": "string",
            "maxLength": 60,
            "minLength": 0,
            "description": "Loop: 2100B Segment: MN1, Element: NM103, Notes: NM101=PR when providerType='payer' && payerId is present otherwise 1P for Provider, NM102=2 Non-Person Entity, organizationName 1-60 alphanumeric characters"
          },
          "firstName": {
            "type": "string",
            "maxLength": 35,
            "minLength": 0,
            "description": "Loop: 2100B Segment: MN1, Element: NM104, Notes: NM101=PR when providerType='payer' && payerId is present otherwise 1P for Provider, NM102=1 Person, firstName 1-35 alphanumeric characters"
          },
          "lastName": {
            "type": "string",
            "maxLength": 60,
            "minLength": 0,
            "description": "Loop: 2100B Segment: MN1, Element: NM103, Notes: NM101=PR when providerType='payer' && payerId is present otherwise 1P for Provider, NM102=1 Person, lastName 1-60 alphanumeric characters"
          },
          "npi": {
            "type": "string",
            "maxLength": 80,
            "minLength": 0,
            "description": "Loop: 2100B Segment: MN1, Element: NM109, Notes: NM108=XX Centers for Medicare and Medicaid Services National Provider Identifier 2-80 alphanumeric characters"
          },
          "serviceProviderNumber": {
            "type": "string",
            "maxLength": 80,
            "minLength": 0,
            "description": "Loop: 2100B Segment: MN1, Element: NM109, Notes: NM108=SV Service Provider Number 2-80 alphanumeric characters"
          },
          "payorId": {
            "type": "string",
            "maxLength": 80,
            "minLength": 0,
            "description": "Loop: 2100B Segment: MN1, Element: NM109, Notes: NM101=PR when providerType='payer' && payerId is present otherwise 1P for Provider, NM108=PI Payor Identification 2-80 alphanumeric characters"
          },
          "taxId": {
            "type": "string",
            "maxLength": 80,
            "minLength": 0,
            "description": "Loop: 2100B Segment: MN1, Element: NM109, Notes: NM108=FI Federal Taxpayer's Identification Number 2-80 alphanumeric characters"
          },
          "ssn": {
            "type": "string",
            "maxLength": 80,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: NM1, Element: NM109 Notes: NM108=34 Social Security Number"
          },
          "pharmacyProcessorNumber": {
            "type": "string",
            "maxLength": 80,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: NM1, Element: NM109 Notes: NM108=PP Pharmacy Processor Number"
          },
          "servicesPlanID": {
            "type": "string",
            "maxLength": 80,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: NM1, Element: NM109 Notes: NM108=XV Centers for Medicare and Medicaid Services PlanID"
          },
          "employersId": {
            "type": "string",
            "maxLength": 80,
            "minLength": 0,
            "description": "Loop: 2100B, Segment: NM1, Element: NM109 Notes: NM108=24 Employer's Identification Number"
          },
          "providerCode": {
            "$ref": "#/components/schemas/ProviderProviderCode"
          },
          "referenceIdentification": {
            "type": "string",
            "description": "Loop: 2100B Segment: PRV, Element: PRV03, Notes: PRV02=PXC referenceIdentification and controlNumber into PRV03"
          },
          "providerType": {
            "$ref": "#/components/schemas/ProviderType"
          }
        }
      },
      "ProviderInformation": {
        "type": "object",
        "description": "ProviderInformation",
        "properties": {
          "providerCode": {
            "type": "string",
            "description": "Loop: 2120C and 2120D, Segments: PRV, Element: PRV01, Notes: providerCode"
          },
          "referenceIdentification": {
            "type": "string",
            "description": "Loop: 2120C and 2120D, Segments: PRV, Element: PRV03, Notes: Benefit Related Entity Provider Taxonomy Code"
          }
        }
      },
      "ProviderProviderCode": {
        "type": "string",
        "description": "Loop: 2100B Segment: PRV, Element: PRV01, Notes: PRV02=PXC Allowed descriptions are: 'AD' Admitting, 'AT' Attending, 'BI' Billing, 'CO' Consulting, 'CV' Covering, 'H' Hospital, 'HH' Home Health Care, 'LA' Laboratory, 'OT' Other Physician, 'P1' Pharmacist, 'P2' Pharmacy, 'PC' Primary Care Physician, 'PE' Performing, 'R' Rural Health Clinic, 'RF' Referring, 'SB' Submitting, 'SK' Skilled Nursing Facility, 'SU' Supervising",
        "enum": [
          "AD",
          "AT",
          "BI",
          "CO",
          "CV",
          "H",
          "HH",
          "LA",
          "OT",
          "P1",
          "P2",
          "PC",
          "PE",
          "R",
          "RF",
          "SB",
          "SK",
          "SU"
        ]
      },
      "ProviderType": {
        "type": "string",
        "description": "Loop: 2100B Segment: MN1, Element: MN101, Notes: Allowed descriptions are: 'PR' when providerType='payer' && payerId is present, '2B' when providerType='third-party administrator', '36' when providerType='employer', '80' when providerType='hospital', 'FA' when providerType='facility', 'GP' when providerType='gateway provider', 'P5' when providerType='plan sponsor', '1P' when providerType='provider'",
        "enum": [
          "payer",
          "third-party administrator",
          "employer",
          "hospital",
          "facility",
          "gateway provider",
          "plan sponsor",
          "provider"
        ]
      },
      "PurchasedServiceInformation": {
        "type": "object",
        "properties": {
          "purchasedServiceProviderIdentifier": {
            "type": "string",
            "description": "Loop: 2400, Segment: PS1, Element: PS101"
          },
          "purchasedServiceChargeAmount": {
            "type": "string",
            "description": "Loop: 2400, Segment: PS1, Element: PS102"
          }
        },
        "required": [
          "purchasedServiceChargeAmount",
          "purchasedServiceProviderIdentifier"
        ]
      },
      "QuestionResponseCode": {
        "type": "string",
        "description": "Loop: 2440,  Segment: FRM, Element: FRM02, Notes: Allowed Values are: 'N' No, 'W' Not Applicable, 'Y' Yes",
        "enum": [
          "N",
          "W",
          "Y"
        ]
      },
      "Receiver": {
        "type": "object",
        "description": "Loop: 1000B",
        "properties": {
          "organizationName": {
            "type": "string",
            "description": "Loop: 1000B, Segment: NM1, Element: NM103"
          }
        },
        "required": [
          "organizationName"
        ]
      },
      "ReferenceIdentification": {
        "type": "object",
        "properties": {
          "qualifier": {
            "type": "string",
            "description": "Segment: REF, Element: REF01"
          },
          "identifier": {
            "type": "string",
            "description": "Segment: REF, Element: REF02"
          },
          "otherIdentifier": {
            "type": "string",
            "description": "Segment: REF, Element: REF03"
          }
        },
        "required": [
          "identifier",
          "qualifier"
        ]
      },
      "Referring": {
        "type": "object",
        "description": "Loop: 2420F",
        "properties": {
          "providerType": {
            "type": "string"
          },
          "npi": {
            "type": "string",
            "description": "NM109, Notes: National Provider Identifier"
          },
          "ssn": {
            "type": "string",
            "description": "REF02 when REF01=SY, Notes: The Social Security Number must be a string of nine numbers with no separators"
          },
          "employerId": {
            "type": "string",
            "description": "REF02 when REF01=EI, Notes: The Employer Identification Number must be a string of exactly nine numbers with no separators"
          },
          "commercialNumber": {
            "type": "string",
            "description": "REF02 when REF01=G2"
          },
          "locationNumber": {
            "type": "string",
            "description": "REF02 when REF01=LU"
          },
          "payerIdentificationNumber": {
            "type": "string",
            "description": "LOOP: 2010AC, Segment: REF, Element: REF02 when REF01=2U"
          },
          "employerIdentificationNumber": {
            "type": "string",
            "description": "LOOP: 2010AC, Segment: REF, Element: REF02 when REF01=EI"
          },
          "claimOfficeNumber": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: REF, Element: REF02 when REF01=FY"
          },
          "naic": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: REF, Element: REF02 when REF01=NF, Notes: National Association of Insurance Commissioners (NAIC) Code"
          },
          "stateLicenseNumber": {
            "type": "string",
            "description": "REF02 when REF01=0B"
          },
          "providerUpinNumber": {
            "type": "string",
            "description": "REF02 when REF01=1G, Notes: UPINs must be formatted as either X99999 or XXX999"
          },
          "taxonomyCode": {
            "type": "string",
            "description": "PRV03"
          },
          "firstName": {
            "type": "string",
            "description": "NM104"
          },
          "lastName": {
            "type": "string",
            "description": "NM103"
          },
          "middleName": {
            "type": "string",
            "description": "NM105"
          },
          "suffix": {
            "type": "string",
            "description": "NM107"
          },
          "organizationName": {
            "type": "string",
            "description": "NM103"
          },
          "address": {
            "$ref": "#/components/schemas/ClaimsAddress"
          },
          "contactInformation": {
            "$ref": "#/components/schemas/ClaimsContactInformation"
          }
        },
        "required": [
          "providerType"
        ]
      },
      "RejectReasonCode": {
        "type": "string",
        "description": "Loop: 2300, Segment: HCP, Element: HCP13, Note: Allowed Values are: 'T1' Cannot Identify Provider as TPO (Third Party Organization) Participant, 'T2' Cannot Identify Payer as TPO (Third Party Organization) Participant, 'T3' Cannot Identify Insured as TPO (Third Party Organization) Participant, 'T4' Payer Name or Identifier Missing, 'T5' Certification Information Missing, '16' Claim does not contain enough information for repricing",
        "enum": [
          "T1",
          "T2",
          "T3",
          "T4",
          "T5",
          "T6"
        ]
      },
      "RelationshipToSubscriberCode": {
        "type": "string",
        "description": "Loop: 2000C, Segment: PAT, Element: PAT01, Note: Allowed Values are: '01' Spouse, '19' Child, '20' Employee, '21'  Unknown, '39'  Organ Donor, '40'  Cadaver Donor, '53'  Life Partner, 'G8' Other Relationship",
        "enum": [
          "01",
          "19",
          "20",
          "39",
          "40",
          "53",
          "G8"
        ]
      },
      "ReleaseInformationCode": {
        "type": "string",
        "description": "Loop 2300, Segment: CLM, Element: CLM09, Note: Allowed Values are: 'I' Informed Consent to Release Medical Information for Conditions or Diagnoses Regulated by Federal Statutes, 'Y' Yes",
        "enum": [
          "I",
          "Y"
        ]
      },
      "ReleaseOfInformationCode": {
        "type": "string",
        "description": "Loop: 2320, Segment: OI, Element: OI04, Notes: Allowable values are 'I' Informed Consent to Release Medical Information, 'Y' Yes",
        "enum": [
          "I",
          "Y"
        ]
      },
      "Rendering": {
        "type": "object",
        "description": "Loop: 2420A",
        "properties": {
          "providerType": {
            "type": "string"
          },
          "npi": {
            "type": "string",
            "description": "NM109, Notes: National Provider Identifier"
          },
          "ssn": {
            "type": "string",
            "description": "REF02 when REF01=SY, Notes: The Social Security Number must be a string of nine numbers with no separators"
          },
          "employerId": {
            "type": "string",
            "description": "REF02 when REF01=EI, Notes: The Employer Identification Number must be a string of exactly nine numbers with no separators"
          },
          "commercialNumber": {
            "type": "string",
            "description": "REF02 when REF01=G2"
          },
          "locationNumber": {
            "type": "string",
            "description": "REF02 when REF01=LU"
          },
          "payerIdentificationNumber": {
            "type": "string",
            "description": "LOOP: 2010AC, Segment: REF, Element: REF02 when REF01=2U"
          },
          "employerIdentificationNumber": {
            "type": "string",
            "description": "LOOP: 2010AC, Segment: REF, Element: REF02 when REF01=EI"
          },
          "claimOfficeNumber": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: REF, Element: REF02 when REF01=FY"
          },
          "naic": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: REF, Element: REF02 when REF01=NF, Notes: National Association of Insurance Commissioners (NAIC) Code"
          },
          "stateLicenseNumber": {
            "type": "string",
            "description": "REF02 when REF01=0B"
          },
          "providerUpinNumber": {
            "type": "string",
            "description": "REF02 when REF01=1G, Notes: UPINs must be formatted as either X99999 or XXX999"
          },
          "taxonomyCode": {
            "type": "string",
            "description": "PRV03"
          },
          "firstName": {
            "type": "string",
            "description": "NM104"
          },
          "lastName": {
            "type": "string",
            "description": "NM103"
          },
          "middleName": {
            "type": "string",
            "description": "NM105"
          },
          "suffix": {
            "type": "string",
            "description": "NM107"
          },
          "organizationName": {
            "type": "string",
            "description": "NM103"
          },
          "address": {
            "$ref": "#/components/schemas/ClaimsAddress"
          },
          "contactInformation": {
            "$ref": "#/components/schemas/ClaimsContactInformation"
          }
        },
        "required": [
          "providerType"
        ]
      },
      "ReportInformation": {
        "type": "object",
        "properties": {
          "attachmentReportTypeCode": {
            "$ref": "#/components/schemas/AttachmentReportTypeCode"
          },
          "attachmentTransmissionCode": {
            "$ref": "#/components/schemas/ReportInformationAttachmentTransmissionCode"
          },
          "attachmentControlNumber": {
            "type": "string",
            "description": "Loop 2400, Segment: PWK, Element: PWK05"
          }
        },
        "required": [
          "attachmentReportTypeCode",
          "attachmentTransmissionCode"
        ]
      },
      "ReportInformationAttachmentTransmissionCode": {
        "type": "string",
        "description": "Loop: 2400, Segment: PWK, Element: PWK02 Allowed Values are: 'AA' Available on Request at Provider Site, 'BM' By Mail,'EL' Electronically Only, 'EM' E-Mail, 'FT' File Transfer, 'FX' By Fax",
        "enum": [
          "AA",
          "BM",
          "EL",
          "EM",
          "FT",
          "FX"
        ]
      },
      "RequestDependent": {
        "type": "object",
        "description": "Loop: 2000D, Notes: Dependent Detail",
        "properties": {
          "birthSequenceNumber": {
            "type": "string",
            "maxLength": 9,
            "minLength": 0,
            "pattern": "^[0-9]+$",
            "description": "Loop: 2100D Segment: INS, Element: INS17, Notes: Birth Sequence Number - must be exactly 9 positive unsigned numeric characters."
          },
          "individualRelationshipCode": {
            "$ref": "#/components/schemas/IndividualRelationshipCode"
          },
          "issueNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100D Segment: REF, Element: REF02, Notes: REF01=IF Issue Number"
          },
          "eligibilityCategory": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100D Segment: REF, Element: REF02, Notes: REF01=MRC Eligibility Category"
          },
          "memberId": {
            "type": "string",
            "maxLength": 80,
            "minLength": 2,
            "pattern": "^[A-Za-z0-9-]+$",
            "description": "Loop: 2100C and 2100D, Segment: MN1, Element: NM109, Notes: NM108=MI, memberId 2-80 alphanumeric characters"
          },
          "firstName": {
            "type": "string",
            "maxLength": 35,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: MN1, Element: NM104, Notes: firstName 1-35 alphanumeric characters"
          },
          "middleName": {
            "type": "string",
            "maxLength": 25,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: MN1, Element: NM105, Notes: middleName 1-25 alphanumeric characters"
          },
          "lastName": {
            "type": "string",
            "maxLength": 60,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: MN1, Element: NM103, Notes: lastName 1-60 alphanumeric characters"
          },
          "suffix": {
            "type": "string",
            "maxLength": 10,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: MN1, Element: NM107, Notes: lastName 1-10 alphanumeric characters"
          },
          "gender": {
            "$ref": "#/components/schemas/RequestDependentGender"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segment: DMG, Element: DMG02, Notes: date of birth in YYYYMMDD"
          },
          "ssn": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=SY Social Security Number"
          },
          "groupNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=6P Group Number"
          },
          "idCard": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=HJ Identity Card Number"
          },
          "providerCode": {
            "$ref": "#/components/schemas/RequestDependentProviderCode"
          },
          "referenceIdentificationQualifier": {
            "$ref": "#/components/schemas/RequestDependentReferenceIdentificationQualifier"
          },
          "providerIdentifier": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9]+$",
            "description": "Loop: 2100C and 2100D, Segment: PRV, Element: PRV03, Notes: Provider Identifier"
          },
          "beginningCardIssueDate": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: DTP, Element: DTP03, Notes: DTP01=102, DTP02=RD8 Retired"
          },
          "endCardIssueDate": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: DTP, Element: DTP03, Notes: DTP01=102, DTP02=RD8 Retired"
          },
          "idCardIssueDate": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: DTP, Element: DTP03, Notes: DTP01=102, DTP02=D8 Retired"
          },
          "planIssueDate": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: DTP, Element: DTP03, Notes: DTP01=291, DTP02=D8 Retired"
          },
          "beginningPlanIssueDate": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: DTP, Element: DTP03, Notes: DTP01=291, DTP02=RD8 Retired"
          },
          "endPlanIssueDate": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: DTP, Element: DTP03, Notes: DTP01=291, DTP02=RD8 Retired"
          },
          "healthCareCodeInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthCareInformation"
            },
            "maxItems": 8,
            "minItems": 0,
            "description": "Loop: 2100C and 2100D, Segment: HI, Element: HI01-1 HI01-2, Notes: Health Care Diagnosis"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "additionalIdentification": {
            "$ref": "#/components/schemas/AdditionalIdentification"
          }
        }
      },
      "RequestDependentGender": {
        "type": "string",
        "description": "Loop: 2100C and 2100D, Segment: DMG, Element: DMG03, Notes: gender 1 character 'M' or 'F'",
        "enum": [
          "M",
          "F"
        ]
      },
      "RequestDependentProviderCode": {
        "type": "string",
        "description": "Loop: 2100C and 2100D, Segment: PRV, Element: PRV01, Notes: Provider Code, Notes: Allowed Values are: 'AD' Admitting, 'AT' Attending, 'BI' Billing, 'CO' Consulting, 'CV' Covering, 'H' Hospital, 'HH' Home Health Care, 'LA' Laboratory, 'OT' Other Physician, 'P1' Pharmacist, 'P2' Pharmacy, 'PC' Primary Care Physician, 'PE' Performing, 'R' Rural Health Clinic, 'RF' Referring, 'SK' Skilled Nursing Facility, 'SU' Supervising",
        "enum": [
          "AD",
          "AT",
          "BI",
          "CO",
          "CV",
          "H",
          "HH",
          "LA",
          "OT",
          "P1",
          "P2",
          "PC",
          "PE",
          "R",
          "RF",
          "SK",
          "SU"
        ]
      },
      "RequestDependentReferenceIdentificationQualifier": {
        "type": "string",
        "description": "Loop: 2100C and 2100D, Segment: PRV, Element: PRV02, Notes: Allowed Values are: '9K' Servicer, 'D3' National Council for Prescription Drug Programs Pharmacy Number, 'EI' Employer's Identification Number, 'HPI' Centers for Medicare and Medicaid Services National Provider Identifier, 'PXC' Health Care Provider Taxonomy Code, 'SY' Social Security Number, 'TJ' Federal Taxpayer's Identification Number",
        "enum": [
          "9K",
          "D3",
          "EI",
          "HPI",
          "PXC",
          "SY",
          "TJ"
        ]
      },
      "RequestSubscriber": {
        "type": "object",
        "description": "Loop: 2100C, Notes: Subscriber Detail",
        "properties": {
          "birthSequenceNumber": {
            "type": "string",
            "maxLength": 9,
            "minLength": 0,
            "pattern": "^[0-9]+$",
            "description": "Loop: 2100C Segment: INS, Element: INS17, Notes: Birth Sequence Number - must be exactly 9 positive unsigned numeric characters."
          },
          "caseNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9]+$",
            "description": "Loop: 2100C Segment: REF, Element: REF02, Notes: REF01=3H Case Number"
          },
          "medicaidRecipientIdentificationNumber": {
            "type": "string",
            "maxLength": 80,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9]+$",
            "description": "Loop: 2110C Segment: REF, Element: REF02, Notes: REF01=NQ Medicaid Recipient Identification Number"
          },
          "spendDownAmount": {
            "type": "string",
            "maxLength": 18,
            "minLength": 0,
            "description": "Loop: 2110C Segment: ATM, Element: ATM02, Notes: ATM01=R Spend Down"
          },
          "spendDownTotalBilledAmount": {
            "type": "string",
            "maxLength": 18,
            "minLength": 0,
            "description": "Loop: 2110C Segment: ATM, Element: ATM02, Notes: ATM01=PB Billed Amount"
          },
          "coverageLevelCode": {
            "type": "string",
            "maxLength": 3,
            "minLength": 0,
            "description": "Loop: 2110C Segment: EQ, Element: EQ03, Notes: Retired, Not Used"
          },
          "memberId": {
            "type": "string",
            "maxLength": 80,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9-]+$",
            "description": "Loop: 2100C and 2100D, Segment: MN1, Element: NM109, Notes: NM108=MI, memberId 2-80 alphanumeric characters"
          },
          "firstName": {
            "type": "string",
            "maxLength": 35,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: MN1, Element: NM104, Notes: firstName 1-35 alphanumeric characters"
          },
          "middleName": {
            "type": "string",
            "maxLength": 25,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: MN1, Element: NM105, Notes: middleName 1-25 alphanumeric characters"
          },
          "lastName": {
            "type": "string",
            "maxLength": 60,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: MN1, Element: NM103, Notes: lastName 1-60 alphanumeric characters"
          },
          "suffix": {
            "type": "string",
            "maxLength": 10,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: MN1, Element: NM107, Notes: lastName 1-10 alphanumeric characters"
          },
          "gender": {
            "$ref": "#/components/schemas/RequestSubscriberGender"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segment: DMG, Element: DMG02, Notes: date of birth in YYYYMMDD"
          },
          "ssn": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=SY Social Security Number"
          },
          "groupNumber": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=6P Group Number"
          },
          "idCard": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "description": "Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=HJ Identity Card Number"
          },
          "providerCode": {
            "$ref": "#/components/schemas/RequestSubscriberProviderCode"
          },
          "referenceIdentificationQualifier": {
            "$ref": "#/components/schemas/RequestSubscriberReferenceIdentificationQualifier"
          },
          "providerIdentifier": {
            "type": "string",
            "maxLength": 50,
            "minLength": 0,
            "pattern": "^[A-Za-z0-9]+$",
            "description": "Loop: 2100C and 2100D, Segment: PRV, Element: PRV03, Notes: Provider Identifier"
          },
          "beginningCardIssueDate": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: DTP, Element: DTP03, Notes: DTP01=102, DTP02=RD8 Retired"
          },
          "endCardIssueDate": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: DTP, Element: DTP03, Notes: DTP01=102, DTP02=RD8 Retired"
          },
          "idCardIssueDate": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: DTP, Element: DTP03, Notes: DTP01=102, DTP02=D8 Retired"
          },
          "planIssueDate": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: DTP, Element: DTP03, Notes: DTP01=291, DTP02=D8 Retired"
          },
          "beginningPlanIssueDate": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: DTP, Element: DTP03, Notes: DTP01=291, DTP02=RD8 Retired"
          },
          "endPlanIssueDate": {
            "type": "string",
            "description": "Loop: 2110C and 2110D, Segment: DTP, Element: DTP03, Notes: DTP01=291, DTP02=RD8 Retired"
          },
          "healthCareCodeInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthCareInformation"
            },
            "maxItems": 8,
            "minItems": 0,
            "description": "Loop: 2100C and 2100D, Segment: HI, Element: HI01-1 HI01-2, Notes: Health Care Diagnosis"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "additionalIdentification": {
            "$ref": "#/components/schemas/AdditionalIdentification"
          }
        }
      },
      "RequestSubscriberGender": {
        "type": "string",
        "description": "Loop: 2100C and 2100D, Segment: DMG, Element: DMG03, Notes: gender 1 character 'M' or 'F'",
        "enum": [
          "M",
          "F"
        ]
      },
      "RequestSubscriberProviderCode": {
        "type": "string",
        "description": "Loop: 2100C and 2100D, Segment: PRV, Element: PRV01, Notes: Allowed Values are: 'AD' Admitting, 'AT' Attending, 'BI' Billing, 'CO' Consulting, 'CV' Covering, 'H' Hospital, 'HH' Home Health Care, 'LA' Laboratory, 'OT' Other Physician, 'P1' Pharmacist, 'P2' Pharmacy, 'PC' Primary Care Physician, 'PE' Performing, 'R' Rural Health Clinic, 'RF' Referring, 'SK' Skilled Nursing Facility, 'SU' Supervising",
        "enum": [
          "AD",
          "AT",
          "BI",
          "CO",
          "CV",
          "H",
          "HH",
          "LA",
          "OT",
          "P1",
          "P2",
          "PC",
          "PE",
          "R",
          "RF",
          "SK",
          "SU"
        ]
      },
      "RequestSubscriberReferenceIdentificationQualifier": {
        "type": "string",
        "description": "Loop: 2100C and 2100D, Segment: PRV, Element: PRV02, Notes: Allowed Values are: '9K' Servicer, 'D3' National Council for Prescription Drug Programs Pharmacy Number, 'EI' Employer's Identification Number, 'HPI' Centers for Medicare and Medicaid Services National Provider Identifier, 'PXC' Health Care Provider Taxonomy Code, 'SY' Social Security Number, 'TJ' Federal Taxpayer's Identification Number",
        "enum": [
          "9K",
          "D3",
          "EI",
          "HPI",
          "PXC",
          "SY",
          "TJ"
        ]
      },
      "ResourceConflictExceptionResponseContent": {
        "type": "object",
        "description": "The server could not process the request because of conflict in the current state of the resource.",
        "properties": {
          "message": {
            "type": "string",
            "description": "Human readable exception message."
          },
          "code": {
            "type": "string",
            "description": "Classification of the exception type."
          }
        },
        "required": [
          "message"
        ]
      },
      "ResourceNotFoundExceptionResponseContent": {
        "type": "object",
        "description": "The server response when the specified resource cannot be found after an API request passes authentication and authorization.",
        "properties": {
          "message": {
            "type": "string",
            "description": "Human readable exception message."
          },
          "code": {
            "type": "string",
            "description": "Classification of the exception type."
          }
        },
        "required": [
          "message"
        ]
      },
      "ResourceUnderChangeExceptionResponseContent": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Human readable exception message."
          }
        },
        "required": [
          "message"
        ]
      },
      "ResponseMember": {
        "type": "object",
        "description": "ResponseMember",
        "properties": {
          "healthCareDiagnosisCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthCareDiagnosisCode"
            }
          },
          "memberId": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: NM1, Element: NM109, Notes: NM108=MI Member Identification Number"
          },
          "firstName": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: NM1, Element: NM104, Notes: First Name"
          },
          "lastName": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: NM1, Element: NM103, Notes: Last Name"
          },
          "middleName": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: NM1 Element: NM105, Notes: Middle Name"
          },
          "suffix": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: NM1, Element: NM107, Notes: suffix"
          },
          "gender": {
            "$ref": "#/components/schemas/ResponseMemberGender"
          },
          "entityIdentifier": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: NM1, Element: NM101, Notes: entityIdentifier"
          },
          "entityType": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: NM1, Element: NM102, Notes: entityType"
          },
          "uniqueHealthIdentifier": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: NM1, Element: NM109, Notes: NM108=II uniqueHealthIdentifier"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: DMG, Element: DMG02, Notes: Date of Birth"
          },
          "informationStatusCode": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI01, Notes: Information Status Code"
          },
          "employmentStatusCode": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI02, Notes: Employment Status Code"
          },
          "governmentServiceAffiliationCode": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI03, Notes: Government Service Affiliation Code"
          },
          "description": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI04, Notes: Description"
          },
          "militaryServiceRankCode": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI05, Notes: Military Service Rank Code"
          },
          "dateTimePeriodFormatQualifier": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI06, Notes: Date Time Period Format Qualifier"
          },
          "dateTimePeriod": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI07, Notes: MPI06=D8 Date Time Period"
          },
          "endDateTimePeriod": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI08, Notes: MPI06=RD8 Date Time Period"
          },
          "startDateTimePeriod": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI08, Notes: MPI06=RD8 Date Time Period"
          },
          "ssn": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: REF, Element: REF02, Notes: REF01=SY Social Security Number"
          },
          "groupNumber": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: REF, Element: REF02, Notes: REF01=6P Group Number"
          },
          "planNumber": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: REF, Element: REF02, Notes: REF01=18 Plan Number"
          },
          "planNetworkIdNumber": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: REF, Element: REF02, Notes: REF01=N6 Plan Network Identification Number"
          },
          "relationToSubscriber": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: INS, Element: INS02, Notes: Individual Relationship Code"
          },
          "relationToSubscriberCode": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: INS, Element: INS02, Notes: Individual Relationship Code"
          },
          "insuredIndicator": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: INS, Element: INS01, Notes: Insured Indicator"
          },
          "maintenanceTypeCode": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: INS, Element: INS03, Notes: Maintenance Type Code"
          },
          "maintenanceReasonCode": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: INS, Element: INS04, Notes: Maintenance Reason Code"
          },
          "birthSequenceNumber": {
            "type": "string",
            "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: INS, Element: INS17, Notes: Birth Sequence Number Use to indicate the birth order in the event of multiple births in association with the birth date supplied in DMG02"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "responseProvider": {
            "$ref": "#/components/schemas/ResponseProvider"
          },
          "aaaErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ResponseMemberGender": {
        "type": "string",
        "description": "Loop: 2000C, 2000D, 2100C, 2100D, Segment: DMG, Element: DMG03, Notes: gender",
        "enum": [
          "M",
          "F",
          "U"
        ]
      },
      "ResponseMeta": {
        "type": "object",
        "description": "Meta data about the request",
        "properties": {
          "submitterId": {
            "type": "string",
            "description": "submitterId assigned to this request"
          },
          "senderId": {
            "type": "string",
            "description": "senderId assigned to this request"
          },
          "billerId": {
            "type": "string",
            "description": "billerId assigned to this request"
          },
          "traceId": {
            "type": "string",
            "description": "Unique Id assigned to each request by Optum"
          },
          "applicationMode": {
            "type": "string",
            "description": "Used by Optum to identify where this request can be found for support"
          }
        }
      },
      "ResponseProvider": {
        "type": "object",
        "description": "Provider",
        "properties": {
          "providerName": {
            "type": "string",
            "description": "Loop: 2100B, Segment: NM1, Element: NM103, Notes: Name Last"
          },
          "providerFirstName": {
            "type": "string",
            "description": "Loop: 2100B, Segment: NM1, Element: NM104, Notes: Name First"
          },
          "providerOrgName": {
            "type": "string",
            "description": "Loop: 2100B, Segment: NM1, Element: NM103, Notes: Organization Name"
          },
          "middleName": {
            "type": "string",
            "description": "Loop: 2100B, Segment: NM1, Element: NM105, Notes: Name Middle"
          },
          "suffix": {
            "type": "string",
            "description": "Loop: 2100B, Segment: NM1, Element: NM107, Notes: suffix"
          },
          "entityIdentifier": {
            "type": "string",
            "description": "Loop: 2100B, Segment: NM1, Element: NM101, Notes: Entity Identifier Code"
          },
          "entityType": {
            "type": "string",
            "description": "Loop: 2100B, Segment: NM1, Element: NM102, Notes: Entity Type Qualifier"
          },
          "npi": {
            "type": "string",
            "description": "Loop: 2100B, Segment: NM1, Element: NM109, Notes: NM108=XX Centers for Medicare and Medicaid Services National Provider Identifier"
          },
          "providerCode": {
            "type": "string",
            "description": "Loop: 2100B, 2100C and 2100D, Segment: PRV, Element: PRV01, Notes: Provider Code"
          },
          "referenceIdentification": {
            "type": "string",
            "description": "Loop: 2100C, 2100C and 2100D, Segment: PRV, Element: PRV03, Notes: PRV02=PXC Reference Identification"
          },
          "employersId": {
            "type": "string",
            "description": "Loop: 2100B, Segment: NM1, Element: NM109, Notes: NM108=24 Employer's Identification Number"
          },
          "ssn": {
            "type": "string",
            "description": "Loop: 2100B, Segment: NM1, Element: NM109, Notes: NM108=34 Social Security Number"
          },
          "federalTaxpayersIdNumber": {
            "type": "string",
            "description": "Loop: 2100B, Segment: NM1, Element: NM109, Notes: NM108=FI Federal Taxpayer's Identification Number"
          },
          "payorIdentification": {
            "type": "string",
            "description": "Loop: 2100B, Segment: NM1, Element: NM109, Notes: NM108=PI Payor Identification"
          },
          "pharmacyProcessorNumber": {
            "type": "string",
            "description": "Loop: 2100B, Segment: NM1, Element: NM109, Notes: NM108=PP Pharmacy Processor Number"
          },
          "serviceProviderNumber": {
            "type": "string",
            "description": "Loop: 2100B, Segment: NM1, Element: NM109, Notes: NM108=SV Service Provider Number"
          },
          "servicesPlanID": {
            "type": "string",
            "description": "Loop: 2100B, Segment: NM1, Element: NM109, Notes: NM108=XV Centers for Medicare and Medicaid Services PlanID"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "aaaErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ResponseType": {
        "type": "string",
        "enum": [
          "stedi",
          "change-alpha",
          "change-beta"
        ]
      },
      "RetryEventResponseContent": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "description": "The ID of the newly retried event."
          }
        }
      },
      "SecondaryIdentifierTypeCode": {
        "type": "string",
        "description": "Loop: 2010AC, Segment: REF, Element: REF01, Notes: '2U Payer Identification Number, 'FY' Claim Office Number, 'NF National Association of Insurance Commissioners'",
        "enum": [
          "2U",
          "FY",
          "NF"
        ]
      },
      "ServiceAuthorizationExceptionCode": {
        "type": "string",
        "description": "Loop: 2300, Segment: REF, Element: REF02 and REF01=4N, Note: '1' Immediate/Urgent Care, '2' Services Rendered in a Retroactive Period, '3' Emergency Care, '4' Client has Temporary Medicaid, '5' Request from County for Second Opinion to Determine if Recipient Can Work, '6' Request for Override Pending, '7' Special Handling, Null",
        "enum": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6",
          "7"
        ]
      },
      "ServiceExceptionResponseContent": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Human readable exception message."
          },
          "cause": {
            "$ref": "#/components/schemas/ExceptionCause"
          }
        },
        "required": [
          "message"
        ]
      },
      "ServiceFacilityLocation": {
        "type": "object",
        "properties": {
          "organizationName": {
            "type": "string",
            "description": "Loop: 2420C, Segment: NM1, Element: NM103"
          },
          "address": {
            "$ref": "#/components/schemas/ClaimsAddress"
          },
          "npi": {
            "type": "string",
            "description": "Loop: 2420C, Segment: NM1, Element: NM109, Note: National Provider Identifier"
          },
          "secondaryIdentifier": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceIdentification"
            },
            "maxItems": 3,
            "minItems": 0,
            "description": "Loop: 2420C: Segment: REF, Notes: A list containing qualifier (REF01), identifier (REF02), and otherIdentifier(REF04)"
          },
          "phoneName": {
            "type": "string",
            "description": "Loop: 2310C, Segment: PER, Element: PER02"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Loop: 2310C, Segment: PER, Element: PER04"
          },
          "phoneExtension": {
            "type": "string",
            "description": "Loop: 2310C, Segment: PER, Element: PER06"
          }
        },
        "required": [
          "address",
          "organizationName"
        ]
      },
      "ServiceLine": {
        "type": "object",
        "description": "Loop 2400",
        "properties": {
          "assignedNumber": {
            "type": "string",
            "description": "Loop: 2400, Segment: LX, Element: LX01"
          },
          "serviceDate": {
            "type": "string",
            "description": "Loop: 2400, Segment: DTP, Element: DTP03, Notes: When sent with serviceDateEnd it will be used as the start date for Date Time period, if sent without serviceDateEnd will use DTP02 = D8. Expressed in Format CCYYMMDD"
          },
          "serviceDateEnd": {
            "type": "string",
            "description": "Loop: 2400, Segment: DTP, Element: DTP03, Notes: Range of Dates Expressed in Format CCYYMMDD"
          },
          "providerControlNumber": {
            "type": "string",
            "description": "Loop: 2400, Segment: REF, Element: REF04-02 when REF01=6R"
          },
          "professionalService": {
            "$ref": "#/components/schemas/ProfessionalService"
          },
          "durableMedicalEquipmentService": {
            "$ref": "#/components/schemas/DurableMedicalEquipmentService"
          },
          "serviceLineSupplementalInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportInformation"
            },
            "maxItems": 10,
            "minItems": 0
          },
          "durableMedicalEquipmentCertificateOfMedicalNecessity": {
            "$ref": "#/components/schemas/DurableMedicalEquipmentCertificateOfMedicalNecessity"
          },
          "ambulanceTransportInformation": {
            "$ref": "#/components/schemas/AmbulanceTransportInformation"
          },
          "durableMedicalEquipmentCertification": {
            "$ref": "#/components/schemas/DurableMedicalEquipmentCertification"
          },
          "ambulanceCertification": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AmbulanceCertification"
            },
            "maxItems": 3,
            "minItems": 0
          },
          "hospiceEmployeeIndicator": {
            "type": "boolean",
            "description": "Loop: 2400, Segment: CRC, Element: CRC02 Notes: True or False"
          },
          "conditionIndicatorDurableMedicalEquipment": {
            "$ref": "#/components/schemas/ConditionIndicatorDurableMedicalEquipment"
          },
          "serviceLineDateInformation": {
            "$ref": "#/components/schemas/ServiceLineDateInformation"
          },
          "ambulancePatientCount": {
            "type": "number",
            "description": "Loop: 2400, Segment: QTY, Element: QTY02 when QTY01=PT"
          },
          "obstetricAnesthesiaAdditionalUnits": {
            "type": "number",
            "description": "Loop: 2400, Segment: QTY, Element: QTY02 when QTY01=FL"
          },
          "testResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Measurements"
            },
            "maxItems": 5,
            "minItems": 0
          },
          "contractInformation": {
            "$ref": "#/components/schemas/ContractInformation"
          },
          "serviceLineReferenceInformation": {
            "$ref": "#/components/schemas/ServiceLineReferenceInformation"
          },
          "salesTaxAmount": {
            "type": "string",
            "description": "Loop: 2400, Segment: AMT, Element: AMT02 when AMT01=T"
          },
          "postageTaxAmount": {
            "type": "string",
            "description": "Loop: 2400, Segment: AMT, Element: AMT02 when AMT01=F4"
          },
          "fileInformation": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 10,
            "minItems": 0,
            "description": "Loop: 2400, Segment: K3, Element: K301"
          },
          "additionalNotes": {
            "type": "string",
            "description": "Loop: 2400, Segment: NTE, Element: NTE02 when NTE01=ADD"
          },
          "goalRehabOrDischargePlans": {
            "type": "string",
            "description": "Loop: 2400, Segment: NTE, Element: NTE02 when NTE01=DCP"
          },
          "thirdPartyOrganizationNotes": {
            "type": "string",
            "description": "Loop: 2400, Segment: NTE, Element: NTE02 when NTE01=TPO"
          },
          "purchasedServiceInformation": {
            "$ref": "#/components/schemas/PurchasedServiceInformation"
          },
          "linePricingRepricingInformation": {
            "$ref": "#/components/schemas/ClaimPricingRepricingInformation"
          },
          "drugIdentification": {
            "$ref": "#/components/schemas/DrugIdentification"
          },
          "renderingProvider": {
            "$ref": "#/components/schemas/ServiceLineProvider"
          },
          "purchasedServiceProvider": {
            "$ref": "#/components/schemas/ServiceLineProvider"
          },
          "serviceFacilityLocation": {
            "$ref": "#/components/schemas/ServiceFacilityLocation"
          },
          "supervisingProvider": {
            "$ref": "#/components/schemas/ServiceLineProvider"
          },
          "orderingProvider": {
            "$ref": "#/components/schemas/ServiceLineOrderingProvider"
          },
          "referringProvider": {
            "$ref": "#/components/schemas/ServiceLineProvider"
          },
          "ambulancePickUpLocation": {
            "$ref": "#/components/schemas/ClaimsAddress"
          },
          "ambulanceDropOffLocation": {
            "$ref": "#/components/schemas/ClaimsAddress"
          },
          "lineAdjudicationInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineAdjudicationInformation"
            },
            "maxItems": 15,
            "minItems": 0
          },
          "formIdentification": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormIdentification"
            }
          }
        },
        "required": [
          "professionalService",
          "serviceDate"
        ]
      },
      "ServiceLineDateInformation": {
        "type": "object",
        "properties": {
          "prescriptionDate": {
            "type": "string",
            "description": "Loop: 2400, Segment: DPT, Element: DTP03 when DPT01=471, Notes: Date Expressed in Format CCYYMMDD"
          },
          "certificationRevisionOrRecertificationDate": {
            "type": "string",
            "description": "Loop: 2400, Segment: DPT, Element: DTP03 when DPT01=607, Notes: Date Expressed in Format CCYYMMDD"
          },
          "beginTherapyDate": {
            "type": "string",
            "description": "Loop: 2400, Segment: DPT, Element: DTP03 when DPT01=463, Notes: Date Expressed in Format CCYYMMDD"
          },
          "lastCertificationDate": {
            "type": "string",
            "description": "Loop: 2400, Segment: DPT, Element: DTP03 when DPT01=461, Notes: Date Expressed in Format CCYYMMDD"
          },
          "treatmentOrTherapyDate": {
            "type": "string",
            "description": "Loop: 2400, Segment: DPT, Element: DTP03 when DPT01=304, Notes: Date Expressed in Format CCYYMMDD"
          },
          "hemoglobinTestDate": {
            "type": "string",
            "description": "Loop: 2400, Segment: DPT, Element: DTP03 when DPT01=738, Notes: Date Expressed in Format CCYYMMDD"
          },
          "serumCreatineTestDate": {
            "type": "string",
            "description": "Loop: 2400, Segment: DPT, Element: DTP03 when DPT01=739, Notes: Date Expressed in Format CCYYMMDD"
          },
          "shippedDate": {
            "type": "string",
            "description": "Loop: 2400, Segment: DPT, Element: DTP03 when DPT01=011, Notes: Date Expressed in Format CCYYMMDD"
          },
          "lastXRayDate": {
            "type": "string",
            "description": "Loop: 2400, Segment: DPT, Element: DTP03 when DPT01=455, Notes: Date Expressed in Format CCYYMMDD"
          },
          "initialTreatmentDate": {
            "type": "string",
            "description": "Loop: 2400, Segment: DPT, Element: DTP03 when DPT01=454, Notes: Date Expressed in Format CCYYMMDD"
          }
        }
      },
      "ServiceLineOrderingProvider": {
        "type": "object",
        "properties": {
          "providerType": {
            "type": "string"
          },
          "npi": {
            "type": "string",
            "description": "NM109, Notes: National Provider Identifier"
          },
          "ssn": {
            "type": "string",
            "description": "REF02 when REF01=SY, Notes: The Social Security Number must be a string of nine numbers with no separators"
          },
          "employerId": {
            "type": "string",
            "description": "REF02 when REF01=EI, Notes: The Employer Identification Number must be a string of exactly nine numbers with no separators"
          },
          "commercialNumber": {
            "type": "string",
            "description": "REF02 when REF01=G2"
          },
          "locationNumber": {
            "type": "string",
            "description": "REF02 when REF01=LU"
          },
          "payerIdentificationNumber": {
            "type": "string",
            "description": "LOOP: 2010AC, Segment: REF, Element: REF02 when REF01=2U"
          },
          "employerIdentificationNumber": {
            "type": "string",
            "description": "LOOP: 2010AC, Segment: REF, Element: REF02 when REF01=EI"
          },
          "claimOfficeNumber": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: REF, Element: REF02 when REF01=FY"
          },
          "naic": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: REF, Element: REF02 when REF01=NF, Notes: National Association of Insurance Commissioners (NAIC) Code"
          },
          "stateLicenseNumber": {
            "type": "string",
            "description": "REF02 when REF01=0B"
          },
          "providerUpinNumber": {
            "type": "string",
            "description": "REF02 when REF01=1G, Notes: UPINs must be formatted as either X99999 or XXX999"
          },
          "taxonomyCode": {
            "type": "string",
            "description": "PRV03"
          },
          "firstName": {
            "type": "string",
            "description": "NM104"
          },
          "lastName": {
            "type": "string",
            "description": "NM103"
          },
          "middleName": {
            "type": "string",
            "description": "NM105"
          },
          "suffix": {
            "type": "string",
            "description": "NM107"
          },
          "organizationName": {
            "type": "string",
            "description": "NM103"
          },
          "address": {
            "$ref": "#/components/schemas/ClaimsAddress"
          },
          "contactInformation": {
            "$ref": "#/components/schemas/ContactInformationOrderingProvider"
          },
          "otherIdentifier": {
            "type": "string"
          },
          "secondaryIdentifier": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceIdentification"
            },
            "maxItems": 20,
            "minItems": 0
          }
        },
        "required": [
          "providerType"
        ]
      },
      "ServiceLineProvider": {
        "type": "object",
        "properties": {
          "providerType": {
            "type": "string"
          },
          "npi": {
            "type": "string",
            "description": "NM109, Notes: National Provider Identifier"
          },
          "ssn": {
            "type": "string",
            "description": "REF02 when REF01=SY, Notes: The Social Security Number must be a string of nine numbers with no separators"
          },
          "employerId": {
            "type": "string",
            "description": "REF02 when REF01=EI, Notes: The Employer Identification Number must be a string of exactly nine numbers with no separators"
          },
          "commercialNumber": {
            "type": "string",
            "description": "REF02 when REF01=G2"
          },
          "locationNumber": {
            "type": "string",
            "description": "REF02 when REF01=LU"
          },
          "payerIdentificationNumber": {
            "type": "string",
            "description": "LOOP: 2010AC, Segment: REF, Element: REF02 when REF01=2U"
          },
          "employerIdentificationNumber": {
            "type": "string",
            "description": "LOOP: 2010AC, Segment: REF, Element: REF02 when REF01=EI"
          },
          "claimOfficeNumber": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: REF, Element: REF02 when REF01=FY"
          },
          "naic": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: REF, Element: REF02 when REF01=NF, Notes: National Association of Insurance Commissioners (NAIC) Code"
          },
          "stateLicenseNumber": {
            "type": "string",
            "description": "REF02 when REF01=0B"
          },
          "providerUpinNumber": {
            "type": "string",
            "description": "REF02 when REF01=1G, Notes: UPINs must be formatted as either X99999 or XXX999"
          },
          "taxonomyCode": {
            "type": "string",
            "description": "PRV03"
          },
          "firstName": {
            "type": "string",
            "description": "NM104"
          },
          "lastName": {
            "type": "string",
            "description": "NM103"
          },
          "middleName": {
            "type": "string",
            "description": "NM105"
          },
          "suffix": {
            "type": "string",
            "description": "NM107"
          },
          "organizationName": {
            "type": "string",
            "description": "NM103"
          },
          "address": {
            "$ref": "#/components/schemas/ClaimsAddress"
          },
          "contactInformation": {
            "$ref": "#/components/schemas/ClaimsContactInformation"
          },
          "otherIdentifier": {
            "type": "string"
          },
          "secondaryIdentifier": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceIdentification"
            },
            "maxItems": 20,
            "minItems": 0
          }
        },
        "required": [
          "providerType"
        ]
      },
      "ServiceLineReferenceInformation": {
        "type": "object",
        "properties": {
          "repricedLineItemReferenceNumber": {
            "type": "string",
            "description": "Loop: 2400, Segment: REF, Element: REF02 Notes: When REF01=9B"
          },
          "adjustedRepricedLineItemReferenceNumber": {
            "type": "string",
            "description": "Loop: 2400, Segment: REF, Element: REF02 Note: When REF01=9D"
          },
          "priorAuthorization": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriorAuthorization"
            },
            "maxItems": 5,
            "minItems": 0,
            "description": "Loop 2400 REF"
          },
          "mammographyCertificationNumber": {
            "type": "string",
            "description": "Loop: 2400, Segment: REF, Element: REF02 Note: When REF01=EW"
          },
          "clinicalLaboratoryImprovementAmendmentNumber": {
            "type": "string",
            "description": "Loop: 2400, Segment: REF, Element: REF02 Note: When REF01=X4"
          },
          "referringCliaNumber": {
            "type": "string",
            "description": "Loop: 2400, Segment: REF, Element: REF02 Note: When REF01=F4"
          },
          "immunizationBatchNumber": {
            "type": "string",
            "description": "Loop: 2400, Segment: REF, Element: REF02 Note: When REF01=BT"
          },
          "referralNumber": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 5,
            "minItems": 0,
            "description": "Loop: 2400, Segment: REF, Element: REF Note: When REF01=9F"
          }
        }
      },
      "ServiceUnavailableExceptionResponseContent": {
        "type": "object",
        "description": "The server cannot handle the request due to technical reasons.",
        "properties": {
          "message": {
            "type": "string",
            "description": "Human readable exception message."
          },
          "code": {
            "type": "string",
            "description": "Classification of the exception type."
          }
        },
        "required": [
          "message"
        ]
      },
      "SignatureIndicator": {
        "type": "string",
        "description": "Loop 2300, Segment: CLM, Element: CLM06, Note: Allowed Values are: 'N' NO, 'Y' Yes",
        "enum": [
          "N",
          "Y"
        ]
      },
      "SpecialProgramCode": {
        "type": "string",
        "description": "Loop 2300, Segment: CLM, Element: CLM12, Note: Allowed Values are: '02' Physically Handicapped Children's Program, '03' Special Federal Funding, '05' Disabolity, '09' Second Opinion or Surgery",
        "enum": [
          "02",
          "03",
          "05",
          "09"
        ]
      },
      "SpinalManipulationServiceInformation": {
        "type": "object",
        "description": "Loop 2300, Segment: CR2",
        "properties": {
          "patientConditionCode": {
            "type": "string",
            "description": "Loop: 2300, Segment: CR, Element: CR208"
          },
          "patientConditionDescription1": {
            "$ref": "#/components/schemas/PatientConditionDescription1"
          },
          "patientConditionDescription2": {
            "type": "string",
            "description": "Loop: 2300, Segment: CR, Element: CR211"
          }
        },
        "required": [
          "patientConditionCode"
        ]
      },
      "Submitter": {
        "type": "object",
        "description": "Loop: 1000A",
        "properties": {
          "organizationName": {
            "type": "string",
            "description": "Loop: 1000A,  Segment: NM1, Element: NM103"
          },
          "lastName": {
            "type": "string",
            "description": "Loop: 1000A,  Segment: NM1, Element: NM103"
          },
          "firstName": {
            "type": "string",
            "description": "Loop: 1000A,  Segment: NM1, Element: NM104"
          },
          "middleName": {
            "type": "string",
            "description": "Loop: 1000A,  Segment: NM1, Element: NM105"
          },
          "contactInformation": {
            "$ref": "#/components/schemas/ClaimsContactInformation"
          }
        },
        "required": [
          "contactInformation"
        ]
      },
      "Subscriber": {
        "type": "object",
        "description": "Loop: 2000B",
        "properties": {
          "memberId": {
            "type": "string",
            "description": "Loop: 2010BA,  Segment: NM1, Element: NM109"
          },
          "ssn": {
            "type": "string",
            "description": "Loop: 2010BA,  Segment: REF, Element: REF02 when REF01=SY"
          },
          "paymentResponsibilityLevelCode": {
            "$ref": "#/components/schemas/SubscriberPaymentResponsibilityLevelCode"
          },
          "organizationName": {
            "type": "string",
            "description": "Loop: 2010BA, Segment: NM1, Element: NM103 when NM102=2, Notes: when subscriber is organization pass patient as dependent"
          },
          "insuranceTypeCode": {
            "$ref": "#/components/schemas/SubscriberInsuranceTypeCode"
          },
          "subscriberGroupName": {
            "type": "string",
            "description": "Loop: 2000B,  Segment: SBR, Element: SBR04 Notes: Freeform text"
          },
          "firstName": {
            "type": "string",
            "description": "Loop: 2010BA,  Segment: NM1, Element: NM104"
          },
          "lastName": {
            "type": "string",
            "description": "Loop: 2010BA,  Segment: NM1, Element: NM103"
          },
          "middleName": {
            "type": "string",
            "description": "Loop: 2010BA,  Segment: NM, Element: NM105"
          },
          "suffix": {
            "type": "string",
            "description": "Loop: 2010BA,  Segment: NM, Element: NM107"
          },
          "gender": {
            "$ref": "#/components/schemas/SubscriberGender"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Loop: 2010BA,  Segment: DMG, Element: DMG02"
          },
          "policyNumber": {
            "type": "string",
            "description": "Loop: 2000B,  Segment: SBR, Element: SBR03"
          },
          "groupNumber": {
            "type": "string",
            "description": "Loop: 2010BA,  Segment: SBR, Element: SBR04"
          },
          "contactInformation": {
            "$ref": "#/components/schemas/ClaimsContactInformation"
          },
          "address": {
            "$ref": "#/components/schemas/ClaimsAddress"
          }
        },
        "required": [
          "paymentResponsibilityLevelCode"
        ]
      },
      "SubscriberGender": {
        "type": "string",
        "description": "Loop: 2010BA,  Segment: DMG, Element: DMG03 Subscriber Gender, Notes: 'M' Male, 'F' Female'U' Unknown",
        "enum": [
          "M",
          "F",
          "U"
        ]
      },
      "SubscriberInsuranceTypeCode": {
        "type": "string",
        "description": "Loop: 2000B,  Segment: SBR, Element:SBR05 Notes: Allowed values: '12' Medicare Secondary Working Aged Beneficiary or Spouse with Employer Group Health Plan, '13' Medicare Secondary End-Stage Renal Disease Beneficiary in the Mandated Coordination Period with an Employer's Group Health Plan, '14' Medicare Secondary, No-fault Insurance including Auto is Primary, '15' Medicare Secondary Worker's Compensation, '16' Medicare Secondary Public Health Service (PHS)or Other Federal Agency, '41' Medicare Secondary Black Lung, '42' Medicare Secondary Veteran's Administration, '43' Medicare Secondary Disabled Beneficiary Under Age 65 with Large Group Health Plan (LGHP), '47' Medicare Secondary, Other Liability Insurance is Primary",
        "enum": [
          "12",
          "13",
          "14",
          "15",
          "16",
          "41",
          "42",
          "43",
          "47"
        ]
      },
      "SubscriberPaymentResponsibilityLevelCode": {
        "type": "string",
        "description": "Loop: 2000B, Segment: SBR, Element: SBR01, Allowed Values:'A' Payer Responsibility Four 'B' Payer Responsibility Five 'C' Payer Responsibility Six 'D' Payer Responsibility Seven 'E' Payer Responsibility Eight 'F' Payer Responsibility Nine 'G' Payer Responsibility Ten 'H' Payer Responsibility Eleven 'P' Primary 'S' Secondary 'T' Tertiary 'U' Unknown",
        "enum": [
          "A",
          "B",
          "C",
          "D",
          "E",
          "F",
          "G",
          "H",
          "P",
          "S",
          "T",
          "U"
        ]
      },
      "SubscriberTraceNumber": {
        "type": "object",
        "description": "SubscriberTraceNumber",
        "properties": {
          "traceTypeCode": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segment: TRN, Element: TRN01, Notes: Trace Type Code"
          },
          "traceType": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segment: TRN, Element: TRN01, Notes: Trace Type"
          },
          "referenceIdentification": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segment: TRN, Element: TRN02, Notes: Reference Identification"
          },
          "originatingCompanyIdentifier": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segment: TRN, Element: TRN03, Notes: Originating Company Identifier"
          },
          "secondaryReferenceIdentification": {
            "type": "string",
            "description": "Loop: 2100C and 2100D, Segment: TRN, Element: TRN04, Notes: Originating Company Identifier"
          }
        }
      },
      "Supervising": {
        "type": "object",
        "description": "Loop: 2420D",
        "properties": {
          "providerType": {
            "type": "string"
          },
          "npi": {
            "type": "string",
            "description": "NM109, Notes: National Provider Identifier"
          },
          "ssn": {
            "type": "string",
            "description": "REF02 when REF01=SY, Notes: The Social Security Number must be a string of nine numbers with no separators"
          },
          "employerId": {
            "type": "string",
            "description": "REF02 when REF01=EI, Notes: The Employer Identification Number must be a string of exactly nine numbers with no separators"
          },
          "commercialNumber": {
            "type": "string",
            "description": "REF02 when REF01=G2"
          },
          "locationNumber": {
            "type": "string",
            "description": "REF02 when REF01=LU"
          },
          "payerIdentificationNumber": {
            "type": "string",
            "description": "LOOP: 2010AC, Segment: REF, Element: REF02 when REF01=2U"
          },
          "employerIdentificationNumber": {
            "type": "string",
            "description": "LOOP: 2010AC, Segment: REF, Element: REF02 when REF01=EI"
          },
          "claimOfficeNumber": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: REF, Element: REF02 when REF01=FY"
          },
          "naic": {
            "type": "string",
            "description": "Loop: 2010AC, Segment: REF, Element: REF02 when REF01=NF, Notes: National Association of Insurance Commissioners (NAIC) Code"
          },
          "stateLicenseNumber": {
            "type": "string",
            "description": "REF02 when REF01=0B"
          },
          "providerUpinNumber": {
            "type": "string",
            "description": "REF02 when REF01=1G, Notes: UPINs must be formatted as either X99999 or XXX999"
          },
          "taxonomyCode": {
            "type": "string",
            "description": "PRV03"
          },
          "firstName": {
            "type": "string",
            "description": "NM104"
          },
          "lastName": {
            "type": "string",
            "description": "NM103"
          },
          "middleName": {
            "type": "string",
            "description": "NM105"
          },
          "suffix": {
            "type": "string",
            "description": "NM107"
          },
          "organizationName": {
            "type": "string",
            "description": "NM103"
          },
          "address": {
            "$ref": "#/components/schemas/ClaimsAddress"
          },
          "contactInformation": {
            "$ref": "#/components/schemas/ClaimsContactInformation"
          }
        },
        "required": [
          "providerType"
        ]
      },
      "SupportingDocumentation": {
        "type": "object",
        "description": "Loop: 2440, Segment: FRM",
        "properties": {
          "questionNumber": {
            "type": "string",
            "description": "Loop: 2440,  Segment: FRM, Element: FRM01"
          },
          "questionResponseCode": {
            "$ref": "#/components/schemas/QuestionResponseCode"
          },
          "questionResponse": {
            "type": "string",
            "description": "Loop: 2440,  Segment: FRM, Element: FRM03"
          },
          "questionResponseAsDate": {
            "type": "string",
            "description": "Loop: 2440,  Segment: FRM, Element: FRM04"
          },
          "questionResponseAsPercent": {
            "type": "string",
            "description": "Loop: 2440,  Segment: FRM, Element: FRM05"
          }
        },
        "required": [
          "questionNumber"
        ]
      },
      "ThrottlingExceptionResponseContent": {
        "type": "object",
        "description": "The server response when usage plan or account-level throttling limits exceeded.",
        "properties": {
          "message": {
            "type": "string",
            "description": "Human readable exception message."
          },
          "code": {
            "type": "string",
            "description": "Classification of the exception type."
          }
        },
        "required": [
          "message"
        ]
      },
      "TransactionFragmentsSummary": {
        "type": "object",
        "properties": {
          "keyName": {
            "type": "string"
          },
          "fragmentCount": {
            "type": "number"
          },
          "batchSize": {
            "type": "number"
          }
        },
        "required": [
          "batchSize",
          "fragmentCount",
          "keyName"
        ]
      },
      "TransactionGroup": {
        "type": "object",
        "description": "JSON object containing data for one or more EDI transactions in [Guide JSON](/operate/generate-edi#format-transaction-data) format.",
        "properties": {
          "transactionSettingId": {
            "type": "string",
            "maxLength": 32,
            "pattern": "^([a-zA-Z0-9_-]+)$",
            "description": "A unique ID outbound transaction setting Stedi should use to determine the correct guide for validation and generation. To find this ID, go to the partnership and use the **Transaction Setting ID** field for the outbound transaction setting."
          },
          "transactions": {
            "type": "array",
            "items": {},
            "minItems": 1,
            "description": "This payload contains the transaction data. It must conform to the JSON Schema for the guide associated with each transaction setting (Guide JSON format)."
          },
          "overrides": {
            "$ref": "#/components/schemas/TransactionGroupOverrides"
          }
        },
        "required": [
          "transactionSettingId",
          "transactions"
        ]
      },
      "TransactionGroupOverrides": {
        "type": "object",
        "description": "Customize the Application IDs for you or your trading partner.",
        "properties": {
          "localApplicationId": {
            "type": "string",
            "maxLength": 15,
            "minLength": 2,
            "description": "Set the [GS-02](https://www.stedi.com/edi/x12/segment/GS#GS-02) element to a custom value. If not set, Stedi uses the Application ID for the local profile associated with the partnership."
          },
          "partnerApplicationId": {
            "type": "string",
            "maxLength": 15,
            "minLength": 2,
            "description": "Set the [GS-03](https://www.stedi.com/edi/x12/segment/GS#GS-03) element to a custom value. If not set, Stedi uses the Application ID for the partner profile associated with the partnership."
          }
        }
      },
      "TransactionStatus": {
        "type": "string",
        "enum": [
          "failed",
          "succeeded"
        ]
      },
      "TransactionSummary": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "A unique identifier for the processed transaction within Stedi. This ID is included in the [`transaction.processed.v2` event](https://www.stedi.com/docs/operate/event-types#transaction-processed), or you can retrieve it manually from the transaction's details page within the Stedi app."
          },
          "fileExecutionId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "processedAt": {
            "type": "string",
            "format": "date-time"
          },
          "artifacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Artifact"
            }
          },
          "partnership": {
            "$ref": "#/components/schemas/Partnership"
          },
          "x12": {
            "$ref": "#/components/schemas/X12TransactionSummary"
          },
          "fragments": {
            "$ref": "#/components/schemas/TransactionFragmentsSummary"
          },
          "translationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TranslationError"
            }
          }
        },
        "required": [
          "artifacts",
          "direction",
          "fileExecutionId",
          "mode",
          "partnership",
          "processedAt",
          "status",
          "transactionId"
        ]
      },
      "TranslationError": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/TranslationErrorContext"
          },
          "mark": {
            "$ref": "#/components/schemas/Mark"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "TranslationErrorContext": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "schemaPath": {
            "type": "string"
          }
        }
      },
      "UnauthorizedExceptionResponseContent": {
        "type": "object",
        "description": "The server response when the authorizer failed to authenticate the caller.",
        "properties": {
          "message": {
            "type": "string",
            "description": "Human readable exception message."
          },
          "code": {
            "type": "string",
            "description": "Classification of the exception type."
          }
        },
        "required": [
          "message"
        ]
      },
      "X12AcknowledgmentRequestedCode": {
        "type": "string",
        "description": "Set [ISA-14](https://www.stedi.com/edi/x12/segment/ISA#ISA-14) to a different value. If not set, the default value is `0 (No Interchange Acknowledgment Requested)`.",
        "enum": [
          "0",
          "1",
          "2",
          "3"
        ]
      },
      "X12AuthorizationInformationQualifier": {
        "type": "string",
        "description": "Identifies the type of information in the Authorization Information (`ISA-01`). Default is `00 - No Authorization Information Present`.",
        "enum": [
          "00",
          "01",
          "02",
          "03",
          "04",
          "05",
          "06",
          "07",
          "08"
        ]
      },
      "X12InterchangeAuthorization": {
        "type": "object",
        "description": "Set values for [ISA header](https://www.stedi.com/edi/x12/segment/ISA) elements (ISA-01 to ISA-04).",
        "properties": {
          "authorizationInformationQualifier": {
            "$ref": "#/components/schemas/X12AuthorizationInformationQualifier"
          },
          "authorizationInformation": {
            "type": "string",
            "maxLength": 10,
            "pattern": "^.*[^ ].*$",
            "description": "Information used for additional identification or authorization of the interchange sender or the data in the interchange (`ISA-02`). The type of information is set by the `authorizationInformationQualifier`."
          },
          "securityInformationQualifier": {
            "$ref": "#/components/schemas/X12SecurityInformationQualifier"
          },
          "securityInformation": {
            "type": "string",
            "maxLength": 10,
            "pattern": "^.*[^ ].*$",
            "description": "The security information referenced by the `securityInformationQualifier` (`ISA-04`). Typically, this is a password."
          }
        }
      },
      "X12SecurityInformationQualifier": {
        "type": "string",
        "description": "Identifies the type of information in the Security Information (ISA-03). Default is `00 - No Security Information Present`.",
        "enum": [
          "00",
          "01"
        ]
      },
      "X12TransactionMetadata": {
        "type": "object",
        "properties": {
          "interchange": {
            "$ref": "#/components/schemas/X12TransactionMetadataInterchange"
          },
          "functionalGroup": {
            "$ref": "#/components/schemas/X12TransactionMetadataFunctionalGroup"
          },
          "transaction": {
            "$ref": "#/components/schemas/X12TransactionMetadataTransaction"
          },
          "sender": {
            "$ref": "#/components/schemas/X12TransactionMetadataProfile"
          },
          "receiver": {
            "$ref": "#/components/schemas/X12TransactionMetadataProfile"
          }
        },
        "required": [
          "functionalGroup",
          "interchange",
          "receiver",
          "sender",
          "transaction"
        ]
      },
      "X12TransactionMetadataFunctionalGroup": {
        "type": "object",
        "properties": {
          "controlNumber": {
            "type": "number",
            "maximum": 999999999,
            "minimum": 0
          },
          "date": {
            "type": "string"
          },
          "functionalIdentifierCode": {
            "type": "string"
          },
          "time": {
            "type": "string"
          },
          "release": {
            "type": "string"
          }
        },
        "required": [
          "controlNumber",
          "date",
          "functionalIdentifierCode",
          "release",
          "time"
        ]
      },
      "X12TransactionMetadataInterchange": {
        "type": "object",
        "properties": {
          "acknowledgmentRequestedCode": {
            "type": "string"
          },
          "controlNumber": {
            "type": "number",
            "maximum": 999999999,
            "minimum": 0
          }
        },
        "required": [
          "acknowledgmentRequestedCode",
          "controlNumber"
        ]
      },
      "X12TransactionMetadataProfile": {
        "type": "object",
        "properties": {
          "applicationCode": {
            "type": "string"
          },
          "isa": {
            "$ref": "#/components/schemas/X12TransactionMetadataProfileISA"
          }
        },
        "required": [
          "applicationCode",
          "isa"
        ]
      },
      "X12TransactionMetadataProfileISA": {
        "type": "object",
        "properties": {
          "qualifier": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "qualifier"
        ]
      },
      "X12TransactionMetadataTransaction": {
        "type": "object",
        "properties": {
          "controlNumber": {
            "type": "string"
          },
          "transactionSetIdentifier": {
            "type": "string"
          }
        },
        "required": [
          "controlNumber",
          "transactionSetIdentifier"
        ]
      },
      "X12TransactionSetting": {
        "type": "object",
        "properties": {
          "guideId": {
            "type": "string"
          },
          "transactionSettingId": {
            "type": "string"
          }
        }
      },
      "X12TransactionSummary": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/X12TransactionMetadata"
          },
          "transactionSetting": {
            "$ref": "#/components/schemas/X12TransactionSetting"
          }
        },
        "required": [
          "metadata"
        ]
      }
    },
    "securitySchemes": {
      "httpApiKeyAuth": {
        "type": "apiKey",
        "description": "API key authentication via the 'Authorization' header",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "httpApiKeyAuth": []
    }
  ],
  "x-stedi": {
    "lifecycle": "general_availability",
    "product": "core",
    "public": true
  },
  "tags": [],
  "servers": [
    {
      "url": "https://core.us.stedi.com/2023-08-01",
      "description": "Production"
    }
  ]
}
